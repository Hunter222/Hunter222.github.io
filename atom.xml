<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小黄鸡]]></title>
  <link href="http://hunter222.github.io/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-08-31T20:26:29+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转】php的数组各种用法(上)]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-arrays/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-arrays</id>
    <content type="html"><![CDATA[<h5>一、数组操作的基本函数</h5>

<p>数组的键名和值</p>

<p>array_values($arr);获得数组的值</p>

<p>array_keys($arr);获得数组的键名</p>

<p>array_flip($arr);数组中的值与键名互换（如果有重复前面的会被后面的覆盖）</p>

<p>in_array(&ldquo;apple&rdquo;,$arr);在数组中检索apple</p>

<p>array_search(&ldquo;apple&rdquo;,$arr);在数组中检索apple ，如果存在返回键名</p>

<p>array_key_exists(&ldquo;apple&rdquo;,$arr);检索给定的键名是否存在数组中
isset($arr[apple]):检索给定的键名是否存在数组中</p>

<p>数组的内部指针</p>

<p>current($arr);返回数组中的当前单元</p>

<p>pos($arr);返回数组中的当前单元</p>

<p>key($arr);返回数组中当前单元的键名</p>

<p>prev($arr);将数组中的内部指针倒回一位</p>

<p>next($arr);将数组中的内部指针向前移动一位</p>

<p>end($arr);将数组中的内部指针指向最后一个单元</p>

<p>reset($arr;将数组中的内部指针指向第一个单元</p>

<p>each($arr);将返回数组当前元素的一个键名/值的构造数组，并使数组指针向前移动一位</p>

<p>list($key,$value)=each($arr);获得数组当前元素的键名和值
数组和变量之间的转换</p>

<p>extract($arr);用于把数组中的元素转换成变量导入到当前文件中，键名当作变量名，值作为变量值</p>

<p>注：（第二个参数很重要，可以看手册使用）使用方法  echo $a;
compact(var1,var2,var3);用给定的变量名创建一个数组</p>

<h5>二、数组的分段和填充</h5>

<p>数组的分段</p>

<p>array_slice($arr,0,3);可以将数组中的一段取出，此函数忽略键名</p>

<p>array_splice($arr,0,3，array(&ldquo;black&rdquo;,&ldquo;maroon&rdquo;));</p>

<p>可以将数组中的一段取出，与上个函数不同在于返回的序列从原数组中删除</p>

<p>分割多个数组</p>

<p>array_chunk($arr,3,TRUE);可以将一个数组分割成多个，TRUE为保留
原数组的键名</p>

<p>数组的填充</p>

<p>array_pad($arr,5,&lsquo;x&rsquo;);将一个数组填补到制定长度</p>

<h5>三、数组与栈</h5>

<p>array_push($arr,&ldquo;apple&rdquo;,&ldquo;pear&rdquo;);将一个或多个元素压入数组栈的末尾（入栈），返回入栈元素的个数
array_pop($arr);将数组栈的最后一个元素弹出（出栈）</p>

<h5>四、数组与列队</h5>

<p>array_shift($arr);数组中的第一个元素移出并作为结果返回（数组长度减1，其他元素向前移动一位，数字键名改为从零技术，文字键名不变）</p>

<p>array_unshift($arr,&ldquo;a&rdquo;,array(1,2));在数组的开头插入一个或多个元素</p>

<h5>五、回调函数</h5>

<p>array_walk($arr,&lsquo;function&rsquo;,&lsquo;words&rsquo;);使用用户函数对数组中的每个成员进行处理（第三个参数传递给回调函数function）</p>

<p>array_mpa(&ldquo;function&rdquo;,$arr1,$arr2);可以处理多个数组（当使用两个或更多数组时，他们的长度应该相同）</p>

<p>array_filter($arr,&ldquo;function&rdquo;);使用回调函数过滤数组中的每个元素，如果回调函数为TRUE，数组的当前元素会被包含在返回的结果数组中，数组的键名保留不变</p>

<p>array_reduce($arr,&ldquo;function&rdquo;,&ldquo;<em>&rdquo;);转化为单值函数（</em>为数组的第一个值）</p>

<h5>六、数组的排序</h5>

<p>通过元素值对数组排序</p>

<p>sort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>rsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>usort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）忽略键名的数组排序</p>

<p>asort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>arsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>uasort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二
个，负数表示第一个小于第二个）保留键名的数组排序</p>

<p>通过键名对数组排序</p>

<p>ksort($arr);按照键名正序排序</p>

<p>krsort($arr);按照键名逆序排序</p>

<p>uksort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的键名
进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）</p>

<p>自然排序法排序
natsort($arr);自然排序（忽略键名）
natcasesort($arr);自然排序（忽略大小写，忽略键名）</p>

<h5>七、数组的计算</h5>

<p>数组元素的求和</p>

<p>array_sum($arr);对数组内部的所有元素做求和运算
数组的合并</p>

<p>array_merge($arr1,$arr2);合并两个或多个数组（相同的字符串键名，后面的覆盖前面的，相同的数字键名，后面的不会做覆盖操作，而是附加到后面）</p>

<p>“+”$arr1+$arr2;对于相同的键名只保留后一个</p>

<p>array_merge_recursive($arr1,$arr2); 递归合并操作，如果数组中有相同的字符串键名，这些值将被合并到一个数组中去。如果一个值本身是一个数组，将按照相应的键名把它合并为另一个数组。当数组 具有相同的</p>

<p>数组键名时，后一个值将不会覆盖原来的值，而是附加到后面</p>

<p>数组的差集</p>

<p>array_diff($arr1,$arr2);返回差集结果数组</p>

<p>array_diff_assoc($arr1,$arr2,$arr3);返回差集结果数组，键名也做比较</p>

<p>数组的交集</p>

<p>array_intersect($arr1,$arr2);返回交集结果数组</p>

<p>array_intersect_assoc($arr1,$arr2);返回交集结果数组，键名也做比较</p>

<h5>八、其他的数组函数</h5>

<p>range(0,12);创建一个包含指定范围单元的数组</p>

<p>array_unique($arr);移除数组中重复的值，新的数组中会保留原始的键名</p>

<p>array_reverse($arr,TRUE);返回一个单元顺序与原数组相反的数组，如果第二个参数为TRUE保留原来的键名</p>

<p>//srand((float)microtime()*10000000); 随机种子触发器</p>

<p>array_rand($arr,2);从数组中随机取出一个或 多个元素</p>

<p>shuffle($arr);将数组的顺序打乱</p>

<p>本类函数允许用多种方法来操作数组和与之交互。数组的本质是储存，管理
和操作一组变量。</p>

<p>PHP 支持一维和多维数组，可以是用户创建或由另一个函数创建。有一些特定的数据库处理函数可以从数据库查询中生成数组，还有一些函数返回数组。</p>

<p>array_change_key_case — 返回字符串键名全为小写或大写的数组</p>

<p>array_chunk — 将一个数组分割成多个</p>

<p>array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>

<p>array_count_values — 统计数组中所有的值出现的次数</p>

<p>array_diff_assoc — 带索引检查计算数组的差集</p>

<p>array_diff_key — 使用键名比较计算数组的差集</p>

<p>array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集</p>

<p>array_diff_ukey — 用回调函数对键名比较计算数组的差集</p>

<p>array_diff — 计算数组的差集</p>

<p>array_fill_keys — Fill an array with values, specifying keys</p>

<p>array_fill — 用给定的值填充数组</p>

<p>array_filter — 用回调函数过滤数组中的单元</p>

<p>array_flip — 交换数组中的键和值</p>

<p>array_intersect_assoc — 带索引检查计算数组的交集</p>

<p>array_intersect_key — 使用键名比较计算数组的交集</p>

<p>array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比
较索引</p>

<p>array_intersect_ukey — 用回调函数比较键名来计算数组的交集</p>

<p>array_intersect — 计算数组的交集</p>

<p>array_key_exists — 检查给定的键名或索引是否存在于数组中</p>

<p>array_keys — 返回数组中所有的键名</p>

<p>array_map — 将回调函数作用到给定数组的单元上</p>

<p>array_merge_recursive — 递归地合并一个或多个数组</p>

<p>array_merge — 合并一个或多个数组</p>

<p>array_multisort — 对多个数组或多维数组进行排序</p>

<p>array_pad — 用值将数组填补到指定长度</p>

<p>array_pop — 将数组最后一个单元弹出（出栈）</p>

<p>array_product — 计算数组中所有值的乘积</p>

<p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>

<p>array_rand — 从数组中随机取出一个或多个单元</p>

<p>array_reduce — 用回调函数迭代地将数组简化为单一的值</p>

<p>array_reverse — 返回一个单元顺序相反的数组</p>

<p>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</p>

<p>array_shift — 将数组开头的单元移出数组</p>

<p>array_slice — 从数组中取出一段</p>

<p>array_splice — 把数组中的一部分去掉并用其它值取代</p>

<p>array_sum — 计算数组中所有值的和</p>

<p>array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据</p>

<p>array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数
据和索引</p>

<p>array_udiff — 用回调函数比较数据来计算数组的差集</p>

<p>array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比
较数据</p>

<p>array_uintersect_uassoc — 带索引检查计算数组的交集，用回调函数比较数据和索引</p>

<p>array_uintersect — 计算数组的交集，用回调函数比较数据</p>

<p>array_unique — 移除数组中重复的值</p>

<p>array_unshift — 在数组开头插入一个或多个单元</p>

<p>array_values — 返回数组中所有的值</p>

<p>array_walk_recursive — 对数组中的每个成员递归地应用用户函数</p>

<p>array_walk — 对数组中的每个成员应用用户函数</p>

<p>array — 新建一个数组</p>

<p>arsort — 对数组进行逆向排序并保持索引关系</p>

<p>asort — 对数组进行排序并保持索引关系</p>

<p>compact — 建立一个数组，包括变量名和它们的值</p>

<p>count — 计算数组中的单元数目或对象中的属性个数</p>

<p>current — 返回数组中的当前单元</p>

<p>each — 返回数组中当前的键／值对并将数组指针向前移动一步</p>

<p>end — 将数组的内部指针指向最后一个单元</p>

<p>extract — 从数组中将变量导入到当前的符号表</p>

<p>in_array — 检查数组中是否存在某个值</p>

<p>key — 从关联数组中取得键名</p>

<p>krsort — 对数组按照键名逆向排序</p>

<p>ksort — 对数组按照键名排序</p>

<p>list — 把数组中的值赋给一些变量</p>

<p>natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序</p>

<p>natsort — 用“自然排序”算法对数组排序</p>

<p>next — 将数组中的内部指针向前移动一位</p>

<p>pos — current() 的别名</p>

<p>prev — 将数组的内部指针倒回一位</p>

<p>range — 建立一个包含指定范围单元的数组</p>

<p>reset — 将数组的内部指针指向第一个单元</p>

<p>rsort — 对数组逆向排序</p>

<p>shuffle — 将数组打乱</p>

<p>sizeof — count() 的别名</p>

<p>sort — 对数组排序</p>

<p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关
联</p>

<p>uksort — 使用用户自定义的比较函数对数组中的键名进行排序</p>

<p>usort — 使用用户自定义的比较函数对数组中的值进行排序</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的mysql基本操作]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Mysql-base/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Mysql-base</id>
    <content type="html"><![CDATA[<h5>简单的mysql基本操作</h5>

<p>mysql 查看默认引擎</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show variables like 'storage_engine';</span></code></pre></td></tr></table></div></figure>


<p>查看表详细结构语句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHOW CREARTE TABLE 表名 \G</span></code></pre></td></tr></table></div></figure>


<p>修改表名</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 旧表名 RENAME (TO) 新表名</span></code></pre></td></tr></table></div></figure>


<p>修改字段的数据类型</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 MODIFY 属性名 数据类型;
</span><span class='line'>
</span><span class='line'>eg：ALTER TABLE user MODIFY name varchar(30);</span></code></pre></td></tr></table></div></figure>


<p>修改字段名(属性名)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型;</span></code></pre></td></tr></table></div></figure>


<p>增加字段（属性）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE  表名 ADD 属性名1 数据类型【完整性约束条件】[FIRST] AFTER 属性名2</span></code></pre></td></tr></table></div></figure>


<p>删除字段（属性）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 DROP 属性名;</span></code></pre></td></tr></table></div></figure>


<p>修改字段的排列位置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 MODIFY 属性名1 数据类型 [FIRST] AFTER 属性名2;</span></code></pre></td></tr></table></div></figure>


<p>更改表的存储引擎</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 engine=存储引擎名;</span></code></pre></td></tr></table></div></figure>


<p>删除表的外键约束</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 DROP FOREIGN KEY 外键别名;</span></code></pre></td></tr></table></div></figure>


<p>索引的优点：可以提高检索数据的速度</p>

<p>缺点：创建和维护索引需要耗费时间，占用物理空间，</p>

<p>在已经存在的表创建索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 ON 表名(属性名[(长度)] [ASC|DESC]);</span></code></pre></td></tr></table></div></figure>


<p>用ALTER TABLE 来创建索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名(属性名[(长度)] [ASC|DESC]);</span></code></pre></td></tr></table></div></figure>


<p>删除索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DROP INDEX 索引名 ON 表名</span></code></pre></td></tr></table></div></figure>


<p>创建视图的语法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句
</span><span class='line'>
</span><span class='line'>[WITH [CASCADED | LOCAL] CHECK OPTION];</span></code></pre></td></tr></table></div></figure>


<p>查看视图</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DESC 视图名
</span><span class='line'>
</span><span class='line'>SHOW TABLES STATUS 查看视图基本信息
</span><span class='line'>
</span><span class='line'>SHOW TABLES STATUS LIKE ‘视图名’
</span><span class='line'>
</span><span class='line'>SHOW CREARTE VIEW 查看视图详细信息
</span><span class='line'>
</span><span class='line'>SHOW CREARTE VIEW  视图;</span></code></pre></td></tr></table></div></figure>


<p>修改视图</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE OR REPLACE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句
</span><span class='line'>
</span><span class='line'>[WITH [CASCADED | LOCAL] CHECK OPTION];
</span><span class='line'>
</span><span class='line'>ALTER [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句
</span><span class='line'>
</span><span class='line'>[WITH [CASCADED | LOCAL] CHECK OPTION];</span></code></pre></td></tr></table></div></figure>


<p>更新视图</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPDATE 视图 SET 属性名；</span></code></pre></td></tr></table></div></figure>


<p>删除视图</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DROP VIEW [IF EXISTS] 视图名列表 [RESTRICT|CASCADE]</span></code></pre></td></tr></table></div></figure>


<p>创建只有一种执行语句的触发器的形式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名
</span><span class='line'>
</span><span class='line'>FOR EACH ROW 执行语句</span></code></pre></td></tr></table></div></figure>


<p>创建有多个执行语句的触发器的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名
</span><span class='line'>
</span><span class='line'>FOR EACH ROW
</span><span class='line'>
</span><span class='line'>BEGINE
</span><span class='line'>
</span><span class='line'>执行语句列表
</span><span class='line'>
</span><span class='line'>END</span></code></pre></td></tr></table></div></figure>


<p>查看触发器</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHOW TRIGGER 触发器名</span></code></pre></td></tr></table></div></figure>


<p>删除触发器</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DROP TRIGGER 触发器名</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转】php的数组各种用法（下）]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-arrays2/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-arrays2</id>
    <content type="html"><![CDATA[<h5>3.1 什么是数组</h5>

<p>一个标量变量就是一个用来存储数值的命名区域。同样，一个数组就是一个用来存储一系列变量值的命名区域，因此，可以使用数组组织标量变量。
存储在数组中的值称为数组元素。每个数组元素有一个相关的索引（也称为关键字），它可以用来访问元素。在大多数编程语言中，数组都具有数字索引，而且这些索个通常是从0或1开始的。</p>

<h5>3.2 数字索引数组</h5>

<p>在PHP中，数字索引的默认值是从0开始的，当然也可以改变它。</p>

<p>3.2.1 数字索引数组的初始化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$porducts = array( 'Tires', 'Oil', 'Spark Plugs' );</span></code></pre></td></tr></table></div></figure>


<p>就像echo语句一样，array()实际上是一个语言结构，而不是一个函数。
根据对数组内容的需求不同，可能不需要再像以上例子一样对它们进行手工的初始化操作。如果所需数据保存在另一个数组中，可以使用运算符“=”简单地将数组复制到另一个数组。</p>

<p>如果需要将按升序排列的数字保存在一个数组中，可以使用range()函数自动创建这个数组。如下这行代码将创建一个从1到10的数字数组：$numbers = range(1,10);</p>

<p>range()函数具有一个可选的第三个参数，这个参数允许设定值之间的步骤。例如，如需建立一个1到10之间的奇数数组，可以使用如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$odds = range(1,10,2);</span></code></pre></td></tr></table></div></figure>


<p>range()函数也可以对字符进行操作，如：$letters = range(&lsquo;a&rsquo;, &lsquo;z&rsquo;);</p>

<p>3.2.2 访问数组的内容
要访问一个变量的内容，可以直接使用其名称。如果该变量是一个数组，可以使用变量名称和关键字或索引的组合来访问其内容。关键字或索引将指定</p>

<p>我们要访问的变量。索引在变量名称后面用方括号括起来。</p>

<p>在默认的情况下，0元素是数组的第一个元素。
请注意，虽然PHP的字符串解析功能非常强大和智能，但是可能会引起混淆。当你将数组或其他变量嵌入双引号中的字符串时，如果不能正确解释它们，可以将它们放置在双引号之外，或者查找第4章的“字符串操作与正则表达式”获得更复杂的语法。</p>

<p>就像PHP的其他变量一样，数组不需要预先初始化或创建。在第一次使用它们的时候，它们会自动创建。</p>

<p>3.2.3. 使用循环访问数组
由于数组使用有序的数字作为索引，所以使用一个for循环就可以很容易地显示数组的内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for ($i=0; $i&lt;3; $i++)
</span><span class='line'>echo "$products[$i]";</span></code></pre></td></tr></table></div></figure>


<p>使用一个简单的循环就可以访问每个元素是数字索引数组的一个非常好的特性。也可以使用foreach循环，这个循环语句是专门为数组而设计的。如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreach ($products as $current)
</span><span class='line'>echo $current. ' ';</span></code></pre></td></tr></table></div></figure>


<h5>3.3 使用不同索引的数组</h5>

<p>PHP还支持相关数组。在相关数组中，可以将每个变量值与任何关键字或索引关联起来。</p>

<p>3.3.1 初始化相关数组
如下所示的代码可以创建一个以产品名称作为关键字、以价格作为值的相关数组：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$prices = array( 'Tires'=&gt;100, 'Oil'=&gt;10, 'Spark Plugs'=&gt;4 );</span></code></pre></td></tr></table></div></figure>


<p>关键字和值之间的符号只是一个大于号与等于符号。</p>

<p>3.3.2 访问数组元素
同样，可以使用变量名称和关键字来访问数组的内容。例如$prices[&lsquo;Tires&rsquo;]。</p>

<p>3.3.3 使用循环语句
因为相关数组的索引不是数字，因此无法在for循环语句中使用一个简单的计数器对数组进行操作。但是可以使用foreach循环或list()和each()结构。</p>

<p>当使用foreach循环语句对相关数组进行操作时，foreach()循环具有不同的结构。可以按如下方式使用关键字：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foreach ($prices as $key =&gt; $value)
</span><span class='line'>echo $key.'=&gt;'.$value.'&lt;br /&gt;';</span></code></pre></td></tr></table></div></figure>


<p>如下所示的代码将使用each()结构打印$prices数组的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while( $element = each($prices))
</span><span class='line'>{
</span><span class='line'>echo $element['key'];
</span><span class='line'>echo ' - ';
</span><span class='line'>echo $element['value'];
</span><span class='line'>echo '&lt;br /&gt;';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>each()函数将返回数组的当前元素，并将下一个元素作为当前元素。因为在while循环中调用each()函数，它将按顺序返回数组中每个元素，并且当它到达数组末尾时，循环操作将终止。</p>

<p>在 这段代码中，变量$element是一个数组。当调用each()时，它将返回一个带有4个数值和4个指向数组位置的索引的数组。位置key和0包含了当 前元素的关键字，而位置value和1包含了当前元素的值。虽然这与选哪一种方法没什么不同，但我们选择了使用命名位置，而不是数字索引位置。
此外，还有一种更为高级和常见的方式来完成相同的操作。函数list()可以用来将一个数组分解为一系列的值。可以按照如下方式将函数each()返回的两个值分开：list( $product, $price) = each( $price);</p>

<p>以上代码使用each()从$prices数组中取出当前元素，并且将它作为数组返回，然后再指向下一个元素。它还使用list()将从each()返回的数组中所包含0、1两个元素变为两个名为$product和$price的新蛮量。
我们可以循环遍历整个$prices数组，使用如下所示的简短脚本显示它的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while(list($prodct, $pirce) = each($prices))
</span><span class='line'>echo "$product - $price&lt;br /&gt;";</span></code></pre></td></tr></table></div></figure>


<p>这段代码的输出结果与前面脚本的输出结果相同，但它更容易阅读，因为list()允许为新变量命名。</p>

<p>需要注意的一点是，当使用each()函数时，数组将记录当前元素。如果希望在相同的脚本中两次使用该数组，就必须使用函数reset()将当前元素重新设置到数组开始处。要再次遍历prices数组，可以使用如下所示的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>reset($prices);
</span><span class='line'>while(list($product, $price) = each($prices))
</span><span class='line'>echo "$product - $price&lt;br /&gt;";</span></code></pre></td></tr></table></div></figure>


<h5>3.4 数组操作符</h5>

<p>+联合，==等价，===恒等，!=不等价，&lt;>不等价，!==不恒等。
联合操作符尝试将$b中的元素添加到$a的末尾。如果$b中的元素与$a中的一些元素具有相同的索引，它们将不会被添加。即$a中的元素将不会被覆盖。</p>

<h5>3.5 多维数组</h5>

<p>数组不一定就是一个关键字和值的简单列表——数组中的每个位置还可以保存另一个数组。使用这种方法，可以创建一个二维数组。可以把二维数组当成一个矩阵，或者是一个具有宽度和高度或者行和列的网络。</p>

<h5>3.6 数组排序</h5>

<p>3.6.1 使用sort()函数
sort()函数是区分字母大小写的。所有的大家字母都在小写字母的前面。所以‘A’小于‘Z’，而'Z'小于‘a’。</p>

<p>该函数的第二个参数是可选的。这个可选参数可以传递SORT_REGULAR（默认值）、SORT_NUMERIC或SORT_STRING。指定排序类型 的功能是非常有用的，例如，当要比较可能包含有数字2和12的字符串时。从数学角度看，2要小于12，但是作为字符串，‘12’却要小于‘2’。</p>

<p>3.6.2 使用asort()函数和ksort()函数对相关数组排序
函数asort()根据数组的每个元素值进行排序。ksort()函数是按关键字排序而不是按值排序。</p>

<p>3.6.3 反向排序
函数rsort()将一个一维数字索引数组按降序排序。函数arsort()将一个一维相关数组按每个元素值的降序排序。函数krsort()针根据数组元素的关键字将一维数组按照降序排序。</p>

<p>为了访问一个一维数组中的数据，需要使用数组的名称和元素的索引，除了一个元素具有两个索引——行和列外，二维数组和一维数组是类似的。
可以使用双重for循环来实现同样的效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for ( $row=0; $row&lt;3; $row++ )
</span><span class='line'>{
</span><span class='line'>for ( $column=0; $column&lt;3; $column++ )
</span><span class='line'>{
</span><span class='line'>echo '|'.$products[$row][$column];
</span><span class='line'>|
</span><span class='line'>echo '|&lt;br /&gt;';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果对一个大数组使用这种代码，那么将简洁得多。
你可能更喜欢创建列名称来代替数字。可以使用如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$products = array ( array ( 'Code'=&gt;'TIR', 'Descrīption'=&gt;'Tires', 'Price'=&gt;100 ), array ( 'Code'=&gt;'OIL', 'Descrīption'=&gt;'Oil', 'Price'=&gt;10 ), array ( 'Code'=&gt;'SPK', 'Descrīption'=&gt;'Spark Plugs', 'Price'=&gt;4 ) };</span></code></pre></td></tr></table></div></figure>


<p>如果希望检索单个值，那么使用这个数组会容易得多。请记住，将所描述的内容保存到用它的名 称命名的列中，与将其保存到所谓的第一列中相比，前者更容易记忆。使用描述性索引，不需要记住某个元素是存放在[x][y]位置的。使用一对有意义的行和 列的名称作为索引可以使用你很容易找到所需的数据。</p>

<p>然后，我们却不能使用一个简单的for循环按顺序遍历每一列。可以使用for循环遍历外部的数 字索引数组$products。$products数组的每一行都是一个具有描述性索引的数组。在while循环中使用each()和list()函数， 可以遍历整个内部数组。因此，需要一个内嵌有while循环的for循环。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for ( $row = 0; $row &lt; 3; $row++ }
</span><span class='line'>{
</span><span class='line'>while ( list ( $key, $value ) = each ( $products[$row] ) )
</span><span class='line'>{
</span><span class='line'>echo "|$value";
</span><span class='line'>}
</span><span class='line'>echo '|&lt;br /&gt;';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>三维数组具有高、宽、深的概念。如果能轻松地将一个二维数组想像成一个有行和列的表格，那么就可以将三维数组想像成一堆像这样的表格。每个元素可以通过层、行和列进行引用。</p>

<p>根据创建多维数组的方法，可以创建四维、五维或六维数组。在PHP中，并没有设置数组维数的限制，但人们很难设想一个多于三维的数组。大多数的实际问题在逻辑上只需要使用三维或者更少维的数组结构就可以了。</p>

<h5>3.7 多维数组的排序</h5>

<p>对 多于一维的数组进行排序，或者不按字母和数字的顺序进行排，要复杂得多。PHP知道如何比较两个数字或字符串，但在多维数组中，每个元素都是一个数组。 PHP不知道如何比较两个数组，所以需要建立一个比较它们的方法。在大多数情况下，单词和数字的顺序是显而易见的——但对于复杂的对象，问题就会多一些。</p>

<p>3.7.1 用户定义排序
usort()中的“u”代表“user”，因为这个函数要求传入用户定义的比较函数。asort和ksort对应的版本uasort()和uksort()也要求传入用户定义的比较函数。</p>

<p>类似于asort()，当对非数字索引数组的值进行排序时，uasort()才会被使用。如果值是简单的数字或文本则可以使用asort。如果要比较的值像数组一样复杂，可以定义一个比较函数，然后使用uasort()。</p>

<p>类似于ksort()，当对非数字索引数组的关键字进行排序时才使用uksort()。如果值是简单的数字或文本就使用ksort。如果要比较的对象像数组一样复杂，可以定义一个比较函数，然后使用uksort()。</p>

<p>3.7.2 反向用户排序
函数sort()、asort()和ksort()都分别对应一个带字母“r”的反向排序函数。用户定义的排序没有反向变体，但可以对一个多维数组进行反向排序。</p>

<h5>3.8 对数组进行重新排序</h5>

<p>3.8.1 使用shuffle()函数
在PHP的早期版本中，shuffle()要求调用srand()函数时首先提供一个随机数生成器。如今，这个步骤已经不再需要了。</p>

<p>如果这个函数对你非常重要，可以在程序中应用该函数之前在服务器上测试它。</p>

<p>由于并不需要真正重新排序整个数组，使用array_rand()函数可以实现相同的功能。</p>

<p>3.8.2 使用array_reverse()函数
array_reverse()函数使用一个数组作参数，返回一个内容与参数数组相同但顺序相反的数组。</p>

<p>因为单独使用range()函数将创建一个升序序列，所以必须使用sort()函数或array_reverse()函数将数组中的数字变为降序。或者，也可以使用for循环通过一次一个元素的方式创建这个数组。如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$numbers = array();
</span><span class='line'>for ($i=10; $i&gt;0; $i--)
</span><span class='line'>array_push( $numbers, $i );</span></code></pre></td></tr></table></div></figure>


<p>一个for循环可以像这样按降序方式运行。可以将计数器</p>

<p>一个for循环可以像这样按降序方式运行。可以将计数器的初始值设为一个大数，在每次循环末尾使用运算符“&ndash;”将计数器减1。</p>

<p>在这里，我们创建了一个空数组，然后使用array_push()函数将每个新元素添加到数组的末尾。请注意，和array_push()相反的函数是array_pop()，这个函数用来删除并返回数组末尾的一个元素。</p>

<p>或者，也可以使用array_reverse()函数将由range()函数所创建的数组进行反向排序。</p>

<p>请注意，array_reverse()函数将返回一个原数组修改后的副本。如果不再需要原来的数组，比如在这个例子中，可以用新的副本覆盖原来的版本。
如果数据只是一系列的整数，可以通过将-1作为range()函数的第三个可选调参数，以相反的顺序创建该数组。</p>

<h5>3.9 从文件载入数组</h5>

<p>使用file()函数将整个文件载入一个数组中。文件中的每行则成为数组中的一个元素。使用了count()函数来统计数组中的元素个数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>explode("\t", $orders[$i])</span></code></pre></td></tr></table></div></figure>


<p>explode()函数可以将传入的字符串分割成一个个小块。每个制表符成为两个元素之间的断点。这个函数的可选参数limit可以用来限制被返回的最大块数。</p>

<p>可以使用许多方法从字符串中提取数字。在这里，我们使用了intval()函数。它可以将一个字符串转化成一个整数。这个转换是相当智能化的，它可以忽略某些部分，例如标签就不能转换成数字。</p>

<h5>3.10 执行其他的数组操作</h5>

<p>3.10.1 在数组中浏览：each()、current()、reset()、end()、next()、pos()和prev()</p>

<p>前面已经提到，每个数组都有一个内部指针指向数组中的当前元素。当使用函数each()时，就间接地使用了这个指针，但是也可以直接使用和操作这个指针。</p>

<p>如果创建一个新数组，那么当前指针就将被初始化，并指向数组的第一个元素。</p>

<p>调用next()或each()将使指针前移一个元素。调用each($array_name)会在指针前移一个位置之前返回当前元素。next()函数则有些不同——调用next($array_name)是将指针前移，然后再返回新的当前元素。</p>

<p>调用end($array_name)可以将指针移到数组末尾。</p>

<p>要反向遍历一个数组，可以使用end()和prev()函数。prev()函数和next()函数相反。它是将当前指针往回移一个位置然后再返回新的当前元素。</p>

<p>3.10.2 对数组的每一个元素应用任何函数：array_walk()
array_walk()函数需要三个参数。第一个是arr，也就是需要处理的数组。第二个是func，也就是用户自定义并将作用于数组中每个元素的函数。第三个参数userdata是可选的，如果使用它，它可以作为一个参数传递给我们自己的函数。</p>

<p>看一个销微复杂点的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function my_multiply(&$value, $key, $factor)
</span><span class='line'>{
</span><span class='line'>$value *= $factor;
</span><span class='line'>}
</span><span class='line'>array_walk(&$array, 'my_multiply', 3);</span></code></pre></td></tr></table></div></figure>


<p>在这里，我们定义了一个名为my_multiply()的函数，它可以用所提供的乘法因子去乘以数组中的每个元素。</p>

<p>此外，还有一个需要注意的问题是传递毵数$value的方式。在my_multiply()的函数定义中，变量前面的地址符（&amp;）意味着$value是按引用方式传递的。按引用方式传递允许函数修改数组的内容。</p>

<p>3.10.3 统计数组元素个数：count()、sizeof()
和array_count_values()</p>

<p>count()函数和sizeof()函数具有同样的用途，都可以返回数组元素的个数。可以得到一个常规标量变量中的元素个数，如果传递给这个函数的数组是一个空数组，或者是一个没有经过设定的变量，返回的数组个数就是0。
如 果调用array_count_values($array)，这个函数将会统计每个特定的值在数组$array中出现过的次数（这就是数组的基数集）。 这个函数将返回一个包含频率表的相关数组。这个数组包含数组$array中的所有值，并以这些值作为相关数组的关键字。每个关键字所对应的数值就是关键字 在数组$array中出现的次数。</p>

<p>3.10.4 将数组转换成标量变量：extract()
对于一个非数字索引数组，而该数组又有许多关键字-值对，可以使用函数extract()将它们转换成一系列的标量变量。</p>

<p>函数extract()的作用是通过一个数组创建一系列的标量变量，这些变量的名称必须是数组中关键字的名称，而变量值则是数组中的值。</p>

<p>extract()函数具有两个可选参数：extract_type和prefix。变量extract_type将告诉extract()函数如何处理冲突。有时可能已经存在一个和数组关键字同名的变量，该函数的默认操作是覆盖已有的变量。
两个最常用的选项是EXTR_OVERWRITE（默认值）和EXTR_PREFIX_ALL。当知道会发生特定的冲突并且希望跳过该关键字或要给它加上前缀时，可能会用到其他选项。</p>

<p>extract()可以提取出一个元素，该元素的关键字必须是一个有效的变量名称，这就意味着以数字开始或包含空格的关键字将被跳过。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下thinkphp的Nginx配置文件]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp</id>
    <content type="html"><![CDATA[<h5>linux下thinkphp的Nginx配置文件(亲测有效)</h5>

<p>一个配置文件，完美支持普通,兼容,pathinfo,rewrite4种url模式，常见的静态文件404时也不会再去跑一遍fastcgi浪费资源。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  thinkphp.lo;
</span><span class='line'>    root /var/www;
</span><span class='line'>    index  index.html index.htm index.php;
</span><span class='line'>
</span><span class='line'>    error_page  404              /404.html;
</span><span class='line'>    location = /404.html {
</span><span class='line'>        return 404 'Sorry, File not Found!';
</span><span class='line'>    }
</span><span class='line'>    error_page  500 502 503 504  /50x.html;
</span><span class='line'>    location = /50x.html {
</span><span class='line'>        root   /usr/share/nginx/html; # windows用户替换这个目录
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        try_files $uri @rewrite;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location @rewrite {
</span><span class='line'>        set $static 0;
</span><span class='line'>        if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
</span><span class='line'>            set $static 1;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if ($static = 0) {
</span><span class='line'>            rewrite ^/(.*)$ /index.php?s=/$1;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~ /Uploads/.*\.php$ {
</span><span class='line'>        deny all;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~ \.php/ {
</span><span class='line'>       if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { }
</span><span class='line'>       fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>       include fastcgi_params;
</span><span class='line'>       fastcgi_param SCRIPT_NAME     $1;
</span><span class='line'>       fastcgi_param PATH_INFO       $2;
</span><span class='line'>       fastcgi_param SCRIPT_FILENAME $document_root$1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~ \.php$ {
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location ~ /\.ht {
</span><span class='line'>        deny  all;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@10-4-14-168 html]# cat /etc/redhat-release
</span><span class='line'>CentOS release 6.5 (Final)</span></code></pre></td></tr></table></div></figure>


<p>2：关掉防火墙</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@10-4-14-168 html]# chkconfig iptables off</span></code></pre></td></tr></table></div></figure>


<p>3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#wget http://www.atomicorp.com/installers/atomic
</span><span class='line'>#sh ./atomic
</span><span class='line'>#yum check-update</span></code></pre></td></tr></table></div></figure>


<p>4：安装开发包和库文件　(安装下面四个)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng
</span><span class='line'>
</span><span class='line'>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel
</span><span class='line'>
</span><span class='line'>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2
</span><span class='line'>
</span><span class='line'>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel</span></code></pre></td></tr></table></div></figure>


<p>5：卸载已安装的apache、mysql、php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum remove httpd
</span><span class='line'># yum remove mysql
</span><span class='line'># yum remove php</span></code></pre></td></tr></table></div></figure>


<p>6：安装nginx</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install nginx
</span><span class='line'># service nginx start
</span><span class='line'># chkconfig --levels 235 nginx on
</span><span class='line'>//设2、3、5级别开机启动</span></code></pre></td></tr></table></div></figure>


<p>7：安装mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install mysql mysql-server mysql-devel
</span><span class='line'># service mysqld start
</span><span class='line'># chkconfig --levels 235 mysqld on
</span><span class='line'>登陆MySQL删除空用户，修改root密码
</span><span class='line'>mysql&gt;select user,host,password from mysql.user;
</span><span class='line'> 
</span><span class='line'>mysql&gt;drop user ''@localhost;
</span><span class='line'> 
</span><span class='line'>mysql&gt;update mysql.user set password = PASSWORD('*********') where user='root';
</span><span class='line'> 
</span><span class='line'>mysql&gt;flush privileges;</span></code></pre></td></tr></table></div></figure>


<p>8：安装php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap
</span><span class='line'>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
</span><span class='line'>//安装php和所需组件使PHP支持MySQL、FastCGI模式
</span><span class='line'>#yum install  php-tidy php-common php-devel php-fpm php-mysql
</span><span class='line'>
</span><span class='line'># service php-fpm start
</span><span class='line'># chkconfig --levels 235 php-fpm on</span></code></pre></td></tr></table></div></figure>


<p>9：配置nginx支持php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak
</span><span class='line'>//将配置文件改为备份文件
</span><span class='line'> 
</span><span class='line'># cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf
</span><span class='line'>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件
</span><span class='line'> 
</span><span class='line'>//修改nginx配置文件，添加fastcgi支持
</span><span class='line'># vi /etc/nginx/nginx.conf
</span><span class='line'>index index.php index.html index.htm;
</span><span class='line'>//加入index.php
</span><span class='line'> 
</span><span class='line'>location ~ \.php$ {
</span><span class='line'>            root           /usr/share/nginx/html;
</span><span class='line'>            fastcgi_pass   127.0.0.1:9000;
</span><span class='line'>            fastcgi_index  index.php;
</span><span class='line'>            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
</span><span class='line'>            include        fastcgi_params;
</span><span class='line'>        }
</span><span class='line'>//将以上代码注释去掉，并修改成nginx默认路径</span></code></pre></td></tr></table></div></figure>


<p>10：配置php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
</span><span class='line'>[root@CentOS ~]# vi /etc/php.ini</span></code></pre></td></tr></table></div></figure>


<p>11：重启nginx php-fpm</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># service nginx restart
</span><span class='line'># service php-fpm restart</span></code></pre></td></tr></table></div></figure>


<p>　　
12：建立info.php文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /usr/share/nginx/html/info.php
</span><span class='line'>&lt;?php
</span><span class='line'>   phpinfo();
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>13：测试nginx是否解析php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>本地浏览器输入：192.168.12.103/info.php
</span><span class='line'>显示php界面  环境搭建成功</span></code></pre></td></tr></table></div></figure>


<p>注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax对xml接收]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-xml/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-xml</id>
    <content type="html"><![CDATA[<h5>ajax负责请求xml和接收xml信息，dom负责处理xml信息</h5>

<p>效果：
<img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fj7vwgj20h307ign8.jpg" alt="haha" /></p>

<p>代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;title&gt;新建网页&lt;/title&gt;
</span><span class='line'>        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</span><span class='line'>        &lt;meta name="description" content="" /&gt;
</span><span class='line'>        &lt;meta name="keywords" content="" /&gt;
</span><span class='line'>        &lt;script type="text/javascript"&gt;
</span><span class='line'>        function f1(){
</span><span class='line'>            var xhr = new XMLHttpRequest();
</span><span class='line'>            xhr.onreadystatechange = function(){
</span><span class='line'>                if(xhr.readyState==4){    
</span><span class='line'>                    var xmldom = xhr.responseXML;//这里有点不同
</span><span class='line'>                    var std = xmldom.getElementsByTagName('student');                 
</span><span class='line'>                    var s = "";
</span><span class='line'>                    for(var i=0; i&lt;std.length; i++){
</span><span class='line'>                        var nm = std[i].getElementsByTagName('name')[0].innerHTML;
</span><span class='line'>                        var age = std[i].getElementsByTagName('age')[0].firstChild.wholeText;
</span><span class='line'>                        var addr = std[i].getElementsByTagName('addr')[0].innerHTML;                       
</span><span class='line'>                        s += "名称："+nm+"--年龄："+age+"--地址："+addr+"&lt;br /&gt;";
</span><span class='line'>                    }
</span><span class='line'>                    document.body.innerHTML += s;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            xhr.open('get','./stu.xml');
</span><span class='line'>            xhr.send(null);
</span><span class='line'>        }
</span><span class='line'>        &lt;/script&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;h2&gt;ajax+javascript实现对xml处理&lt;/h2&gt;
</span><span class='line'>        &lt;input type="button" value="处理" onclick="f1()" /&gt;
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>xml代码（stu.xml）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
</span><span class='line'>&lt;students&gt;
</span><span class='line'>  &lt;student&gt;
</span><span class='line'>      &lt;name&gt;张三&lt;/name&gt;
</span><span class='line'>      &lt;age&gt;22&lt;/age&gt;
</span><span class='line'>      &lt;addr&gt;河北&lt;/addr&gt;
</span><span class='line'>  &lt;/student&gt;
</span><span class='line'>  &lt;student&gt;
</span><span class='line'>      &lt;name&gt;苏您退&lt;/name&gt;
</span><span class='line'>      &lt;age&gt;21&lt;/age&gt;
</span><span class='line'>      &lt;addr&gt;河南&lt;/addr&gt;
</span><span class='line'>  &lt;/student&gt;
</span><span class='line'>  &lt;student&gt;
</span><span class='line'>      &lt;name&gt;李阳&lt;/name&gt;
</span><span class='line'>      &lt;age&gt;44&lt;/age&gt;
</span><span class='line'>      &lt;addr&gt;山东&lt;/addr&gt;
</span><span class='line'>  &lt;/student&gt;
</span><span class='line'>&lt;/students&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax的无刷新分页显示]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-page/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-page</id>
    <content type="html"><![CDATA[<h5>1.具体实现</h5>

<p>记录总条数</p>

<p>每页显示条数</p>

<p>总页数：向上取整(总条数/每页显示条数)</p>

<p>limit  偏移量((当前页码-1)*每页条数),长度;</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=1">http://%E7%BD%91%E5%9D%80/data.php?page=1</a>  (limit 0,7)</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=2">http://%E7%BD%91%E5%9D%80/data.php?page=2</a>  (limit 7,7)</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=3">http://%E7%BD%91%E5%9D%80/data.php?page=3</a>  (limit 14,7)</p>

<p>ajax对象.open(‘get’,地址<a href="http://%E7%BD%91%E5%9D%80/data.php?page=2">http://%E7%BD%91%E5%9D%80/data.php?page=2</a>);</p>

<p>利用ajax无刷新方式获得第2页信息</p>

<h5>效果图：</h5>

<p><img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fijiy3j20t40c7gpy.jpg" alt="photo" /></p>

<h5>2.代码</h5>

<p>分页代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>//传统分页效果实现
</span><span class='line'>//连接数据库，获得数据，做分页显示
</span><span class='line'>header("content-type:text/html;charset=utf-8");
</span><span class='line'>$link = mysqli_connect('localhost','root','123456','shop');
</span><span class='line'>//mysqli_select_db('shop', $link);
</span><span class='line'>mysqli_query($link, 'set names utf8');
</span><span class='line'>echo &lt;&lt;&lt;eof
</span><span class='line'>    &lt;style type="text/css"&gt;
</span><span class='line'>        table {width:700px; border:1px solid black; margin:auto; border-collapse:collapse;}
</span><span class='line'>        td {border:1px solid black; }
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>    &lt;table&gt;
</span><span class='line'>        &lt;tr style='font-weight:bold'&gt;&lt;td&gt;序号&lt;/td&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;价格&lt;/td&gt;&lt;td&gt;数量&lt;/td&gt;&lt;td&gt;重量&lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>eof;
</span><span class='line'>//① 引入分页类
</span><span class='line'>include "./page.class.php";
</span><span class='line'>//② 获得总条数、每页显示条数
</span><span class='line'>$sql = "select * from sw_goods";
</span><span class='line'>$qry = mysqli_query($link,$sql);
</span><span class='line'>$total = mysqli_num_rows($qry); //总条数
</span><span class='line'>$per = 7;//每页条数
</span><span class='line'>//③ 实例化分页类对象
</span><span class='line'>$page = new Page($total, $per);
</span><span class='line'>//④ 设置sql语句获得每页信息
</span><span class='line'>//$page-&gt;limit:分页类会根据当前页码参数自动把 "limit 偏移量,长度" 信息给拼装好
</span><span class='line'>$sql3 = "select * from sw_goods order by goods_id ".$page-&gt;limit;
</span><span class='line'>$qry3 = mysqli_query($link,$sql3);
</span><span class='line'>//⑤ 获得页码列表信息
</span><span class='line'>$page_list = $page -&gt; fpage(array(3,4,5,6,7,8));
</span><span class='line'>$page_num = isset($_GET['page'])?$_GET['page']:1;
</span><span class='line'>$num = ($page_num-1)*$per+1;
</span><span class='line'>while($rst3 = mysqli_fetch_assoc($qry3)){
</span><span class='line'>    printf("&lt;tr&gt;");
</span><span class='line'>    printf("&lt;td&gt;%d&lt;/td&gt;",$num);
</span><span class='line'>    printf("&lt;td&gt;%s&lt;/td&gt;",$rst3['goods_name']);
</span><span class='line'>    printf("&lt;td&gt;%s&lt;/td&gt;",$rst3['goods_price']);
</span><span class='line'>    printf("&lt;td&gt;%d&lt;/td&gt;",$rst3['goods_number']);
</span><span class='line'>    printf("&lt;td&gt;%d&lt;/td&gt;",$rst3['goods_weight']);
</span><span class='line'>    printf("&lt;/tr&gt;");
</span><span class='line'>    $num++;
</span><span class='line'>}
</span><span class='line'>printf("&lt;tr&gt;&lt;td colspan='5'&gt;%s&lt;/td&gt;&lt;/tr&gt;",$page_list);
</span><span class='line'>echo "&lt;/table&gt;";</span></code></pre></td></tr></table></div></figure>


<p>ajax代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;title&gt;新建网页&lt;/title&gt;
</span><span class='line'>        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</span><span class='line'>        &lt;meta name="description" content="" /&gt;
</span><span class='line'>        &lt;meta name="keywords" content="" /&gt;
</span><span class='line'>        &lt;script type="text/javascript"&gt;
</span><span class='line'>        //函数封装，实现ajax获取分页信息
</span><span class='line'>        function showpage(url){
</span><span class='line'>            var xhr = new XMLHttpRequest();
</span><span class='line'>            xhr.onreadystatechange = function(){
</span><span class='line'>                if(xhr.readyState==4){
</span><span class='line'>                    document.getElementById('result').innerHTML = xhr.responseText;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            xhr.open('get',url);
</span><span class='line'>            xhr.send(null);
</span><span class='line'>        }
</span><span class='line'>        window.onload = function(){
</span><span class='line'>            showpage('./data.php');
</span><span class='line'>        }
</span><span class='line'>        &lt;/script&gt;
</span><span class='line'>        &lt;style type="text/css"&gt;
</span><span class='line'>        h2,div {width:700px; margin:auto;}
</span><span class='line'>        h2 {text-align:center;}
</span><span class='line'>        &lt;/style&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;h2&gt;ajax无刷新分页&lt;/h2&gt;
</span><span class='line'>        &lt;div id="result"&gt;&lt;/div&gt;
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>用于分页包装好的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>  class Page {
</span><span class='line'>      private $total; //数据表中总记录数
</span><span class='line'>      private $listRows; //每页显示行数
</span><span class='line'>      private $limit;
</span><span class='line'>      private $uri;
</span><span class='line'>      private $pageNum; //页数
</span><span class='line'>      private $config=array('header'=&gt;"个记录", "prev"=&gt;"上一页", "next"=&gt;"下一页", "first"=&gt;"首 页", "last"=&gt;"尾 页");
</span><span class='line'>      private $listNum=8;
</span><span class='line'>      /*
</span><span class='line'>       * $total 
</span><span class='line'>       * $listRows
</span><span class='line'>       */
</span><span class='line'>      public function __construct($total, $listRows=10, $pa=""){
</span><span class='line'>          $this-&gt;total=$total;
</span><span class='line'>          $this-&gt;listRows=$listRows;
</span><span class='line'>          $this-&gt;uri=$this-&gt;getUri($pa);
</span><span class='line'>          $this-&gt;page=!empty($_GET["page"]) ? $_GET["page"] : 1;
</span><span class='line'>          $this-&gt;pageNum=ceil($this-&gt;total/$this-&gt;listRows);
</span><span class='line'>          $this-&gt;limit=$this-&gt;setLimit();
</span><span class='line'>      }
</span><span class='line'>      private function setLimit(){
</span><span class='line'>          return "Limit ".($this-&gt;page-1)*$this-&gt;listRows.", {$this-&gt;listRows}";
</span><span class='line'>      }
</span><span class='line'>      private function getUri($pa){
</span><span class='line'>          $url=$_SERVER["REQUEST_URI"].(strpos($_SERVER["REQUEST_URI"], '?')?'':"?").$pa;
</span><span class='line'>          $parse=parse_url($url);
</span><span class='line'>          if(isset($parse["query"])){
</span><span class='line'>              parse_str($parse['query'],$params);
</span><span class='line'>              unset($params["page"]);
</span><span class='line'>              $url=$parse['path'].'?'.http_build_query($params);              
</span><span class='line'>          }
</span><span class='line'>          return $url;
</span><span class='line'>      }
</span><span class='line'>      function __get($args){
</span><span class='line'>          if($args=="limit")
</span><span class='line'>              return $this-&gt;limit;
</span><span class='line'>          else
</span><span class='line'>              return null;
</span><span class='line'>      }
</span><span class='line'>      private function start(){
</span><span class='line'>          if($this-&gt;total==0)
</span><span class='line'>              return 0;
</span><span class='line'>          else
</span><span class='line'>              return ($this-&gt;page-1)*$this-&gt;listRows+1;
</span><span class='line'>      }
</span><span class='line'>      private function end(){
</span><span class='line'>          return min($this-&gt;page*$this-&gt;listRows,$this-&gt;total);
</span><span class='line'>      }
</span><span class='line'>      private function first(){
</span><span class='line'>            $html = "";
</span><span class='line'>          if($this-&gt;page==1)
</span><span class='line'>              $html.='';
</span><span class='line'>          else
</span><span class='line'>              $html.="&nbsp;&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page=1\")'&gt;{$this-&gt;config["first"]}&lt;/a&gt;&nbsp;&nbsp;";
</span><span class='line'>          return $html;
</span><span class='line'>      }
</span><span class='line'>      private function prev(){
</span><span class='line'>            $html = "";
</span><span class='line'>          if($this-&gt;page==1)
</span><span class='line'>              $html.='';
</span><span class='line'>          else
</span><span class='line'>              $html.="&nbsp;&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page=".($this-&gt;page-1)."\")'&gt;{$this-&gt;config["prev"]}&lt;/a&gt;&nbsp;&nbsp;";
</span><span class='line'>          return $html;
</span><span class='line'>      }
</span><span class='line'>      private function pageList(){
</span><span class='line'>          $linkPage="";       
</span><span class='line'>          $inum=floor($this-&gt;listNum/2);   
</span><span class='line'>          for($i=$inum; $i&gt;=1; $i--){
</span><span class='line'>              $page=$this-&gt;page-$i;
</span><span class='line'>              if($page&lt;1)
</span><span class='line'>                  continue;
</span><span class='line'>              //$linkPage.="&nbsp;&lt;a href='{$this-&gt;uri}&page={$page}'&gt;{$page}&lt;/a&gt;&nbsp;";
</span><span class='line'>              $linkPage.="&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page={$page}\")'&gt;{$page}&lt;/a&gt;&nbsp;";
</span><span class='line'>          }   
</span><span class='line'>          $linkPage.="&nbsp;{$this-&gt;page}&nbsp;";
</span><span class='line'>          for($i=1; $i&lt;=$inum; $i++){
</span><span class='line'>              $page=$this-&gt;page+$i;
</span><span class='line'>              if($page&lt;=$this-&gt;pageNum){
</span><span class='line'>                  //$linkPage.="&nbsp;&lt;a href='{$this-&gt;uri}&page={$page}'&gt;{$page}&lt;/a&gt;&nbsp;";
</span><span class='line'>                    //把a超链接变为是showpage函数(ajax执行)调用
</span><span class='line'>                  $linkPage.="&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page={$page}\")'&gt;{$page}&lt;/a&gt;&nbsp;";
</span><span class='line'>              }else{
</span><span class='line'>                  break;
</span><span class='line'>                }
</span><span class='line'>          }
</span><span class='line'>          return $linkPage;
</span><span class='line'>      }
</span><span class='line'>      private function next(){
</span><span class='line'>            $html = "";
</span><span class='line'>          if($this-&gt;page==$this-&gt;pageNum)
</span><span class='line'>              $html.='';
</span><span class='line'>          else
</span><span class='line'>              $html.="&nbsp;&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page=".($this-&gt;page+1)."\")'&gt;{$this-&gt;config["next"]}&lt;/a&gt;&nbsp;&nbsp;";
</span><span class='line'>          return $html;
</span><span class='line'>      }
</span><span class='line'>      private function last(){
</span><span class='line'>            $html = "";
</span><span class='line'>          if($this-&gt;page==$this-&gt;pageNum)
</span><span class='line'>              $html.='';
</span><span class='line'>          else
</span><span class='line'>              $html.="&nbsp;&nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&page=".($this-&gt;pageNum)."\")'&gt;{$this-&gt;config["last"]}&lt;/a&gt;&nbsp;&nbsp;";
</span><span class='line'>          return $html;
</span><span class='line'>      }
</span><span class='line'>      private function goPage(){
</span><span class='line'>          return '&nbsp;&nbsp;&lt;input type="text" onkeydown="javascript:if(event.keyCode==13){var page=(this.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.value;showpage(\''.$this-&gt;uri.'&page=\'+page+\'\')}" value="'.$this-&gt;page.'" style="width:25px"&gt;&lt;input type="button" value="GO" onclick="javascript:var page=(this.previousSibling.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.previousSibling.value;showpage(\''.$this-&gt;uri.'&page=\'+page+\'\')"&gt;&nbsp;&nbsp;';
</span><span class='line'>          //return '&nbsp;&nbsp;&lt;input type="text" onkeydown="javascript:if(event.keyCode==13){var page=(this.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.value;location=\''.$this-&gt;uri.'&page=\'+page+\'\'}" value="'.$this-&gt;page.'" style="width:25px"&gt;&lt;input type="button" value="GO" onclick="javascript:var page=(this.previousSibling.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.previousSibling.value;location=\''.$this-&gt;uri.'&page=\'+page+\'\'"&gt;&nbsp;&nbsp;';
</span><span class='line'>      }
</span><span class='line'>      function fpage($display=array(0,1,2,3,4,5,6,7,8)){
</span><span class='line'>          $html[0]="&nbsp;&nbsp;共有&lt;b&gt;{$this-&gt;total}&lt;/b&gt;{$this-&gt;config["header"]}&nbsp;&nbsp;";
</span><span class='line'>          $html[1]="&nbsp;&nbsp;每页显示&lt;b&gt;".($this-&gt;end()-$this-&gt;start()+1)."&lt;/b&gt;条，本页&lt;b&gt;{$this-&gt;start()}-{$this-&gt;end()}&lt;/b&gt;条&nbsp;&nbsp;";
</span><span class='line'>          $html[2]="&nbsp;&nbsp;&lt;b&gt;{$this-&gt;page}/{$this-&gt;pageNum}&lt;/b&gt;页&nbsp;&nbsp;";      
</span><span class='line'>          $html[3]=$this-&gt;first();
</span><span class='line'>          $html[4]=$this-&gt;prev();
</span><span class='line'>          $html[5]=$this-&gt;pageList();
</span><span class='line'>          $html[6]=$this-&gt;next();
</span><span class='line'>          $html[7]=$this-&gt;last();
</span><span class='line'>          $html[8]=$this-&gt;goPage();
</span><span class='line'>          $fpage='';
</span><span class='line'>          foreach($display as $index){
</span><span class='line'>              $fpage.=$html[$index];
</span><span class='line'>          }
</span><span class='line'>          return $fpage;
</span><span class='line'>      }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax的get和post请求方式示例]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-get-post/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-get-post</id>
    <content type="html"><![CDATA[<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;title&gt;新建网页&lt;/title&gt;
</span><span class='line'>        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</span><span class='line'>        &lt;meta name="description" content="" /&gt;
</span><span class='line'>        &lt;meta name="keywords" content="" /&gt;
</span><span class='line'>        &lt;script type="text/javascript"&gt;
</span><span class='line'>        function checkname(){
</span><span class='line'>            //ajax负责抓取用户名信息，传递给服务器进行校验
</span><span class='line'>            //获得用户名信息
</span><span class='line'>            var nm = document.getElementById('username').value;
</span><span class='line'>            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
</span><span class='line'>            var xhr = new XMLHttpRequest();
</span><span class='line'>            xhr.onreadystatechange = function(){
</span><span class='line'>                if(xhr.readyState==4){
</span><span class='line'>                    alert(xhr.responseText);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            xhr.open('get','./04.php?name='+nm);
</span><span class='line'>            xhr.send(null);
</span><span class='line'>        }
</span><span class='line'>        &lt;/script&gt;
</span><span class='line'>        &lt;style type="text/css"&gt;
</span><span class='line'>        &lt;/style&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;h2&gt;get方式请求&lt;/h2&gt;
</span><span class='line'>        &lt;form method="post" action=""&gt;
</span><span class='line'>            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
</span><span class='line'>            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
</span><span class='line'>            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
</span><span class='line'>        &lt;/form&gt;
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>js代码(post方式)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function checkname() 
</span><span class='line'>                  {
</span><span class='line'>                        //ajax负责抓取用户名信息，传递给服务器进行校验
</span><span class='line'>                        //获得用户名信息
</span><span class='line'>                        var nm = document.getElementById('username').value;
</span><span class='line'>                        nm = encodeURIComponent(nm);
</span><span class='line'>                        var xhr = new XMLHttpRequest();
</span><span class='line'>                        xhr.onreadystatechange = function () {
</span><span class='line'>                            if (xhr.readyState == 4) {
</span><span class='line'>                                alert(xhr.responseText);
</span><span class='line'>                            }
</span><span class='line'>                        }
</span><span class='line'>                        xhr.open('post', './06.php');
</span><span class='line'>                        //post模仿form表单把数据传递给服务器端
</span><span class='line'>                        //form表单把数据组织为“xml格式”传递给服务器端
</span><span class='line'>                        //把传递的数据组织为请求字符串
</span><span class='line'>                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
</span><span class='line'>                        //(要在open()方法执行之后设置)
</span><span class='line'>                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
</span><span class='line'>                        var info = "name=" + nm;
</span><span class='line'>                        xhr.send(info);
</span><span class='line'>                   }</span></code></pre></td></tr></table></div></figure>


<p>06.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header('Content-Type:text/html;charset=utf8');
</span><span class='line'>$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
</span><span class='line'>$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
</span><span class='line'>$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
</span><span class='line'>if($_POST['name']==$sq['Username']){
</span><span class='line'>    echo '正确';
</span><span class='line'>}  else {
</span><span class='line'>    echo '不正确';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<hr />

<p>layout: post
title: &ldquo;ajax的无刷新分页显示&rdquo;
date: 2016-07-27 17:19:26 +0800
comments: true</p>

<h2>categories: [js,php,ajax]</h2>

<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;title&gt;新建网页&lt;/title&gt;
</span><span class='line'>        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</span><span class='line'>        &lt;meta name="description" content="" /&gt;
</span><span class='line'>        &lt;meta name="keywords" content="" /&gt;
</span><span class='line'>        &lt;script type="text/javascript"&gt;
</span><span class='line'>        function checkname(){
</span><span class='line'>            //ajax负责抓取用户名信息，传递给服务器进行校验
</span><span class='line'>            //获得用户名信息
</span><span class='line'>            var nm = document.getElementById('username').value;
</span><span class='line'>            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
</span><span class='line'>            var xhr = new XMLHttpRequest();
</span><span class='line'>            xhr.onreadystatechange = function(){
</span><span class='line'>                if(xhr.readyState==4){
</span><span class='line'>                    alert(xhr.responseText);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            xhr.open('get','./04.php?name='+nm);
</span><span class='line'>            xhr.send(null);
</span><span class='line'>        }
</span><span class='line'>        &lt;/script&gt;
</span><span class='line'>        &lt;style type="text/css"&gt;
</span><span class='line'>        &lt;/style&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;h2&gt;get方式请求&lt;/h2&gt;
</span><span class='line'>        &lt;form method="post" action=""&gt;
</span><span class='line'>            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
</span><span class='line'>            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
</span><span class='line'>            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
</span><span class='line'>        &lt;/form&gt;
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>js代码(post方式)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function checkname() 
</span><span class='line'>                  {
</span><span class='line'>                        //ajax负责抓取用户名信息，传递给服务器进行校验
</span><span class='line'>                        //获得用户名信息
</span><span class='line'>                        var nm = document.getElementById('username').value;
</span><span class='line'>                        nm = encodeURIComponent(nm);
</span><span class='line'>                        var xhr = new XMLHttpRequest();
</span><span class='line'>                        xhr.onreadystatechange = function () {
</span><span class='line'>                            if (xhr.readyState == 4) {
</span><span class='line'>                                alert(xhr.responseText);
</span><span class='line'>                            }
</span><span class='line'>                        }
</span><span class='line'>                        xhr.open('post', './06.php');
</span><span class='line'>                        //post模仿form表单把数据传递给服务器端
</span><span class='line'>                        //form表单把数据组织为“xml格式”传递给服务器端
</span><span class='line'>                        //把传递的数据组织为请求字符串
</span><span class='line'>                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
</span><span class='line'>                        //(要在open()方法执行之后设置)
</span><span class='line'>                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
</span><span class='line'>                        var info = "name=" + nm;
</span><span class='line'>                        xhr.send(info);
</span><span class='line'>                   }</span></code></pre></td></tr></table></div></figure>


<p>06.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>header('Content-Type:text/html;charset=utf8');
</span><span class='line'>$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
</span><span class='line'>$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
</span><span class='line'>$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
</span><span class='line'>if($_POST['name']==$sq['Username']){
</span><span class='line'>    echo '正确';
</span><span class='line'>}  else {
</span><span class='line'>    echo '不正确';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[49点php编程重点知识]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/php/"/>
    <updated>2016-07-27T10:46:19+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/php</id>
    <content type="html"><![CDATA[<h5>php是门复杂而繁琐的语言，想要学好它，那必须得下点功夫，春哥技术博客总结一些提高PHP编程效率的要点，供大家学习参考。</h5>

<h5>前奏：用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”（译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号）</h5>

<p>1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。</p>

<p>2、$row[’id’] 的速度是$row[id]的7倍。</p>

<p>3、echo 比 print 快，并且使用echo的多重参数（译注：指用逗号而不是句点）代替字符串连接，比如echo $str1,$str2。</p>

<p>4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。</p>

<p>5、注销那些不用的变量尤其是大数组，以便释放内存。</p>

<p>6、尽量避免使用<strong>get，</strong>set，__autoload。</p>

<p>7、require_once()代价昂贵。</p>

<p>8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。</p>

<p>9、如果你想知道脚本开始执行（译注：即服务器端收到客户端请求）的时刻，使用$_SERVER[‘REQUEST_TIME’]要好于time()。</p>

<p>10、函数代替正则表达式完成相同功能。</p>

<p>11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。</p>

<p>12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替</p>

<p>换的参数。</p>

<p>13、使用选择分支语句（译注：即switch case）好于使用多个if，else if语句。</p>

<p>14、用@屏蔽错误消息的做法非常低效，极其低效。</p>

<p>15、打开apache的mod_deflate模块，可以提高网页的浏览速度。</p>

<p>16、数据库连接当使用完毕时应关掉，不要用长连接。</p>

<p>17、错误消息代价昂贵。</p>

<p>18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。</p>

<p>19、递增一个全局变量要比递增一个局部变量慢2倍。</p>

<p>20、递增一个对象属性（如：$this->prop++）要比递增一个局部变量慢3倍。</p>

<p>21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。</p>

<p>22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度（其程度相当于递增一个局部变量）。PHP大概会检查看是否存在全局变量。</p>

<p>23、方法调用看来与类中定义的方法的数量无关，因为我（在测试方法之前和之后都）添加了10个方法，但性能上没有变化。</p>

<p>24、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p>

<p>25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。</p>

<p>26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。</p>

<p>27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。</p>

<p>28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做</p>

<p>重新编译。</p>

<p>29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构（C的内置数据结构，用于存储PHP变</p>

<p>量）中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化（译注：指函数名小写化，PHP不区分函数名大小写）、哈希查找，会跟随</p>

<p>被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。</p>

<p>（举例如下）</p>

<p>if (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }</p>

<p>（与下面的技巧做比较）</p>

<p>if (!isset($foo{5})) { echo “Foo is too short”$$ }</p>

<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多</p>

<p>开销。</p>

<p>30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需</p>

<p>要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样</p>

<p>。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商（ISPs）和服务器。</p>

<p>31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。</p>

<p>32、并非要用类实现所有的数据结构，数组也很有用。</p>

<p>33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码？</p>

<p>34、当你需要时，你总能把代码分解成方法。</p>

<p>35、尽量采用大量的PHP内置函数。</p>

<p>36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。</p>

<p>37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。</p>

<p>38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。</p>

<p>39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多！但是要注意file_get_contents在打开一个URL文件时候的</p>

<p>PHP版本问题；</p>

<p>40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的；</p>

<p>41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过)；</p>

<p>42、尽可能的使用PHP内部函数（但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊！）；</p>

<p>43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧？)；</p>

<p>44、多维数组尽量不要循环嵌套赋值；</p>

<p>45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式；</p>

<p>46、foreach效率更高，尽量用foreach代替while和for循环；</p>

<p>47、用单引号替代双引号引用字符串；</p>

<p>48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”；</p>

<p>49、对global变量，应该用完就unset()掉；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP mysql函数及其Mysqli函数代替用法]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/mysqli/"/>
    <updated>2016-07-27T10:27:18+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/mysqli</id>
    <content type="html"><![CDATA[<h4>由于MySQL扩展从php 5.5开始弃用，所以以后不推荐大家再用MySQL扩展，请用MySQLi或PDO代替，以下是MySQL对应的MySQLi函数（绿色字体）供大家参考。（注：PHP手册上的有误，这里是最准的）</h4>

<h4>MySQL>>(从PHP 5.5开始弃用)</h4>

<h4>mysql_affected_rows — （mysqli_affected_rows()）取得前一次 MySQL 操作所影响的记录行数</h4>

<h4>mysql_client_encoding — （mysqli_character_set_name()）返回字符集的名称(返回当前连接的默认字符集名称。)</h4>

<h4>mysql_close — （mysqli_close()）关闭 MySQL 连接</h4>

<h4>mysql_connect — （mysqli_connect()）打开一个到 MySQL 服务器的连接</h4>

<h4>mysql_create_db — （mysqli_query() then CREATE DATABASE）新建一个 MySQL 数据库(废弃)(用 mysql_query() 来提交一条 SQL 的 CREATE DATABASE 语句来代替)</h4>

<h4>mysql_data_seek — （mysqli_data_seek()）移动内部结果的指针</h4>

<h4>mysql_db_name — （Query: SELECT DATABASE()非全等）取得 mysql_list_dbs() 调用所返回的数据库名</h4>

<h4>mysql_db_query — （mysqli_select_db() then the mysqli_query()）选择一个数据库并在它上面执行一个查询 从 PHP 5.3.0 起弃用 用 mysql_select_db() 和 mysql_query() 代替</h4>

<h4>mysql_drop_db — （Execute a DROP DATABASE query）丢弃（删除）一个 MySQL 数据库(废弃)(用 mysql_query() 提交一条 SQL DROP DATABASE 语句来替代)</h4>

<h4>mysql_errno — （mysqli_errno()）返回上一个 MySQL 操作中的错误信息的数字编码</h4>

<h4>mysql_error — （mysqli_error()）返回上一个 MySQL 操作产生的文本错误信息</h4>

<h4>mysql_escape_string — （mysqli_escape_string()）转义一个字符串用于mysql_query从PHP 5.3.0起弃用用 mysql_real_escape_string() 代替</h4>

<h4>mysql_fetch_array — （mysqli_fetch_array()）从结果集中取得一行作为关联数组，或数字数组，或二者兼有</h4>

<h4>mysql_fetch_assoc — （mysqli_fetch_assoc()）从结果集中取得一行作为关联数组</h4>

<h4>mysql_fetch_field — （mysqli_fetch_field()）从结果集中取得列信息并作为对象返回</h4>

<h4>mysql_fetch_lengths — （mysqli_fetch_lengths()）取得结果集中每个输出的长度</h4>

<h4>mysql_fetch_object — （mysqli_fetch_object()）从结果集中取得一行作为对象</h4>

<h4>mysql_fetch_row — （mysqli_fetch_row()）从结果集中取得一行作为枚举数组</h4>

<h4>mysql_field_flags — （mysqli_fetch_fields() [flags]?）从结果中取得和指定字段关联的标志</h4>

<h4>mysql_field_len — （mysqli_fetch_field_direct() [length]）返回指定字段的长度</h4>

<h4>mysql_field_name — （mysqli_fetch_field_direct() [name] or [orgname]）取得结果中指定字段的字段名</h4>

<h4>mysql_field_seek — （mysqli_field_seek()）将结果集中的指针设定为指定的字段偏移量</h4>

<h4>mysql_field_table — （mysqli_fetch_field_direct() [table] or [orgtable]）取得指定字段所在的表名</h4>

<h4>mysql_field_type — （mysqli_fetch_field_direct() [type]）取得结果集中指定字段的类型</h4>

<h4>mysql_free_result — （mysqli_free_result()）释放结果内存</h4>

<h4>mysql_get_client_info — （mysqli_get_client_info()）取得 MySQL 客户端信息</h4>

<h4>mysql_get_host_info — （mysqli_get_host_info()）取得 MySQL 主机信息</h4>

<h4>mysql_get_proto_info — （mysqli_get_proto_info()）取得 MySQL 协议信息</h4>

<h4>mysql_get_server_info — （mysqli_get_server_info()）取得 MySQL 服务器信息</h4>

<h4>mysql_info — （mysqli_info()）取得最近一条查询的信息</h4>

<h4>mysql_insert_id — （mysqli_insert_id()）取得上一步 INSERT 操作产生的 ID（得到在最后一次查询生成的id）</h4>

<h4>mysql_list_dbs — （SQL Query: SHOW DATABASES）列出 MySQL 服务器中所有可用的数据库（从php5.4.0弃用）(用SQL 查询: SHOW DATABASES代替)</h4>

<h4>mysql_list_fields — （SQL Query: SHOW COLUMNS FROM sometable）列出 MySQL 表字段（取得给定表名的信息）（弃用）(已过时。最好用 mysql_query() 来发出一条 SHOW COLUMNS FROM table [LIKE &lsquo;name&rsquo;] 的 SQL 语句来代替。)</h4>

<h4>mysql_list_processes — （mysqli_thread_id()不全等）列出 MySQL 进程</h4>

<h4>mysql_list_tables —（SQL Query: SHOW TABLES FROM db_name） 列出 MySQL 数据库中的表（弃用）(已弃用。 使用 mysql_query() 发出一个SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;]语句代替. )</h4>

<h4>mysql_num_fields — （mysqli_field_count()）取得结果集中字段的数目</h4>

<h4>mysql_num_rows — （mysqli_num_rows(),mysqli_stmt_num_rows()）取得结果集中行的数目</h4>

<h4>mysql_pconnect — （mysqli_connect() with p: host prefix）打开一个到 MySQL 服务器的持久连接</h4>

<h4>mysql_ping — （mysqli_ping()）Ping 一个服务器连接，如果没有连接则重新连接</h4>

<h4>mysql_query — （mysqli_query()）发送一条 MySQL 查询</h4>

<h4>mysql_real_escape_string — （mysqli_real_escape_string()）转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</h4>

<h4>mysql_result — （mysqli_data_seek() 联合 mysqli_field_seek() and mysqli_fetch_field()）取得结果数据</h4>

<h4>mysql_select_db — （mysqli_select_db()）选择 MySQL 数据库</h4>

<h4>mysql_set_charset — （mysqli_set_charset()）设置客户端字符集</h4>

<h4>mysql_stat — （mysqli_stat()）取得当前系统状态</h4>

<h4>mysql_tablename — （SQL Query: SHOW TABLES）取得表名（取得字段的表名）（弃用）(已弃用。 使用 mysql_query() 发出一个 SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;] 语句代替. )</h4>

<h4>mysql_thread_id — （mysqli_thread_id()）返回当前线程的 ID</h4>

<h4>mysql_unbuffered_query — （mysqli_query(“SQL语句”, MYSQLI_USE_RESULT); ）向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行</h4>
]]></content>
  </entry>
  
</feed>
