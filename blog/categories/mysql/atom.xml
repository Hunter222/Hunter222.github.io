<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-08-31T20:22:51+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简单的mysql基本操作]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Mysql-base/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Mysql-base</id>
    <content type="html"><![CDATA[<h5>简单的mysql基本操作</h5>

<p>mysql 查看默认引擎
<code>
show variables like 'storage_engine';
</code>
查看表详细结构语句
<code>
SHOW CREARTE TABLE 表名 \G
</code>
修改表名
<code>
ALTER TABLE 旧表名 RENAME (TO) 新表名
</code>
修改字段的数据类型
```
ALTER TABLE 表名 MODIFY 属性名 数据类型;</p>

<p>eg：ALTER TABLE user MODIFY name varchar(30);
<code>
修改字段名(属性名)
</code>
ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型;
<code>
增加字段（属性）
</code>
ALTER TABLE  表名 ADD 属性名1 数据类型【完整性约束条件】[FIRST] AFTER 属性名2
<code>
删除字段（属性）
</code>
ALTER TABLE 表名 DROP 属性名;
<code>
修改字段的排列位置
</code>
ALTER TABLE 表名 MODIFY 属性名1 数据类型 [FIRST] AFTER 属性名2;
<code>
更改表的存储引擎
</code>
ALTER TABLE 表名 engine=存储引擎名;
<code>
删除表的外键约束
</code>
ALTER TABLE 表名 DROP FOREIGN KEY 外键别名;
```
索引的优点：可以提高检索数据的速度</p>

<p>缺点：创建和维护索引需要耗费时间，占用物理空间，</p>

<p>在已经存在的表创建索引
<code>
CREARTE [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 ON 表名(属性名[(长度)] [ASC|DESC]);
</code>
用ALTER TABLE 来创建索引
<code>
ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名(属性名[(长度)] [ASC|DESC]);
</code>
删除索引
<code>
DROP INDEX 索引名 ON 表名
</code>
创建视图的语法
```
CREARTE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句</p>

<p>[WITH [CASCADED | LOCAL] CHECK OPTION];
<code>
查看视图
</code>
DESC 视图名</p>

<p>SHOW TABLES STATUS 查看视图基本信息</p>

<p>SHOW TABLES STATUS LIKE ‘视图名’</p>

<p>SHOW CREARTE VIEW 查看视图详细信息</p>

<p>SHOW CREARTE VIEW  视图;
<code>
修改视图
</code>
CREARTE OR REPLACE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句</p>

<p>[WITH [CASCADED | LOCAL] CHECK OPTION];</p>

<p>ALTER [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句</p>

<p>[WITH [CASCADED | LOCAL] CHECK OPTION];
<code>
更新视图
</code>
UPDATE 视图 SET 属性名；
<code>
删除视图
</code>
DROP VIEW [IF EXISTS] 视图名列表 [RESTRICT|CASCADE]
<code>
创建只有一种执行语句的触发器的形式如下：
</code>
CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名</p>

<p>FOR EACH ROW 执行语句
<code>
创建有多个执行语句的触发器的形式：
</code>
CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名</p>

<p>FOR EACH ROW</p>

<p>BEGINE</p>

<p>执行语句列表</p>

<p>END
<code>
查看触发器
</code>
SHOW TRIGGER 触发器名
<code>
删除触发器
</code>
DROP TRIGGER 触发器名
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP mysql函数及其Mysqli函数代替用法]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/mysqli/"/>
    <updated>2016-07-27T10:27:18+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/mysqli</id>
    <content type="html"><![CDATA[<h4>由于MySQL扩展从php 5.5开始弃用，所以以后不推荐大家再用MySQL扩展，请用MySQLi或PDO代替，以下是MySQL对应的MySQLi函数（绿色字体）供大家参考。（注：PHP手册上的有误，这里是最准的）</h4>

<h4>MySQL>>(从PHP 5.5开始弃用)</h4>

<h4>mysql_affected_rows — （mysqli_affected_rows()）取得前一次 MySQL 操作所影响的记录行数</h4>

<h4>mysql_client_encoding — （mysqli_character_set_name()）返回字符集的名称(返回当前连接的默认字符集名称。)</h4>

<h4>mysql_close — （mysqli_close()）关闭 MySQL 连接</h4>

<h4>mysql_connect — （mysqli_connect()）打开一个到 MySQL 服务器的连接</h4>

<h4>mysql_create_db — （mysqli_query() then CREATE DATABASE）新建一个 MySQL 数据库(废弃)(用 mysql_query() 来提交一条 SQL 的 CREATE DATABASE 语句来代替)</h4>

<h4>mysql_data_seek — （mysqli_data_seek()）移动内部结果的指针</h4>

<h4>mysql_db_name — （Query: SELECT DATABASE()非全等）取得 mysql_list_dbs() 调用所返回的数据库名</h4>

<h4>mysql_db_query — （mysqli_select_db() then the mysqli_query()）选择一个数据库并在它上面执行一个查询 从 PHP 5.3.0 起弃用 用 mysql_select_db() 和 mysql_query() 代替</h4>

<h4>mysql_drop_db — （Execute a DROP DATABASE query）丢弃（删除）一个 MySQL 数据库(废弃)(用 mysql_query() 提交一条 SQL DROP DATABASE 语句来替代)</h4>

<h4>mysql_errno — （mysqli_errno()）返回上一个 MySQL 操作中的错误信息的数字编码</h4>

<h4>mysql_error — （mysqli_error()）返回上一个 MySQL 操作产生的文本错误信息</h4>

<h4>mysql_escape_string — （mysqli_escape_string()）转义一个字符串用于mysql_query从PHP 5.3.0起弃用用 mysql_real_escape_string() 代替</h4>

<h4>mysql_fetch_array — （mysqli_fetch_array()）从结果集中取得一行作为关联数组，或数字数组，或二者兼有</h4>

<h4>mysql_fetch_assoc — （mysqli_fetch_assoc()）从结果集中取得一行作为关联数组</h4>

<h4>mysql_fetch_field — （mysqli_fetch_field()）从结果集中取得列信息并作为对象返回</h4>

<h4>mysql_fetch_lengths — （mysqli_fetch_lengths()）取得结果集中每个输出的长度</h4>

<h4>mysql_fetch_object — （mysqli_fetch_object()）从结果集中取得一行作为对象</h4>

<h4>mysql_fetch_row — （mysqli_fetch_row()）从结果集中取得一行作为枚举数组</h4>

<h4>mysql_field_flags — （mysqli_fetch_fields() [flags]?）从结果中取得和指定字段关联的标志</h4>

<h4>mysql_field_len — （mysqli_fetch_field_direct() [length]）返回指定字段的长度</h4>

<h4>mysql_field_name — （mysqli_fetch_field_direct() [name] or [orgname]）取得结果中指定字段的字段名</h4>

<h4>mysql_field_seek — （mysqli_field_seek()）将结果集中的指针设定为指定的字段偏移量</h4>

<h4>mysql_field_table — （mysqli_fetch_field_direct() [table] or [orgtable]）取得指定字段所在的表名</h4>

<h4>mysql_field_type — （mysqli_fetch_field_direct() [type]）取得结果集中指定字段的类型</h4>

<h4>mysql_free_result — （mysqli_free_result()）释放结果内存</h4>

<h4>mysql_get_client_info — （mysqli_get_client_info()）取得 MySQL 客户端信息</h4>

<h4>mysql_get_host_info — （mysqli_get_host_info()）取得 MySQL 主机信息</h4>

<h4>mysql_get_proto_info — （mysqli_get_proto_info()）取得 MySQL 协议信息</h4>

<h4>mysql_get_server_info — （mysqli_get_server_info()）取得 MySQL 服务器信息</h4>

<h4>mysql_info — （mysqli_info()）取得最近一条查询的信息</h4>

<h4>mysql_insert_id — （mysqli_insert_id()）取得上一步 INSERT 操作产生的 ID（得到在最后一次查询生成的id）</h4>

<h4>mysql_list_dbs — （SQL Query: SHOW DATABASES）列出 MySQL 服务器中所有可用的数据库（从php5.4.0弃用）(用SQL 查询: SHOW DATABASES代替)</h4>

<h4>mysql_list_fields — （SQL Query: SHOW COLUMNS FROM sometable）列出 MySQL 表字段（取得给定表名的信息）（弃用）(已过时。最好用 mysql_query() 来发出一条 SHOW COLUMNS FROM table [LIKE &lsquo;name&rsquo;] 的 SQL 语句来代替。)</h4>

<h4>mysql_list_processes — （mysqli_thread_id()不全等）列出 MySQL 进程</h4>

<h4>mysql_list_tables —（SQL Query: SHOW TABLES FROM db_name） 列出 MySQL 数据库中的表（弃用）(已弃用。 使用 mysql_query() 发出一个SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;]语句代替. )</h4>

<h4>mysql_num_fields — （mysqli_field_count()）取得结果集中字段的数目</h4>

<h4>mysql_num_rows — （mysqli_num_rows(),mysqli_stmt_num_rows()）取得结果集中行的数目</h4>

<h4>mysql_pconnect — （mysqli_connect() with p: host prefix）打开一个到 MySQL 服务器的持久连接</h4>

<h4>mysql_ping — （mysqli_ping()）Ping 一个服务器连接，如果没有连接则重新连接</h4>

<h4>mysql_query — （mysqli_query()）发送一条 MySQL 查询</h4>

<h4>mysql_real_escape_string — （mysqli_real_escape_string()）转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</h4>

<h4>mysql_result — （mysqli_data_seek() 联合 mysqli_field_seek() and mysqli_fetch_field()）取得结果数据</h4>

<h4>mysql_select_db — （mysqli_select_db()）选择 MySQL 数据库</h4>

<h4>mysql_set_charset — （mysqli_set_charset()）设置客户端字符集</h4>

<h4>mysql_stat — （mysqli_stat()）取得当前系统状态</h4>

<h4>mysql_tablename — （SQL Query: SHOW TABLES）取得表名（取得字段的表名）（弃用）(已弃用。 使用 mysql_query() 发出一个 SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;] 语句代替. )</h4>

<h4>mysql_thread_id — （mysqli_thread_id()）返回当前线程的 ID</h4>

<h4>mysql_unbuffered_query — （mysqli_query(“SQL语句”, MYSQLI_USE_RESULT); ）向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行</h4>
]]></content>
  </entry>
  
</feed>
