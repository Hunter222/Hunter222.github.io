<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-09-01T22:20:14+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[chenjingxiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Php常用的防黑客攻击的几种情况]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-sql-xss/"/>
    <updated>2016-09-01T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-sql-xss</id>
    <content type="html"><![CDATA[<h6>1.防止暴力破解</h6>

<p>Get方式恶意攻击，（dos），通常硬件的方式来防止，防火墙。
Post方式暴力破解，从程序的角度来防止，最通用的方法就是增加验证码(验证码使用文章：<a href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma">http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</a>)。</p>

<p>注意：验证码常见错误：</p>

<ol>
<li><p>字体文件的位置不对</p></li>
<li><p>由于在生成验证码的时候，使用了header()函数，它有一个特点，它之前不能有任何的输出，包括空格。解决办法，从index.php开始查找，凡是被包含进来的文件都需要查找</p></li>
<li><p>还需要注意一个的，就是你的文件编码要确保是 utf-8的，而不是带BOM头的utf-8。</p></li>
</ol>


<h6>2.防sql注入</h6>

<p>黑客通过在表单中填入特殊的字符或者是url中增加特殊的字符，然后想数据库发起请求，拼凑出sql语句，达到攻击的目的。</p>

<p>有两种形式：</p>

<p>Post表单提交；防止方式：1.MD5加密密码，2.使用addslashes函数给特殊字符单引号添加反斜杠</p>

<p>Get，url传参；防止方式：url传回的<em>GET[&lsquo;&rsquo;]加上1，如：$pages = $</em>GET[&lsquo;id&rsquo;]+1</p>

<p>凡是是用户提交的信息，都是不能相信的，都需要进行处理，其中之一就是转义。
也就意味着在所有的 收集表单信息的地方，都要调用 addslashes函数。当要转义数组时需要批量处理，代码如下：</p>

<pre><code>//批量转义
function  deepslashes($data){
    //判断$data形式
    if (empty($data)){
        return $data;
    }
    //遍历数组
    return is_array($data) ? array_map('deepslashes', $data) : addslashes($data);
}
</code></pre>

<h6>3.xss攻击</h6>

<p>Xss: cross site script 跨站脚本攻击</p>

<p>Css 被占用，表示样式表</p>

<p>恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。</p>

<p>防止方法：使用Htmlspecialchars函数 和  htmlentites函数把特殊字符转义，批量处理的示例代码如下：</p>

<pre><code>//批量实体转义
   function deepspecialchars($data){
       if (empty($data)){
           return $data;
       }
       return is_array($data) ? array_map('deepspecialchars', $data) : htmlspecialchars($data);
   }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的mysql基本操作]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Mysql-base/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Mysql-base</id>
    <content type="html"><![CDATA[<h5>简单的mysql基本操作</h5>

<p>mysql 查看默认引擎
<code>
show variables like 'storage_engine';
</code>
查看表详细结构语句
<code>
SHOW CREARTE TABLE 表名 \G
</code>
修改表名
<code>
ALTER TABLE 旧表名 RENAME (TO) 新表名
</code>
修改字段的数据类型
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE 表名 MODIFY 属性名 数据类型;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;eg：ALTER TABLE user MODIFY name varchar(30);
</span><span class='line'>&lt;code&gt;
</span><span class='line'>修改字段名(属性名)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>增加字段（属性）
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE  表名 ADD 属性名1 数据类型【完整性约束条件】[FIRST] AFTER 属性名2
</span><span class='line'>&lt;code&gt;
</span><span class='line'>删除字段（属性）
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE 表名 DROP 属性名;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>修改字段的排列位置
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE 表名 MODIFY 属性名1 数据类型 [FIRST] AFTER 属性名2;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>更改表的存储引擎
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE 表名 engine=存储引擎名;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>删除表的外键约束
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>ALTER TABLE 表名 DROP FOREIGN KEY 外键别名;</span></code></pre></td></tr></table></div></figure>
索引的优点：可以提高检索数据的速度</p>

<p>缺点：创建和维护索引需要耗费时间，占用物理空间，</p>

<p>在已经存在的表创建索引
<code>
CREARTE [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名 ON 表名(属性名[(长度)] [ASC|DESC]);
</code>
用ALTER TABLE 来创建索引
<code>
ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL] INDEX 索引名(属性名[(长度)] [ASC|DESC]);
</code>
删除索引
<code>
DROP INDEX 索引名 ON 表名
</code>
创建视图的语法
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREARTE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[WITH [CASCADED | LOCAL] CHECK OPTION];
</span><span class='line'>&lt;code&gt;
</span><span class='line'>查看视图
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>DESC 视图名&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SHOW TABLES STATUS 查看视图基本信息&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SHOW TABLES STATUS LIKE ‘视图名’&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SHOW CREARTE VIEW 查看视图详细信息&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SHOW CREARTE VIEW  视图;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>修改视图
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>CREARTE OR REPLACE [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[WITH [CASCADED | LOCAL] CHECK OPTION];&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ALTER [ALGORITHM = { UNDEFINED | MERGE | TEMPTABLE}] VIEW  视图名 [(属性名字)] AS SELECT  语句&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[WITH [CASCADED | LOCAL] CHECK OPTION];
</span><span class='line'>&lt;code&gt;
</span><span class='line'>更新视图
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>UPDATE 视图 SET 属性名；
</span><span class='line'>&lt;code&gt;
</span><span class='line'>删除视图
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>DROP VIEW [IF EXISTS] 视图名列表 [RESTRICT|CASCADE]
</span><span class='line'>&lt;code&gt;
</span><span class='line'>创建只有一种执行语句的触发器的形式如下：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FOR EACH ROW 执行语句
</span><span class='line'>&lt;code&gt;
</span><span class='line'>创建有多个执行语句的触发器的形式：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>CREARTE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FOR EACH ROW&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;BEGINE&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行语句列表&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;END
</span><span class='line'>&lt;code&gt;
</span><span class='line'>查看触发器
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>SHOW TRIGGER 触发器名
</span><span class='line'>&lt;code&gt;
</span><span class='line'>删除触发器
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>DROP TRIGGER 触发器名</span></code></pre></td></tr></table></div></figure></p>

<h4>附加：</h4>

<p>MySQL服务的配置和使用</p>

<p>修改MySQL管理员的口令：mysqladmin –u root password 密码字符串           <br/>
如：mysqldmin –u root password 111111</p>

<p>连接MySQL服务器，使用命令： mysql [-h 主机名或IP地址] [-u 用户名] [-p]    <br/>
如：mysql –u root –p</p>

<p>如已有密码需修改root密码用命令: mysqladmin –u root –p password 新密码字符串<br/>
如：mysqladmin –u root –p password 111111</p>

<p>创建数据库格式为：CREATE DATABASE 数据库名称；
如：mysql>create database abc;    默认创建数据库保存在/var/lib/mysql中</p>

<p>查看数据库是  mysql>show abc;</p>

<p>选择数据库是  USE 数据库名称;  如：mysql>use abc;</p>

<p>删除数据库是  DROP DATABASE 数据库名称； 如：mysql>drop database abc;</p>

<p>数据库的创建和删除</p>

<p>创建表是 CREATE TABLE 表名称(字段1，字段2，…[表级约束]) [TYPE=表类型]；</p>

<p>其中字段(1,2 )格式为:字段名 字段类型 [字段约束]
如创建一个表student，如下：
<code>
mysql&gt;create table student (
sno varchar(7) not null,   字段不允许为空
sname varchar (20 )not null,
ssex char (1) default ‘t’,
sbirthday date,
sdepa char (20),
primary key (sno)       表的主键
);
</code>
可用describe命令查看表的结构。</p>

<p>默认表的类型为MYISAM，并在/var/lib/mysql/abc 目录下建立student.frm(表定义文件)，student.MDY(数据文件)，stedent.MYI(索引文件)。</p>

<p>复制表 CREATE TABLE 新表名称 LIKE 原表名称；
如：mysql>create table xtable like student;</p>

<p>删除表 DROP TABLE 表名称1[表名称2…];
如：mysql> drop table xtale;</p>

<p>修改表 ALTER TABLE 表名称 更改动作1[动作2]；
动作有ADD(增加) DROP(删除)CHANGE、MODIFY(更改字段名和类型)RENAME</p>

<p>增加字段：mysql>alter table student add saddress varchar(25);</p>

<p>更改字段名和字段类型： mysql>alter table student change saddress sremark test;</p>

<p>即使不更改字段类型也要给出字段类型如：
mysql>alter table student change saddress sremark varchar (25);</p>

<p>更改字段类型　：mysql> alter table student modify sremark varchar(25);</p>

<p>删除字段：mysql>alter table student drop sremark；
更改表名称： mysql>alter table student rename to xs；</p>

<p>表中数据的插入、删除和修改
<code>
   插入记录： INSERT INTO 表名称（字段名1,字段名2…
               VALUES(字段1的值，字段2的值
   如：mysql&gt;insert into student (sno,sname,ssex,sbirthday,sdepa)
             values(‘0321001’,’Liu Tao’,dagault,19870201,’math’);
   查看表  mysql&gt;select * from student;
</code>
插入与前面相同的记录，可用insert命令的缩写格式，
如: mysql>insert into student values (‘0321001’, ‘Liu Tao’, default, 19870201, ‘mth’);</p>

<p>如果字段名列表中没有给出表中的某些字段，那么这些字段设置为默认值，
如：mysql>insert into student (sno,sname,sbirthday)
          values(‘0321002’,’Wang Jun’,1870112);</p>

<p>一个单独的insert语句中可使用多个valuse字句，插入多条记录，
如：
<code>
mysql&gt;insert into  student values
         (‘0322001’, ‘Zhang Liaoyun’, ‘f’ 1971102,’computer’),
         (‘0322002’, ‘Li Ming’, ‘t’ 1971105,’computer’);
</code>
   删除记录： DELETE FROM 表名称 WHERE 条件表达式；
   如：mysql>delete from student where sno=’0321002’;</p>

<p>   删除student表中sno字段值前4位为‘0322’的记录
   如：mysql>delete from student where left (sno,4)=’0322’;</p>

<p>   删除所以记录，可以不带where字句
   如：mysql>delete from student;</p>

<p>   删除所以记录可以用命令truncate     删除表，然后重建表，所以比delete命令快
   如：mysql>truncate table student;</p>

<p>   修改记录 UPDATE 表名称 SET 字段名1=字段值1
            WHERE 条件表达式
   如： mysql>update student set sbirthday=1920113, sdepa=’math’ where sno=’0321002’;</p>

<p>索引的创建与删除</p>

<p>   在创建表的同时创建索引</p>

<p>  创建表时，可用INDEX字句或UNIQUE(字段值必须惟一)字句创建索引
   如：创建课程表course, 课程编号cno字段为主键，课程名称cname字段创建一个名为can的索引
<code>
mysql&gt;create table course(
cno varchar(5) not null,
cname varchar(30) not null,
teacher varchar(20),
primary key (cno),
index can (cname)
);
</code>
   向已存在的表添加索引   CREATE [UNIQUE ] INDEX 索引名ON表名称 (字段名1[(长度)])；
   如：mysql>create index sna on student (sname);</p>

<p>对于类型为CHAR和VARCHAR的字段建立索引时还可指定长度值，类型为BLOB和TEXT的字段索引时必须指定长度值。
   如mysql>create index sna on student (sname(10));</p>

<p>删除索引  DROP INDEX 索引 ON表名称；
   如：mysql>drop index sna on student;</p>

<p>用户的创建和删除</p>

<p>初始化时有5个MySQL授权表，其中host、tables_priv和columnts_priv 是空的，表user和db决定了MySQL默认的访问规则。默认有mysql和test两个数据库。</p>

<p>授权表：user  用户从哪些主机可以连接到数据库服务器，以及对所以数据库的访问权限（全局权限）</p>

<pre><code>    db   用户可以使用哪些权限，以及对数据库执行哪些操作（数据库级权限）

    host  当表db 中的host 字段值为空时，用户从哪些主机可以连接到数据库服务器。

    tables_priv  连接的用户可以访问哪些表（表级权限）

    columnts_priv  连接的用户可以访问哪些字段 （字段级权限）
</code></pre>

<p>创建新用户</p>

<p>以MySQL管理员连接到数据库服务器： #mysql –u root –p</p>

<p>创建新用户guess并设置密码，同时可以从任何主机连接数据库服务器：</p>

<p>mysql>insert into mysql.user (host,user,password)
values (‘%’,’gusee’,password(‘guest’));      使用password()函数，密码是加密的</p>

<p>重载MySQL授权表：mysql>flush privileges;
远程客户端连接数据库服务器 ：#mysql –h 192.168.0.50 –u guess –</p>

<p>p      开放服务器的TCP断口3306</p>

<p>查看当前用户可用数据库： show database</p>

<p>删除用户</p>

<p>mysql>delete from mysql.user where user=’guest’;</p>

<p>mysql>flush privileges;      重载MySQL授权表</p>

<p>更改用户密码</p>

<p>如：更改guset密码为123456</p>

<p>mysql>update mysql.user set password=password(‘123456’)
      where user =’guset’;</p>

<p>mysql>flush privileges;</p>

<p>或者是 mysql>set password for guset@’%’=password(‘123456’);</p>

<p>用户权限的设置</p>

<p>   在表user、db和host中，所有字段声明为ENUM(‘N’,’Y’),默认是‘N’;</p>

<p>   在表tables_priv和columns_priv中，权限字段声明为SET类型
   修改授权表中的访问权限有两中方法，一是使用 INSERT、UPDATE和
DELETE等DML语句，</p>

<p>   另一中是GRANT和GRVOKE语句
   使用GRANT语句授权：
   格式如下：</p>

<p>   GRANT 权限列表 [(字段列表)] on 数据库名称.表名称</p>

<p>   TO 用户名@域名或IP地址</p>

<p>   [INDETIFIED BY ‘密码值’] [WITH CRANT OPTION];</p>

<p>   授权哪个用户能连接，从哪连接
   如：授权用户guest从任意主机连接数据库服务器，并具有完全访问数据库abc的权限。</p>

<p>   Mysql>grant all on abc.* to guset@’%’ identified by ‘guest’</p>

<p>   注意几点：如指定用户不存在，则创建该新用户；
             ‘权限列表’处ALL表示授予全部权限，USAGE表不授予任何权限。</p>

<pre><code>         ‘数据库名称.表名称’处可以使用通配符“*”。如“abc.*”表数据库abc中所有表
           ‘用户名@域名或IP地址’设置谁能连，从哪连。用户名 不能用通配符，但可以用‘ ’空字符串，表任何用户；域名或IP地址可以用通配符“%”，使用是用单引号括起来。
</code></pre>

<p>   授权用户不同级别的访问权限
   如：新建用户tom,能从子网192.168.16.0访问数据库服务器，可以读
取数据库xsxk,并能修改表course 中字段teacher的值
   mysql>grant select on xsxd.* to tom@’192.168.16.%’ indentifiend by ‘123456’;</p>

<p>   mysql>grant update(teacher) on xsxd.course to tom@’192.168.16.%’’</p>

<p>   注意几点：数据库名称.表名称 用来设置权限运用的级别，有全局的（<em>.</em>）,指定数据库的（xsxd.*）</p>

<pre><code>         和指定表的（xsxd.student）;

         字段列表 设置权限运用中指定的表中的哪些字段，如update(cname,teacher)

         权限列表 指定的权限与权限运行的级别有关，如有写权限（FILE、PROCESS、RELOAD、SHUTDOWN）作为管理权限用于全局级别；对于字段级别只能指定SELECT、INSERT、UPDATE、REFERENCES
</code></pre>

<p>授予用户管理权限的权利
   如：管理员授予拥护admin可以从本地连接数据库服务器，对数据库
xsxk具有完全访问权限，并可以
       将拥有的权限赋予其他用户</p>

<p>   mysql>grant all on xsxd.* to admin@localhost indentified by ‘123456’ with grant option;
   其中with grant option 子句表示拥护拥有的权限可以赋予其他用户。</p>

<p>   mysql>qrant select on xsxd.student to bill@localhost;  授予bill用户权限</p>

<p>   mysql>show grants for admin@localhost;   查看用户权限</p>

<p>使用REVOKE语句撤权</p>

<p>   格式如下：</p>

<p>   REVOKE 权限列表[(字段列表)] on数据库名称.表名称
   FROM用户名@域名或IP地址
   如：撤消用户admin@localhost 对数据库xsxd的创建、删除数据库及表的权限，不撤消用户赋予其它用户的权限</p>

<p>   mysql>revoke create,drop on xsxd.* from admin@localhost;</p>

<p>   mysql>revoke grant option on xsxd.* from admin@localhost;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP mysql函数及其Mysqli函数代替用法]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/mysqli/"/>
    <updated>2016-07-27T10:27:18+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/mysqli</id>
    <content type="html"><![CDATA[<h4>由于MySQL扩展从php 5.5开始弃用，所以以后不推荐大家再用MySQL扩展，请用MySQLi或PDO代替，以下是MySQL对应的MySQLi函数（绿色字体）供大家参考。（注：PHP手册上的有误，这里是最准的）</h4>

<h4>MySQL>>(从PHP 5.5开始弃用)</h4>

<h4>mysql_affected_rows — （mysqli_affected_rows()）取得前一次 MySQL 操作所影响的记录行数</h4>

<h4>mysql_client_encoding — （mysqli_character_set_name()）返回字符集的名称(返回当前连接的默认字符集名称。)</h4>

<h4>mysql_close — （mysqli_close()）关闭 MySQL 连接</h4>

<h4>mysql_connect — （mysqli_connect()）打开一个到 MySQL 服务器的连接</h4>

<h4>mysql_create_db — （mysqli_query() then CREATE DATABASE）新建一个 MySQL 数据库(废弃)(用 mysql_query() 来提交一条 SQL 的 CREATE DATABASE 语句来代替)</h4>

<h4>mysql_data_seek — （mysqli_data_seek()）移动内部结果的指针</h4>

<h4>mysql_db_name — （Query: SELECT DATABASE()非全等）取得 mysql_list_dbs() 调用所返回的数据库名</h4>

<h4>mysql_db_query — （mysqli_select_db() then the mysqli_query()）选择一个数据库并在它上面执行一个查询 从 PHP 5.3.0 起弃用 用 mysql_select_db() 和 mysql_query() 代替</h4>

<h4>mysql_drop_db — （Execute a DROP DATABASE query）丢弃（删除）一个 MySQL 数据库(废弃)(用 mysql_query() 提交一条 SQL DROP DATABASE 语句来替代)</h4>

<h4>mysql_errno — （mysqli_errno()）返回上一个 MySQL 操作中的错误信息的数字编码</h4>

<h4>mysql_error — （mysqli_error()）返回上一个 MySQL 操作产生的文本错误信息</h4>

<h4>mysql_escape_string — （mysqli_escape_string()）转义一个字符串用于mysql_query从PHP 5.3.0起弃用用 mysql_real_escape_string() 代替</h4>

<h4>mysql_fetch_array — （mysqli_fetch_array()）从结果集中取得一行作为关联数组，或数字数组，或二者兼有</h4>

<h4>mysql_fetch_assoc — （mysqli_fetch_assoc()）从结果集中取得一行作为关联数组</h4>

<h4>mysql_fetch_field — （mysqli_fetch_field()）从结果集中取得列信息并作为对象返回</h4>

<h4>mysql_fetch_lengths — （mysqli_fetch_lengths()）取得结果集中每个输出的长度</h4>

<h4>mysql_fetch_object — （mysqli_fetch_object()）从结果集中取得一行作为对象</h4>

<h4>mysql_fetch_row — （mysqli_fetch_row()）从结果集中取得一行作为枚举数组</h4>

<h4>mysql_field_flags — （mysqli_fetch_fields() [flags]?）从结果中取得和指定字段关联的标志</h4>

<h4>mysql_field_len — （mysqli_fetch_field_direct() [length]）返回指定字段的长度</h4>

<h4>mysql_field_name — （mysqli_fetch_field_direct() [name] or [orgname]）取得结果中指定字段的字段名</h4>

<h4>mysql_field_seek — （mysqli_field_seek()）将结果集中的指针设定为指定的字段偏移量</h4>

<h4>mysql_field_table — （mysqli_fetch_field_direct() [table] or [orgtable]）取得指定字段所在的表名</h4>

<h4>mysql_field_type — （mysqli_fetch_field_direct() [type]）取得结果集中指定字段的类型</h4>

<h4>mysql_free_result — （mysqli_free_result()）释放结果内存</h4>

<h4>mysql_get_client_info — （mysqli_get_client_info()）取得 MySQL 客户端信息</h4>

<h4>mysql_get_host_info — （mysqli_get_host_info()）取得 MySQL 主机信息</h4>

<h4>mysql_get_proto_info — （mysqli_get_proto_info()）取得 MySQL 协议信息</h4>

<h4>mysql_get_server_info — （mysqli_get_server_info()）取得 MySQL 服务器信息</h4>

<h4>mysql_info — （mysqli_info()）取得最近一条查询的信息</h4>

<h4>mysql_insert_id — （mysqli_insert_id()）取得上一步 INSERT 操作产生的 ID（得到在最后一次查询生成的id）</h4>

<h4>mysql_list_dbs — （SQL Query: SHOW DATABASES）列出 MySQL 服务器中所有可用的数据库（从php5.4.0弃用）(用SQL 查询: SHOW DATABASES代替)</h4>

<h4>mysql_list_fields — （SQL Query: SHOW COLUMNS FROM sometable）列出 MySQL 表字段（取得给定表名的信息）（弃用）(已过时。最好用 mysql_query() 来发出一条 SHOW COLUMNS FROM table [LIKE &lsquo;name&rsquo;] 的 SQL 语句来代替。)</h4>

<h4>mysql_list_processes — （mysqli_thread_id()不全等）列出 MySQL 进程</h4>

<h4>mysql_list_tables —（SQL Query: SHOW TABLES FROM db_name） 列出 MySQL 数据库中的表（弃用）(已弃用。 使用 mysql_query() 发出一个SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;]语句代替. )</h4>

<h4>mysql_num_fields — （mysqli_field_count()）取得结果集中字段的数目</h4>

<h4>mysql_num_rows — （mysqli_num_rows(),mysqli_stmt_num_rows()）取得结果集中行的数目</h4>

<h4>mysql_pconnect — （mysqli_connect() with p: host prefix）打开一个到 MySQL 服务器的持久连接</h4>

<h4>mysql_ping — （mysqli_ping()）Ping 一个服务器连接，如果没有连接则重新连接</h4>

<h4>mysql_query — （mysqli_query()）发送一条 MySQL 查询</h4>

<h4>mysql_real_escape_string — （mysqli_real_escape_string()）转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</h4>

<h4>mysql_result — （mysqli_data_seek() 联合 mysqli_field_seek() and mysqli_fetch_field()）取得结果数据</h4>

<h4>mysql_select_db — （mysqli_select_db()）选择 MySQL 数据库</h4>

<h4>mysql_set_charset — （mysqli_set_charset()）设置客户端字符集</h4>

<h4>mysql_stat — （mysqli_stat()）取得当前系统状态</h4>

<h4>mysql_tablename — （SQL Query: SHOW TABLES）取得表名（取得字段的表名）（弃用）(已弃用。 使用 mysql_query() 发出一个 SQL SHOW TABLES [FROM db_name] [LIKE &lsquo;pattern&rsquo;] 语句代替. )</h4>

<h4>mysql_thread_id — （mysqli_thread_id()）返回当前线程的 ID</h4>

<h4>mysql_unbuffered_query — （mysqli_query(“SQL语句”, MYSQLI_USE_RESULT); ）向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行</h4>
]]></content>
  </entry>
  
</feed>
