<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-09-04T19:10:11+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[chenjingxiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[验证码工具类的使用]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma/"/>
    <updated>2016-09-01T18:19:27+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</id>
    <content type="html"><![CDATA[<p>1.工具类：</p>

<pre><code>&lt;?php
class Captcha
{
    private $charset = 'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789';
 // 随机因子，
    private $code;
 // 验证码字符串
    private $codelen = 4;
 // 验证码长度
    private $width = 150;
 // 宽度
    private $height = 40;
 // 高度
    private $img;
 // 图形资源句柄
    private $font;
 // 指定的字体
    private $fontsize = 20;
 // 指定字体大小
    private $fontcolor;
 // 指定字体颜色                        
    // 构造方法初始化
    public function __construct($codelen = 4, $width = 150, $height = 40, $fontsize = 20, $font = "elephant.ttf")
    {
        $this-&gt;codelen = $codelen;
        $this-&gt;width = $width;
        $this-&gt;height = $height;
        $this-&gt;fontsize = $fontsize;
        $this-&gt;font = $font;
    }
    // 生成随机码
    private function createCode()
    {
        $_len = strlen($this-&gt;charset) - 1;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;code .= $this-&gt;charset[mt_rand(0, $_len)];
        }
    }
    // 生成背景
    private function createBg()
    {
        $this-&gt;img = imagecreatetruecolor($this-&gt;width, $this-&gt;height);
        $color = imagecolorallocate($this-&gt;img, mt_rand(157, 255), mt_rand(157, 255), mt_rand(157, 255));
        imagefilledrectangle($this-&gt;img, 0, $this-&gt;height, $this-&gt;width, 0, $color);
    }  
    // 生成文字
    private function createFont()
    {
        $_x = $this-&gt;width / $this-&gt;codelen;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;fontcolor = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imagettftext($this-&gt;img, $this-&gt;fontsize, mt_rand(- 30, 30), $_x * $i + mt_rand(1, 5), $this-&gt;height / 1.4, $this-&gt;fontcolor, $this-&gt;font, $this-&gt;code[$i]);
        }
    }
    // 生成线条、雪花
    private function createLine()
    {
        for ($i = 0; $i &lt; 6; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imageline($this-&gt;img, mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), $color);
        }
        for ($i = 0; $i &lt; 100; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));
            imagestring($this-&gt;img, mt_rand(1, 5), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), '*', $color);
        }
    }
    // 输出
    private function outPut()
    {
        header('Content-type:image/png');
        imagepng($this-&gt;img);
        imagedestroy($this-&gt;img);
    }
    // 对外生成
    public function generateCode()
    {
        $this-&gt;createBg();
        $this-&gt;createCode();
        $this-&gt;createLine();
        $this-&gt;createFont();
        $this-&gt;outPut();
    }   
    // 获取验证码
    public function getCode()
    {
        return strtolower($this-&gt;code);
    }
}
//调用实例
//$c = new Captcha();
//$c-&gt;generateCode();
//$_SESSION['captcha'] = $c-&gt;getCode();
</code></pre>

<p>2.在php代码中调用：</p>

<pre><code>//验证码
    public function yanzhengmaAction() {
        //调用Captcha类
        $this-&gt;library("Captcha");
        $c = new Captcha(4,142,30);
        $c-&gt;generateCode();
        $_SESSION['yanzhengma'] = $c-&gt;getCode();
    }
</code></pre>

<p>3.在HTML网页中代码：</p>

<pre><code>&lt;td colspan="2" align="right"&gt;&lt;img src="index.php?p=admin&amp;c=login&amp;a=yanzhengma" width="142" height="30" alt="验证码图片" border="1" onclick= this.src="index.php?p=admin&amp;c=login&amp;a=yanzhengma&amp;"+Math.random() style="cursor: pointer;" title="看不清？点击更换另一个验证码。" /&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php常用的防黑客攻击的几种情况]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-sql-xss/"/>
    <updated>2016-09-01T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-sql-xss</id>
    <content type="html"><![CDATA[<h6>1.防止暴力破解</h6>

<p>Get方式恶意攻击，（dos），通常硬件的方式来防止，防火墙。
Post方式暴力破解，从程序的角度来防止，最通用的方法就是增加验证码(验证码使用文章：<a href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma">http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</a>)。</p>

<p>注意：验证码常见错误：</p>

<ol>
<li><p>字体文件的位置不对</p></li>
<li><p>由于在生成验证码的时候，使用了header()函数，它有一个特点，它之前不能有任何的输出，包括空格。解决办法，从index.php开始查找，凡是被包含进来的文件都需要查找</p></li>
<li><p>还需要注意一个的，就是你的文件编码要确保是 utf-8的，而不是带BOM头的utf-8。</p></li>
</ol>


<h6>2.防sql注入</h6>

<p>黑客通过在表单中填入特殊的字符或者是url中增加特殊的字符，然后想数据库发起请求，拼凑出sql语句，达到攻击的目的。</p>

<p>有两种形式：</p>

<p>Post表单提交；防止方式：1.MD5加密密码，2.使用addslashes函数给特殊字符单引号添加反斜杠</p>

<p>Get，url传参；防止方式：url传回的<em>GET[&lsquo;&rsquo;]加上1，如：$pages = $</em>GET[&lsquo;id&rsquo;]+1</p>

<p>凡是是用户提交的信息，都是不能相信的，都需要进行处理，其中之一就是转义。
也就意味着在所有的 收集表单信息的地方，都要调用 addslashes函数。当要转义数组时需要批量处理，代码如下：</p>

<pre><code>//批量转义
function  deepslashes($data){
    //判断$data形式
    if (empty($data)){
        return $data;
    }
    //遍历数组
    return is_array($data) ? array_map('deepslashes', $data) : addslashes($data);
}
</code></pre>

<h6>3.xss攻击</h6>

<p>Xss: cross site script 跨站脚本攻击</p>

<p>Css 被占用，表示样式表</p>

<p>恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。</p>

<p>防止方法：使用Htmlspecialchars函数 和  htmlentites函数把特殊字符转义，批量处理的示例代码如下：</p>

<pre><code>//批量实体转义
   function deepspecialchars($data){
       if (empty($data)){
           return $data;
       }
       return is_array($data) ? array_map('deepspecialchars', $data) : htmlspecialchars($data);
   }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于php文件操作示例]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-files/"/>
    <updated>2016-08-31T18:19:32+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-files</id>
    <content type="html"><![CDATA[<h6>一 、解析路径：</h6>

<p>1 获得文件名:</p>

<p>basename();</p>

<p>给出一个包含有指向一个文件的全路径的字符串，本函数返回基本的文件名。如果文件名是以 suffix 结束的，那这一部分也会被去掉。
eg:</p>

<p>$path = &ldquo;/home/httpd/html/index.php&rdquo;;</p>

<p>$file = basename($path,&ldquo;.php&rdquo;); // $file is set to &ldquo;index&rdquo;</p>

<p>2 得到目录部分：</p>

<p>dirname();</p>

<p>给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名。
eg:</p>

<p>$path = &ldquo;/etc/passwd&rdquo;;</p>

<p>你$file = dirname($path); // $file is set to &ldquo;/etc&rdquo;</p>

<p>3 得到路径关联数组
pathinfo();
得到一个指定路径中的三个部分：目录名，基本名，扩展名。
eg:
$pathinfo = pathinfo(&ldquo;www/test/index.html&rdquo;);
var_dump($pathinfo);
// $path[&lsquo;dirname&rsquo;]
$path[&lsquo;basename&rsquo;]
$path[&lsquo;extenssion&rsquo;]</p>

<p>二、文件类型
1. filetype();
返回文件的类型。可能的值有 fifo，char，dir，block，link，file 和 unknown。
eg:
echo filetype(&lsquo;/etc/passwd&rsquo;); // file
echo filetype(&lsquo;/etc/&rsquo;);        // dir</p>

<p>三、得到给定文件有用信息数组(很有用)</p>

<ol>
<li>fstat();
通过已打开的文件指针取得文件信息
获取由文件指针 handle 所打开文件的统计信息。本函数和 stat() 函数相似，除了它是作用于已打开的文件指针而不是文件名。
eg:</li>
</ol>


<p>// 打开文件
$fp = fopen(&ldquo;/etc/passwd&rdquo;, &ldquo;r&rdquo;);
// 取得统计信息
$fstat = fstat($fp);
// 关闭文件
fclose($fp);
// 只显示关联数组部分
print_r(array_slice($fstat, 13));
2. stat()
获取由 filename 指定的文件的统计信息(类比fstat())#p#副标题#e#</p>

<p>四、计算大小
1. filesize()
返回文件大小的字节数，如果出错返回 FALSE 并生成一条 E_WARNING 级的错误。
eg:</p>

<p>// 输出类似：somefile.txt: 1024 bytes
$filename = &lsquo;somefile.txt&rsquo;;
echo $filename . &lsquo;: &rsquo; . filesize($filename) . &lsquo; bytes&rsquo;;</p>

<ol>
<li>disk_free_space()
获得目录所在磁盘分区的可用空间（字节单位）
eg</li>
</ol>


<p>// $df 包含根目录下可用的字节数
$df = disk_free_space(&ldquo;/&rdquo;);
//在 Windows 下:
disk_free_space(&ldquo;C:&rdquo;);
disk_free_space(&ldquo;D:&rdquo;);</p>

<ol>
<li>disk_total_space()
返回一个目录的磁盘总大小
eg:(同上，换掉函数)</li>
</ol>


<p>另：如需要计算一个目录大小，可以编写一个递归函数来实现</p>

<p>代码
function dir_size($dir){
    $dir_size = 0;
    if($dh = @opendir($dir)){
        while(($filename = readdir($dh)) != false){
            if($filename !=&lsquo;.&rsquo; and $filename !=&lsquo;..&rsquo;){</p>

<pre><code>            if(is_file($dir.'/'.$filename)){
                $dir_size +=filesize($dir.'/'.$filename);

            }elseif(is_dir($dir.'/'.$filename)){

                $dir_size +=dir_size($dir.'/'.$filename);
            }
        }

    }#end while

}# end opendir

@closedir($dh);
return $dir_size;
</code></pre>

<p>} #end function</p>

<p>五、 访问与修改时间
1. fileatime(): 最后访问时间
2. filectime(): 最后改变时间（任何数据的修改）
3. filemtime(): 最后修改时间（指仅是内容修改）</p>

<p>六、 文件的I/O操作</p>

<ol>
<li>fopen &ndash; 打开文件或者 URL</li>
</ol>


<p>mode 说明
&lsquo;r&rsquo; 只读方式打开，将文件指针指向文件头。
&lsquo;r+&rsquo; 读写方式打开，将文件指针指向文件头。
&lsquo;w&rsquo; 写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
&lsquo;w+&rsquo; 读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
&lsquo;a&rsquo; 写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
&lsquo;a+&rsquo; 读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
&lsquo;x&rsquo; 创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，
&lsquo;x+&rsquo; 创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE
eg:</p>

<p>$handle = fopen(&ldquo;/home/rasmus/file.txt&rdquo;, &ldquo;r&rdquo;);#p#副标题#e#
 2. file &ndash; 把整个文件读入一个数组中(此函数是很有用的)</p>

<p>和 file_get_contents() 一样，只除了 file() 将文件作为一个数组返回。数组中的每个单元都是文件中相应的一行，包括换行符在内。如果失败 file() 返回 FALSE。
eg:</p>

<p>代码
$lines = file(&lsquo;<a href="http://www.example.com/">http://www.example.com/</a>&rsquo;);
// 在数组中循环，显示 HTML 的源文件并加上行号。
foreach ($lines as $line_num => $line) {
    echo &ldquo;Line #<b>{$line_num}</b> : &rdquo; . htmlspecialchars($line) . &ldquo;<br />\n&rdquo;;
}
// 另一个例子将 web 页面读入字符串。参见 file_get_contents()。
$html = implode(&lsquo;&rsquo;, file (&lsquo;<a href="http://www.example.com/">http://www.example.com/</a>&rsquo;));
3. fgets &ndash; 从文件指针中读取一行</p>

<p>从 handle 指向的文件中读取一行并返回长度最多为 length - 1 字节的字符串。碰到换行符（包括在返回值中）、EOF 或者已经读取了 length - 1 字节后停止（看先碰到那一种情况）。如果没有指定 length，则默认为 1K，或者说 1024 字节。
eg:</p>

<p>$handle = @fopen(&ldquo;/tmp/inputfile.txt&rdquo;, &ldquo;r&rdquo;);
if ($handle) {
    while (!feof($handle)) {
        $buffer = fgets($handle, 4096);
        echo $buffer;
    }
    fclose($handle);
}
 4. fgetss &ndash; 从文件指针中读取一行并过滤掉 HTML 标记</p>

<p>和 fgets() 相同，只除了 fgetss 尝试从读取的文本中去掉任何 HTML 和 PHP 标记。</p>

<p>   可以用可选的第三个参数指定哪些标记不被去掉</p>

<p>   另：对的目录的操作：
1. opendir &ndash; 打开目录句柄，打开一个目录句柄，可用于之后的 closedir()，readdir() 和 rewinddir() 调用中。
2. readdir &ndash; 从目录句柄中读取条目，返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回。
eg:</p>

<p>代码
// 注意在 4.0.0-RC2 之前不存在 !== 运算符</p>

<p>if ($handle = opendir(&lsquo;/path/to/files&rsquo;)) {
    echo &ldquo;Directory handle: $handle\n&rdquo;;
    echo &ldquo;Files:\n&rdquo;;</p>

<pre><code>while (false !== ($file = readdir($handle))) {
    echo "$file\n";
}

while ($file = readdir($handle)) {
    echo "$file\n";
}
 closedir($handle);
</code></pre>

<p>}
3. scandir &ndash; 列出指定路径中的文件和目录(很有用),返回一个 array，包含有 directory 中的文件和目录。
默认的排序顺序是按字母升序排列。如果使用了可选参数 sorting_order（设为 1），则排序顺序是按字母降序排列。
eg:</p>

<p>$dir    = &lsquo;/tmp&rsquo;;
$files1 = scandir($dir);
$files2 = scandir($dir, 1);</p>

<p>print_r($files1);
print_r($files2); <br/>
另外注：</p>

<p>七、 对文件属性的操作（操作系统环境不同，可能有所不一样，这点要注意）</p>

<pre><code>1文件是否可读：

   boolis_readable ( string filename )

     如果由 filename 指定的文件或目录存在并且可读则返回 TRUE。

    记住 PHP 也许只能以运行 webserver 的用户名（通常为 'nobody'）来访问文件。不计入安全模式的限制。

2 文件是否可写

     bool is_writable ( string filename )

    如果文件存在并且可写则返回 TRUE。filename 参数可以是一个允许进行是否可写检查的目录名。

     记住 PHP 也许只能以运行 webserver 的用户名（通常为 'nobody'）来访问文件。不计入安全模式的限制
</code></pre>

<p>   3  检查文件是否存在</p>

<pre><code>boolfile_exists ( string filename )

  如果由 filename 指定的文件或目录存在则返回 TRUE，否则返回 FALSE
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转】php的数组各种用法(上)]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-arrays/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-arrays</id>
    <content type="html"><![CDATA[<h5>一、数组操作的基本函数</h5>

<p>数组的键名和值</p>

<p>array_values($arr);获得数组的值</p>

<p>array_keys($arr);获得数组的键名</p>

<p>array_flip($arr);数组中的值与键名互换（如果有重复前面的会被后面的覆盖）</p>

<p>in_array(&ldquo;apple&rdquo;,$arr);在数组中检索apple</p>

<p>array_search(&ldquo;apple&rdquo;,$arr);在数组中检索apple ，如果存在返回键名</p>

<p>array_key_exists(&ldquo;apple&rdquo;,$arr);检索给定的键名是否存在数组中
isset($arr[apple]):检索给定的键名是否存在数组中</p>

<p>数组的内部指针</p>

<p>current($arr);返回数组中的当前单元</p>

<p>pos($arr);返回数组中的当前单元</p>

<p>key($arr);返回数组中当前单元的键名</p>

<p>prev($arr);将数组中的内部指针倒回一位</p>

<p>next($arr);将数组中的内部指针向前移动一位</p>

<p>end($arr);将数组中的内部指针指向最后一个单元</p>

<p>reset($arr;将数组中的内部指针指向第一个单元</p>

<p>each($arr);将返回数组当前元素的一个键名/值的构造数组，并使数组指针向前移动一位</p>

<p>list($key,$value)=each($arr);获得数组当前元素的键名和值
数组和变量之间的转换</p>

<p>extract($arr);用于把数组中的元素转换成变量导入到当前文件中，键名当作变量名，值作为变量值</p>

<p>注：（第二个参数很重要，可以看手册使用）使用方法  echo $a;
compact(var1,var2,var3);用给定的变量名创建一个数组</p>

<h5>二、数组的分段和填充</h5>

<p>数组的分段</p>

<p>array_slice($arr,0,3);可以将数组中的一段取出，此函数忽略键名</p>

<p>array_splice($arr,0,3，array(&ldquo;black&rdquo;,&ldquo;maroon&rdquo;));</p>

<p>可以将数组中的一段取出，与上个函数不同在于返回的序列从原数组中删除</p>

<p>分割多个数组</p>

<p>array_chunk($arr,3,TRUE);可以将一个数组分割成多个，TRUE为保留
原数组的键名</p>

<p>数组的填充</p>

<p>array_pad($arr,5,&lsquo;x&rsquo;);将一个数组填补到制定长度</p>

<h5>三、数组与栈</h5>

<p>array_push($arr,&ldquo;apple&rdquo;,&ldquo;pear&rdquo;);将一个或多个元素压入数组栈的末尾（入栈），返回入栈元素的个数
array_pop($arr);将数组栈的最后一个元素弹出（出栈）</p>

<h5>四、数组与列队</h5>

<p>array_shift($arr);数组中的第一个元素移出并作为结果返回（数组长度减1，其他元素向前移动一位，数字键名改为从零技术，文字键名不变）</p>

<p>array_unshift($arr,&ldquo;a&rdquo;,array(1,2));在数组的开头插入一个或多个元素</p>

<h5>五、回调函数</h5>

<p>array_walk($arr,&lsquo;function&rsquo;,&lsquo;words&rsquo;);使用用户函数对数组中的每个成员进行处理（第三个参数传递给回调函数function）</p>

<p>array_mpa(&ldquo;function&rdquo;,$arr1,$arr2);可以处理多个数组（当使用两个或更多数组时，他们的长度应该相同）</p>

<p>array_filter($arr,&ldquo;function&rdquo;);使用回调函数过滤数组中的每个元素，如果回调函数为TRUE，数组的当前元素会被包含在返回的结果数组中，数组的键名保留不变</p>

<p>array_reduce($arr,&ldquo;function&rdquo;,&ldquo;<em>&rdquo;);转化为单值函数（</em>为数组的第一个值）</p>

<h5>六、数组的排序</h5>

<p>通过元素值对数组排序</p>

<p>sort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>rsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>usort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）忽略键名的数组排序</p>

<p>asort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>arsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>uasort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二
个，负数表示第一个小于第二个）保留键名的数组排序</p>

<p>通过键名对数组排序</p>

<p>ksort($arr);按照键名正序排序</p>

<p>krsort($arr);按照键名逆序排序</p>

<p>uksort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的键名
进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）</p>

<p>自然排序法排序
natsort($arr);自然排序（忽略键名）
natcasesort($arr);自然排序（忽略大小写，忽略键名）</p>

<h5>七、数组的计算</h5>

<p>数组元素的求和</p>

<p>array_sum($arr);对数组内部的所有元素做求和运算
数组的合并</p>

<p>array_merge($arr1,$arr2);合并两个或多个数组（相同的字符串键名，后面的覆盖前面的，相同的数字键名，后面的不会做覆盖操作，而是附加到后面）</p>

<p>“+”$arr1+$arr2;对于相同的键名只保留后一个</p>

<p>array_merge_recursive($arr1,$arr2); 递归合并操作，如果数组中有相同的字符串键名，这些值将被合并到一个数组中去。如果一个值本身是一个数组，将按照相应的键名把它合并为另一个数组。当数组 具有相同的</p>

<p>数组键名时，后一个值将不会覆盖原来的值，而是附加到后面</p>

<p>数组的差集</p>

<p>array_diff($arr1,$arr2);返回差集结果数组</p>

<p>array_diff_assoc($arr1,$arr2,$arr3);返回差集结果数组，键名也做比较</p>

<p>数组的交集</p>

<p>array_intersect($arr1,$arr2);返回交集结果数组</p>

<p>array_intersect_assoc($arr1,$arr2);返回交集结果数组，键名也做比较</p>

<h5>八、其他的数组函数</h5>

<p>range(0,12);创建一个包含指定范围单元的数组</p>

<p>array_unique($arr);移除数组中重复的值，新的数组中会保留原始的键名</p>

<p>array_reverse($arr,TRUE);返回一个单元顺序与原数组相反的数组，如果第二个参数为TRUE保留原来的键名</p>

<p>//srand((float)microtime()*10000000); 随机种子触发器</p>

<p>array_rand($arr,2);从数组中随机取出一个或 多个元素</p>

<p>shuffle($arr);将数组的顺序打乱</p>

<p>本类函数允许用多种方法来操作数组和与之交互。数组的本质是储存，管理
和操作一组变量。</p>

<p>PHP 支持一维和多维数组，可以是用户创建或由另一个函数创建。有一些特定的数据库处理函数可以从数据库查询中生成数组，还有一些函数返回数组。</p>

<p>array_change_key_case — 返回字符串键名全为小写或大写的数组</p>

<p>array_chunk — 将一个数组分割成多个</p>

<p>array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>

<p>array_count_values — 统计数组中所有的值出现的次数</p>

<p>array_diff_assoc — 带索引检查计算数组的差集</p>

<p>array_diff_key — 使用键名比较计算数组的差集</p>

<p>array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集</p>

<p>array_diff_ukey — 用回调函数对键名比较计算数组的差集</p>

<p>array_diff — 计算数组的差集</p>

<p>array_fill_keys — Fill an array with values, specifying keys</p>

<p>array_fill — 用给定的值填充数组</p>

<p>array_filter — 用回调函数过滤数组中的单元</p>

<p>array_flip — 交换数组中的键和值</p>

<p>array_intersect_assoc — 带索引检查计算数组的交集</p>

<p>array_intersect_key — 使用键名比较计算数组的交集</p>

<p>array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比
较索引</p>

<p>array_intersect_ukey — 用回调函数比较键名来计算数组的交集</p>

<p>array_intersect — 计算数组的交集</p>

<p>array_key_exists — 检查给定的键名或索引是否存在于数组中</p>

<p>array_keys — 返回数组中所有的键名</p>

<p>array_map — 将回调函数作用到给定数组的单元上</p>

<p>array_merge_recursive — 递归地合并一个或多个数组</p>

<p>array_merge — 合并一个或多个数组</p>

<p>array_multisort — 对多个数组或多维数组进行排序</p>

<p>array_pad — 用值将数组填补到指定长度</p>

<p>array_pop — 将数组最后一个单元弹出（出栈）</p>

<p>array_product — 计算数组中所有值的乘积</p>

<p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>

<p>array_rand — 从数组中随机取出一个或多个单元</p>

<p>array_reduce — 用回调函数迭代地将数组简化为单一的值</p>

<p>array_reverse — 返回一个单元顺序相反的数组</p>

<p>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</p>

<p>array_shift — 将数组开头的单元移出数组</p>

<p>array_slice — 从数组中取出一段</p>

<p>array_splice — 把数组中的一部分去掉并用其它值取代</p>

<p>array_sum — 计算数组中所有值的和</p>

<p>array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据</p>

<p>array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数
据和索引</p>

<p>array_udiff — 用回调函数比较数据来计算数组的差集</p>

<p>array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比
较数据</p>

<p>array_uintersect_uassoc — 带索引检查计算数组的交集，用回调函数比较数据和索引</p>

<p>array_uintersect — 计算数组的交集，用回调函数比较数据</p>

<p>array_unique — 移除数组中重复的值</p>

<p>array_unshift — 在数组开头插入一个或多个单元</p>

<p>array_values — 返回数组中所有的值</p>

<p>array_walk_recursive — 对数组中的每个成员递归地应用用户函数</p>

<p>array_walk — 对数组中的每个成员应用用户函数</p>

<p>array — 新建一个数组</p>

<p>arsort — 对数组进行逆向排序并保持索引关系</p>

<p>asort — 对数组进行排序并保持索引关系</p>

<p>compact — 建立一个数组，包括变量名和它们的值</p>

<p>count — 计算数组中的单元数目或对象中的属性个数</p>

<p>current — 返回数组中的当前单元</p>

<p>each — 返回数组中当前的键／值对并将数组指针向前移动一步</p>

<p>end — 将数组的内部指针指向最后一个单元</p>

<p>extract — 从数组中将变量导入到当前的符号表</p>

<p>in_array — 检查数组中是否存在某个值</p>

<p>key — 从关联数组中取得键名</p>

<p>krsort — 对数组按照键名逆向排序</p>

<p>ksort — 对数组按照键名排序</p>

<p>list — 把数组中的值赋给一些变量</p>

<p>natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序</p>

<p>natsort — 用“自然排序”算法对数组排序</p>

<p>next — 将数组中的内部指针向前移动一位</p>

<p>pos — current() 的别名</p>

<p>prev — 将数组的内部指针倒回一位</p>

<p>range — 建立一个包含指定范围单元的数组</p>

<p>reset — 将数组的内部指针指向第一个单元</p>

<p>rsort — 对数组逆向排序</p>

<p>shuffle — 将数组打乱</p>

<p>sizeof — count() 的别名</p>

<p>sort — 对数组排序</p>

<p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关
联</p>

<p>uksort — 使用用户自定义的比较函数对数组中的键名进行排序</p>

<p>usort — 使用用户自定义的比较函数对数组中的值进行排序</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于php的正则表达式]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/zhengzebiaodashio/"/>
    <updated>2016-08-31T18:19:28+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/zhengzebiaodashio</id>
    <content type="html"><![CDATA[<p>&ldquo;^[0-9]<em>[1-9][0-9]</em>$"　　 //正整数</p>

<p>&ldquo;^((-\d+)|(0+))$"　　 //非正整数（负整数 + 0）</p>

<p>&ldquo;^-[0-9]<em>[1-9][0-9]</em>$"　　 //负整数</p>

<p>&ldquo;^-?\d+$"　　　　 //整数</p>

<p>&ldquo;^\d+(.\d+)?$"　　 //非负浮点数（正浮点数 + 0）</p>

<p>&ldquo;^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$"　　 //正浮点数</p>

<p>&ldquo;^((-\d+(.\d+)?)|(0+(.0+)?))$&rdquo;//非正浮点数（负浮点数 + 0）
&ldquo;^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$"　　 //负浮点数</p>

<p>&ldquo;^(-?\d+)(.\d+)?$"　　 //浮点数</p>

<p>&ldquo;^[A-Za-z]+$"　　 //由26个英文字母组成的字符串</p>

<p>&ldquo;^[A-Z]+$"　　 //由26个英文字母的大写组成的字符串</p>

<p>&ldquo;^[a-z]+$"　　 //由26个英文字母的小写组成的字符串</p>

<p>&ldquo;^[A-Za-z0-9]+$"　　 //由数字和26个英文字母组成的字符串</p>

<p>&ldquo;^\w+$"　　 //由数字、26个英文字母或者下划线组成的字符串</p>

<p>&ldquo;^[\w-]+(.[\w-]+)*@[\w-]+(.[\w-]+)+$"　　　　//email地址</p>

<p>&ldquo;^[a-zA-z]+://(\w+(-\w+)<em>)(.(\w+(-\w+)</em>))<em>(\?\S</em>)?$&rdquo;//url
/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))$/ // 年-月-日
/^((0([1-9]{1}))|(1[1|2]))/((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年</p>

<p>&ldquo;^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$&rdquo; //Emil
/^((+?[0-9]{2,4}-[0-9]{3,4}-)|([0-9]{3,4}-))?([0-9]{7,8})(-[0-9]+)?$/ //电话号码</p>

<p>&ldquo;^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$&rdquo; //IP地址</p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配HTML标记的正则表达式：/&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/>/</p>

<p>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：^[a-zA-z]+://(\w+(-\w+)<em>)(\.(\w+(-\w+)</em>))<em>(\?\S</em>)?$</p>

<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>

<p>匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</p>

<p>匹配腾讯QQ号：^[1-9]<em>[1-9][0-9]</em>$</p>

<p>利用正则表达式限制网页表单里的文本框输入内容：</p>

<p>用正则表达式限制只能输入中文：onkeyup=&ldquo;value=value.replace(/[^u4E00-u9FA5]/g,&lsquo;&rsquo;)&rdquo; onbeforepaste=&ldquo;clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^u4E00-u9FA5]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入全角字符：
onkeyup=&ldquo;value=value.replace(/[^uFF00-uFFFF]/g,&lsquo;&rsquo;)&rdquo;</p>

<p>onbeforepaste=&ldquo;clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^uFF00-uFFFF]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入数字：onkeyup=&ldquo;value=value.replace(/[^d]/g,&lsquo;&rsquo;) "onbeforepaste="clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^d]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入数字和英文：
onkeyup=&ldquo;value=value.replace(/[W]/g,&lsquo;&rsquo;) "onbeforepaste="clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^d]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>=========常用正则式</p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配HTML标记的正则表达式：/&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/>/</p>

<p>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</p>

<p>匹配IP地址的正则表达式：/(\d+).(\d+).(\d+).(\d+)/g //</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：<a href="http://">http://</a>(/[\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]*)?</p>

<p>sql语句：<sup>select|drop|delete|create|update|insert</sup>.*$</p>

<p>非负整数：^\d+$</p>

<p>正整数：^[0-9]<em>[1-9][0-9]</em>$</p>

<p>非正整数：<sup>(-\d+)|(0+)</sup>$</p>

<p>负整数：^-[0-9]<em>[1-9][0-9]</em>$</p>

<p>整数：^-?\d+$</p>

<p>非负浮点数：^\d+(.\d+)?$</p>

<p>正浮点数：<sup>(0-9)+.[0-9]<em>[1-9][0-9]</em></sup>|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</p>

<p>非正浮点数：<sup>(-\d+.\d+)?</sup>|(0+(.0+)?))$</p>

<p>负浮点数：<sup>-((正浮点数正则式))</sup>$</p>

<p>英文字符串：^[A-Za-z]+$</p>

<p>英文大写串：^[A-Z]+$</p>

<p>英文小写串：^[a-z]+$</p>

<p>英文字符数字串：^[A-Za-z0-9]+$</p>

<p>英数字加下划线串：^\w+$</p>

<p>E-mail地址：^[\w-]+(.[\w-]+)<em>@[\w-]+(.[\w-]+)+$
URL：^[a-zA-Z]+://(\w+(-\w+)</em>)(.(\w+(-\w+)<em>))</em>(\?\s<em>)?$ 或：<sup>http</sup>:\/\/[A-Za-z0-9]+.[A-Za-z0-9]+[\/=\?%-&amp;_~`@[]\&lsquo;:+!]</em>([^&lt;>\&ldquo;\&rdquo;])*$</p>

<p>邮政编码：^[1-9]\d{5}$ 中文：^[\u0391-\uFFE5]+$</p>

<p>电话号码：<sup>((\d{2,3}))|(\d{3}-)</sup>?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}(-\d{1,4})?$</p>

<p>手机号码：<sup>((\d{2,3}))|(\d{3}-)</sup>?13\d{9}$</p>

<p>双字节字符(包括汉字在内)：^\x00-\xff</p>

<p>匹配首尾空格：(^\s<em>)|(\s</em>$)（像vbscript那样的trim函数）</p>

<p>匹配HTML标记：&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/></p>

<p>匹配空行：\n[\s| ]*\r</p>

<p>提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) <em>= </em>(&lsquo;|&ldquo;)?(\w|\|\/|.)+(&rsquo;|&rdquo;| *|>)?</p>

<p>提取信息中的邮件地址：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>提取信息中的图片链接：(s|S)(r|R)(c|C) <em>= </em>(&lsquo;|&ldquo;)?(\w|\|\/|.)
+(&rsquo;|&rdquo;| *|>)?</p>

<p>提取信息中的IP地址：(\d+).(\d+).(\d+).(\d+)</p>

<p>提取信息中的中国手机号码：(86)<em>0</em>13\d{9}</p>

<p>提取信息中的中国固定电话号码：((\d{3,4})|\d{3,4}-|\s)?\d{8}</p>

<p>提取信息中的中国电话号码（包括移动和固定电话):((\d{3,4})|\d{3,4}-|\s)?\d{7,14}</p>

<p>提取信息中的中国邮政编码：[1-9]{1}(\d+){5}</p>

<p>提取信息中的浮点数（即小数):(-?\d*).?\d+</p>

<p>提取信息中的任何数字:(-?\d*)(.\d+)? IP：(\d+).(\d+).(\d+).(\d+)</p>

<p>电话区号：/^0\d{2,3}$/</p>

<p>腾讯QQ号：^[1-9]<em>[1-9][0-9]</em>$</p>

<p>帐号(字母开头，允许5-16字节，允许字母数字下划线)：
^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>

<p>中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</p>
]]></content>
  </entry>
  
</feed>
