<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-08-31T21:09:52+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转】php的数组各种用法(上)]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-arrays/"/>
    <updated>2016-08-31T18:19:30+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-arrays</id>
    <content type="html"><![CDATA[<h5>一、数组操作的基本函数</h5>

<p>数组的键名和值</p>

<p>array_values($arr);获得数组的值</p>

<p>array_keys($arr);获得数组的键名</p>

<p>array_flip($arr);数组中的值与键名互换（如果有重复前面的会被后面的覆盖）</p>

<p>in_array(&ldquo;apple&rdquo;,$arr);在数组中检索apple</p>

<p>array_search(&ldquo;apple&rdquo;,$arr);在数组中检索apple ，如果存在返回键名</p>

<p>array_key_exists(&ldquo;apple&rdquo;,$arr);检索给定的键名是否存在数组中
isset($arr[apple]):检索给定的键名是否存在数组中</p>

<p>数组的内部指针</p>

<p>current($arr);返回数组中的当前单元</p>

<p>pos($arr);返回数组中的当前单元</p>

<p>key($arr);返回数组中当前单元的键名</p>

<p>prev($arr);将数组中的内部指针倒回一位</p>

<p>next($arr);将数组中的内部指针向前移动一位</p>

<p>end($arr);将数组中的内部指针指向最后一个单元</p>

<p>reset($arr;将数组中的内部指针指向第一个单元</p>

<p>each($arr);将返回数组当前元素的一个键名/值的构造数组，并使数组指针向前移动一位</p>

<p>list($key,$value)=each($arr);获得数组当前元素的键名和值
数组和变量之间的转换</p>

<p>extract($arr);用于把数组中的元素转换成变量导入到当前文件中，键名当作变量名，值作为变量值</p>

<p>注：（第二个参数很重要，可以看手册使用）使用方法  echo $a;
compact(var1,var2,var3);用给定的变量名创建一个数组</p>

<h5>二、数组的分段和填充</h5>

<p>数组的分段</p>

<p>array_slice($arr,0,3);可以将数组中的一段取出，此函数忽略键名</p>

<p>array_splice($arr,0,3，array(&ldquo;black&rdquo;,&ldquo;maroon&rdquo;));</p>

<p>可以将数组中的一段取出，与上个函数不同在于返回的序列从原数组中删除</p>

<p>分割多个数组</p>

<p>array_chunk($arr,3,TRUE);可以将一个数组分割成多个，TRUE为保留
原数组的键名</p>

<p>数组的填充</p>

<p>array_pad($arr,5,&lsquo;x&rsquo;);将一个数组填补到制定长度</p>

<h5>三、数组与栈</h5>

<p>array_push($arr,&ldquo;apple&rdquo;,&ldquo;pear&rdquo;);将一个或多个元素压入数组栈的末尾（入栈），返回入栈元素的个数
array_pop($arr);将数组栈的最后一个元素弹出（出栈）</p>

<h5>四、数组与列队</h5>

<p>array_shift($arr);数组中的第一个元素移出并作为结果返回（数组长度减1，其他元素向前移动一位，数字键名改为从零技术，文字键名不变）</p>

<p>array_unshift($arr,&ldquo;a&rdquo;,array(1,2));在数组的开头插入一个或多个元素</p>

<h5>五、回调函数</h5>

<p>array_walk($arr,&lsquo;function&rsquo;,&lsquo;words&rsquo;);使用用户函数对数组中的每个成员进行处理（第三个参数传递给回调函数function）</p>

<p>array_mpa(&ldquo;function&rdquo;,$arr1,$arr2);可以处理多个数组（当使用两个或更多数组时，他们的长度应该相同）</p>

<p>array_filter($arr,&ldquo;function&rdquo;);使用回调函数过滤数组中的每个元素，如果回调函数为TRUE，数组的当前元素会被包含在返回的结果数组中，数组的键名保留不变</p>

<p>array_reduce($arr,&ldquo;function&rdquo;,&ldquo;<em>&rdquo;);转化为单值函数（</em>为数组的第一个值）</p>

<h5>六、数组的排序</h5>

<p>通过元素值对数组排序</p>

<p>sort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>rsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序</p>

<p>usort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）忽略键名的数组排序</p>

<p>asort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>arsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序</p>

<p>uasort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二
个，负数表示第一个小于第二个）保留键名的数组排序</p>

<p>通过键名对数组排序</p>

<p>ksort($arr);按照键名正序排序</p>

<p>krsort($arr);按照键名逆序排序</p>

<p>uksort($arr,&ldquo;function&rdquo;);使用用户自定义的比较函数对数组中的键名
进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）</p>

<p>自然排序法排序
natsort($arr);自然排序（忽略键名）
natcasesort($arr);自然排序（忽略大小写，忽略键名）</p>

<h5>七、数组的计算</h5>

<p>数组元素的求和</p>

<p>array_sum($arr);对数组内部的所有元素做求和运算
数组的合并</p>

<p>array_merge($arr1,$arr2);合并两个或多个数组（相同的字符串键名，后面的覆盖前面的，相同的数字键名，后面的不会做覆盖操作，而是附加到后面）</p>

<p>“+”$arr1+$arr2;对于相同的键名只保留后一个</p>

<p>array_merge_recursive($arr1,$arr2); 递归合并操作，如果数组中有相同的字符串键名，这些值将被合并到一个数组中去。如果一个值本身是一个数组，将按照相应的键名把它合并为另一个数组。当数组 具有相同的</p>

<p>数组键名时，后一个值将不会覆盖原来的值，而是附加到后面</p>

<p>数组的差集</p>

<p>array_diff($arr1,$arr2);返回差集结果数组</p>

<p>array_diff_assoc($arr1,$arr2,$arr3);返回差集结果数组，键名也做比较</p>

<p>数组的交集</p>

<p>array_intersect($arr1,$arr2);返回交集结果数组</p>

<p>array_intersect_assoc($arr1,$arr2);返回交集结果数组，键名也做比较</p>

<h5>八、其他的数组函数</h5>

<p>range(0,12);创建一个包含指定范围单元的数组</p>

<p>array_unique($arr);移除数组中重复的值，新的数组中会保留原始的键名</p>

<p>array_reverse($arr,TRUE);返回一个单元顺序与原数组相反的数组，如果第二个参数为TRUE保留原来的键名</p>

<p>//srand((float)microtime()*10000000); 随机种子触发器</p>

<p>array_rand($arr,2);从数组中随机取出一个或 多个元素</p>

<p>shuffle($arr);将数组的顺序打乱</p>

<p>本类函数允许用多种方法来操作数组和与之交互。数组的本质是储存，管理
和操作一组变量。</p>

<p>PHP 支持一维和多维数组，可以是用户创建或由另一个函数创建。有一些特定的数据库处理函数可以从数据库查询中生成数组，还有一些函数返回数组。</p>

<p>array_change_key_case — 返回字符串键名全为小写或大写的数组</p>

<p>array_chunk — 将一个数组分割成多个</p>

<p>array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>

<p>array_count_values — 统计数组中所有的值出现的次数</p>

<p>array_diff_assoc — 带索引检查计算数组的差集</p>

<p>array_diff_key — 使用键名比较计算数组的差集</p>

<p>array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集</p>

<p>array_diff_ukey — 用回调函数对键名比较计算数组的差集</p>

<p>array_diff — 计算数组的差集</p>

<p>array_fill_keys — Fill an array with values, specifying keys</p>

<p>array_fill — 用给定的值填充数组</p>

<p>array_filter — 用回调函数过滤数组中的单元</p>

<p>array_flip — 交换数组中的键和值</p>

<p>array_intersect_assoc — 带索引检查计算数组的交集</p>

<p>array_intersect_key — 使用键名比较计算数组的交集</p>

<p>array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比
较索引</p>

<p>array_intersect_ukey — 用回调函数比较键名来计算数组的交集</p>

<p>array_intersect — 计算数组的交集</p>

<p>array_key_exists — 检查给定的键名或索引是否存在于数组中</p>

<p>array_keys — 返回数组中所有的键名</p>

<p>array_map — 将回调函数作用到给定数组的单元上</p>

<p>array_merge_recursive — 递归地合并一个或多个数组</p>

<p>array_merge — 合并一个或多个数组</p>

<p>array_multisort — 对多个数组或多维数组进行排序</p>

<p>array_pad — 用值将数组填补到指定长度</p>

<p>array_pop — 将数组最后一个单元弹出（出栈）</p>

<p>array_product — 计算数组中所有值的乘积</p>

<p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>

<p>array_rand — 从数组中随机取出一个或多个单元</p>

<p>array_reduce — 用回调函数迭代地将数组简化为单一的值</p>

<p>array_reverse — 返回一个单元顺序相反的数组</p>

<p>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</p>

<p>array_shift — 将数组开头的单元移出数组</p>

<p>array_slice — 从数组中取出一段</p>

<p>array_splice — 把数组中的一部分去掉并用其它值取代</p>

<p>array_sum — 计算数组中所有值的和</p>

<p>array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据</p>

<p>array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数
据和索引</p>

<p>array_udiff — 用回调函数比较数据来计算数组的差集</p>

<p>array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比
较数据</p>

<p>array_uintersect_uassoc — 带索引检查计算数组的交集，用回调函数比较数据和索引</p>

<p>array_uintersect — 计算数组的交集，用回调函数比较数据</p>

<p>array_unique — 移除数组中重复的值</p>

<p>array_unshift — 在数组开头插入一个或多个单元</p>

<p>array_values — 返回数组中所有的值</p>

<p>array_walk_recursive — 对数组中的每个成员递归地应用用户函数</p>

<p>array_walk — 对数组中的每个成员应用用户函数</p>

<p>array — 新建一个数组</p>

<p>arsort — 对数组进行逆向排序并保持索引关系</p>

<p>asort — 对数组进行排序并保持索引关系</p>

<p>compact — 建立一个数组，包括变量名和它们的值</p>

<p>count — 计算数组中的单元数目或对象中的属性个数</p>

<p>current — 返回数组中的当前单元</p>

<p>each — 返回数组中当前的键／值对并将数组指针向前移动一步</p>

<p>end — 将数组的内部指针指向最后一个单元</p>

<p>extract — 从数组中将变量导入到当前的符号表</p>

<p>in_array — 检查数组中是否存在某个值</p>

<p>key — 从关联数组中取得键名</p>

<p>krsort — 对数组按照键名逆向排序</p>

<p>ksort — 对数组按照键名排序</p>

<p>list — 把数组中的值赋给一些变量</p>

<p>natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序</p>

<p>natsort — 用“自然排序”算法对数组排序</p>

<p>next — 将数组中的内部指针向前移动一位</p>

<p>pos — current() 的别名</p>

<p>prev — 将数组的内部指针倒回一位</p>

<p>range — 建立一个包含指定范围单元的数组</p>

<p>reset — 将数组的内部指针指向第一个单元</p>

<p>rsort — 对数组逆向排序</p>

<p>shuffle — 将数组打乱</p>

<p>sizeof — count() 的别名</p>

<p>sort — 对数组排序</p>

<p>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关
联</p>

<p>uksort — 使用用户自定义的比较函数对数组中的键名进行排序</p>

<p>usort — 使用用户自定义的比较函数对数组中的值进行排序</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于php的正则表达式]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/zhengzebiaodashio/"/>
    <updated>2016-08-31T18:19:28+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/zhengzebiaodashio</id>
    <content type="html"><![CDATA[<p>&ldquo;^[0-9]<em>[1-9][0-9]</em>$"　　 //正整数</p>

<p>&ldquo;^((-\d+)|(0+))$"　　 //非正整数（负整数 + 0）</p>

<p>&ldquo;^-[0-9]<em>[1-9][0-9]</em>$"　　 //负整数</p>

<p>&ldquo;^-?\d+$"　　　　 //整数</p>

<p>&ldquo;^\d+(.\d+)?$"　　 //非负浮点数（正浮点数 + 0）</p>

<p>&ldquo;^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$"　　 //正浮点数</p>

<p>&ldquo;^((-\d+(.\d+)?)|(0+(.0+)?))$&rdquo;//非正浮点数（负浮点数 + 0）
&ldquo;^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$"　　 //负浮点数</p>

<p>&ldquo;^(-?\d+)(.\d+)?$"　　 //浮点数</p>

<p>&ldquo;^[A-Za-z]+$"　　 //由26个英文字母组成的字符串</p>

<p>&ldquo;^[A-Z]+$"　　 //由26个英文字母的大写组成的字符串</p>

<p>&ldquo;^[a-z]+$"　　 //由26个英文字母的小写组成的字符串</p>

<p>&ldquo;^[A-Za-z0-9]+$"　　 //由数字和26个英文字母组成的字符串</p>

<p>&ldquo;^\w+$"　　 //由数字、26个英文字母或者下划线组成的字符串</p>

<p>&ldquo;^[\w-]+(.[\w-]+)*@[\w-]+(.[\w-]+)+$"　　　　//email地址</p>

<p>&ldquo;^[a-zA-z]+://(\w+(-\w+)<em>)(.(\w+(-\w+)</em>))<em>(\?\S</em>)?$&rdquo;//url
/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))$/ // 年-月-日
/^((0([1-9]{1}))|(1[1|2]))/((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年</p>

<p>&ldquo;^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$&rdquo; //Emil
/^((+?[0-9]{2,4}-[0-9]{3,4}-)|([0-9]{3,4}-))?([0-9]{7,8})(-[0-9]+)?$/ //电话号码</p>

<p>&ldquo;^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$&rdquo; //IP地址</p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配HTML标记的正则表达式：/&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/>/</p>

<p>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：^[a-zA-z]+://(\w+(-\w+)<em>)(\.(\w+(-\w+)</em>))<em>(\?\S</em>)?$</p>

<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>

<p>匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</p>

<p>匹配腾讯QQ号：^[1-9]<em>[1-9][0-9]</em>$</p>

<p>利用正则表达式限制网页表单里的文本框输入内容：</p>

<p>用正则表达式限制只能输入中文：onkeyup=&ldquo;value=value.replace(/[^u4E00-u9FA5]/g,&lsquo;&rsquo;)&rdquo; onbeforepaste=&ldquo;clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^u4E00-u9FA5]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入全角字符：
onkeyup=&ldquo;value=value.replace(/[^uFF00-uFFFF]/g,&lsquo;&rsquo;)&rdquo;</p>

<p>onbeforepaste=&ldquo;clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^uFF00-uFFFF]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入数字：onkeyup=&ldquo;value=value.replace(/[^d]/g,&lsquo;&rsquo;) "onbeforepaste="clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^d]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>用正则表达式限制只能输入数字和英文：
onkeyup=&ldquo;value=value.replace(/[W]/g,&lsquo;&rsquo;) "onbeforepaste="clipboardData.setData(&lsquo;text&rsquo;,clipboardData.getData(&lsquo;text&rsquo;).replace(/[^d]/g,&lsquo;&rsquo;))&rdquo;</p>

<p>=========常用正则式</p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配HTML标记的正则表达式：/&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/>/</p>

<p>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</p>

<p>匹配IP地址的正则表达式：/(\d+).(\d+).(\d+).(\d+)/g //</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：<a href="http://">http://</a>(/[\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]*)?</p>

<p>sql语句：<sup>select|drop|delete|create|update|insert</sup>.*$</p>

<p>非负整数：^\d+$</p>

<p>正整数：^[0-9]<em>[1-9][0-9]</em>$</p>

<p>非正整数：<sup>(-\d+)|(0+)</sup>$</p>

<p>负整数：^-[0-9]<em>[1-9][0-9]</em>$</p>

<p>整数：^-?\d+$</p>

<p>非负浮点数：^\d+(.\d+)?$</p>

<p>正浮点数：<sup>(0-9)+.[0-9]<em>[1-9][0-9]</em></sup>|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</p>

<p>非正浮点数：<sup>(-\d+.\d+)?</sup>|(0+(.0+)?))$</p>

<p>负浮点数：<sup>-((正浮点数正则式))</sup>$</p>

<p>英文字符串：^[A-Za-z]+$</p>

<p>英文大写串：^[A-Z]+$</p>

<p>英文小写串：^[a-z]+$</p>

<p>英文字符数字串：^[A-Za-z0-9]+$</p>

<p>英数字加下划线串：^\w+$</p>

<p>E-mail地址：^[\w-]+(.[\w-]+)<em>@[\w-]+(.[\w-]+)+$
URL：^[a-zA-Z]+://(\w+(-\w+)</em>)(.(\w+(-\w+)<em>))</em>(\?\s<em>)?$ 或：<sup>http</sup>:\/\/[A-Za-z0-9]+.[A-Za-z0-9]+[\/=\?%-&amp;_~`@[]\&lsquo;:+!]</em>([^&lt;>\&ldquo;\&rdquo;])*$</p>

<p>邮政编码：^[1-9]\d{5}$ 中文：^[\u0391-\uFFE5]+$</p>

<p>电话号码：<sup>((\d{2,3}))|(\d{3}-)</sup>?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}(-\d{1,4})?$</p>

<p>手机号码：<sup>((\d{2,3}))|(\d{3}-)</sup>?13\d{9}$</p>

<p>双字节字符(包括汉字在内)：^\x00-\xff</p>

<p>匹配首尾空格：(^\s<em>)|(\s</em>$)（像vbscript那样的trim函数）</p>

<p>匹配HTML标记：&lt;(.<em>)>.</em>&lt;\/\1>|&lt;(.*) \/></p>

<p>匹配空行：\n[\s| ]*\r</p>

<p>提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) <em>= </em>(&lsquo;|&ldquo;)?(\w|\|\/|.)+(&rsquo;|&rdquo;| *|>)?</p>

<p>提取信息中的邮件地址：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>提取信息中的图片链接：(s|S)(r|R)(c|C) <em>= </em>(&lsquo;|&ldquo;)?(\w|\|\/|.)
+(&rsquo;|&rdquo;| *|>)?</p>

<p>提取信息中的IP地址：(\d+).(\d+).(\d+).(\d+)</p>

<p>提取信息中的中国手机号码：(86)<em>0</em>13\d{9}</p>

<p>提取信息中的中国固定电话号码：((\d{3,4})|\d{3,4}-|\s)?\d{8}</p>

<p>提取信息中的中国电话号码（包括移动和固定电话):((\d{3,4})|\d{3,4}-|\s)?\d{7,14}</p>

<p>提取信息中的中国邮政编码：[1-9]{1}(\d+){5}</p>

<p>提取信息中的浮点数（即小数):(-?\d*).?\d+</p>

<p>提取信息中的任何数字:(-?\d*)(.\d+)? IP：(\d+).(\d+).(\d+).(\d+)</p>

<p>电话区号：/^0\d{2,3}$/</p>

<p>腾讯QQ号：^[1-9]<em>[1-9][0-9]</em>$</p>

<p>帐号(字母开头，允许5-16字节，允许字母数字下划线)：
^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>

<p>中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转】php的数组各种用法（下）]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/php-arrays2/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/php-arrays2</id>
    <content type="html"><![CDATA[<h5>3.1 什么是数组</h5>

<p>一个标量变量就是一个用来存储数值的命名区域。同样，一个数组就是一个用来存储一系列变量值的命名区域，因此，可以使用数组组织标量变量。
存储在数组中的值称为数组元素。每个数组元素有一个相关的索引（也称为关键字），它可以用来访问元素。在大多数编程语言中，数组都具有数字索引，而且这些索个通常是从0或1开始的。</p>

<h5>3.2 数字索引数组</h5>

<p>在PHP中，数字索引的默认值是从0开始的，当然也可以改变它。</p>

<p>3.2.1 数字索引数组的初始化
<code>
$porducts = array( 'Tires', 'Oil', 'Spark Plugs' );
</code>
就像echo语句一样，array()实际上是一个语言结构，而不是一个函数。
根据对数组内容的需求不同，可能不需要再像以上例子一样对它们进行手工的初始化操作。如果所需数据保存在另一个数组中，可以使用运算符“=”简单地将数组复制到另一个数组。</p>

<p>如果需要将按升序排列的数字保存在一个数组中，可以使用range()函数自动创建这个数组。如下这行代码将创建一个从1到10的数字数组：$numbers = range(1,10);</p>

<p>range()函数具有一个可选的第三个参数，这个参数允许设定值之间的步骤。例如，如需建立一个1到10之间的奇数数组，可以使用如下代码：
<code>
$odds = range(1,10,2);
</code>
range()函数也可以对字符进行操作，如：$letters = range(&lsquo;a&rsquo;, &lsquo;z&rsquo;);</p>

<p>3.2.2 访问数组的内容
要访问一个变量的内容，可以直接使用其名称。如果该变量是一个数组，可以使用变量名称和关键字或索引的组合来访问其内容。关键字或索引将指定</p>

<p>我们要访问的变量。索引在变量名称后面用方括号括起来。</p>

<p>在默认的情况下，0元素是数组的第一个元素。
请注意，虽然PHP的字符串解析功能非常强大和智能，但是可能会引起混淆。当你将数组或其他变量嵌入双引号中的字符串时，如果不能正确解释它们，可以将它们放置在双引号之外，或者查找第4章的“字符串操作与正则表达式”获得更复杂的语法。</p>

<p>就像PHP的其他变量一样，数组不需要预先初始化或创建。在第一次使用它们的时候，它们会自动创建。</p>

<p>3.2.3. 使用循环访问数组
由于数组使用有序的数字作为索引，所以使用一个for循环就可以很容易地显示数组的内容。
<code>
for ($i=0; $i&lt;3; $i++)
echo "$products[$i]";
</code>
使用一个简单的循环就可以访问每个元素是数字索引数组的一个非常好的特性。也可以使用foreach循环，这个循环语句是专门为数组而设计的。如：
<code>
foreach ($products as $current)
echo $current. ' ';
</code></p>

<h5>3.3 使用不同索引的数组</h5>

<p>PHP还支持相关数组。在相关数组中，可以将每个变量值与任何关键字或索引关联起来。</p>

<p>3.3.1 初始化相关数组
如下所示的代码可以创建一个以产品名称作为关键字、以价格作为值的相关数组：
<code>
$prices = array( 'Tires'=&gt;100, 'Oil'=&gt;10, 'Spark Plugs'=&gt;4 );
</code>
关键字和值之间的符号只是一个大于号与等于符号。</p>

<p>3.3.2 访问数组元素
同样，可以使用变量名称和关键字来访问数组的内容。例如$prices[&lsquo;Tires&rsquo;]。</p>

<p>3.3.3 使用循环语句
因为相关数组的索引不是数字，因此无法在for循环语句中使用一个简单的计数器对数组进行操作。但是可以使用foreach循环或list()和each()结构。</p>

<p>当使用foreach循环语句对相关数组进行操作时，foreach()循环具有不同的结构。可以按如下方式使用关键字：
<code>
foreach ($prices as $key =&gt; $value)
echo $key.'=&gt;'.$value.'&lt;br /&gt;';
</code>
如下所示的代码将使用each()结构打印$prices数组的内容：
<code>
while( $element = each($prices))
{
echo $element['key'];
echo ' - ';
echo $element['value'];
echo '&lt;br /&gt;';
}
</code>
each()函数将返回数组的当前元素，并将下一个元素作为当前元素。因为在while循环中调用each()函数，它将按顺序返回数组中每个元素，并且当它到达数组末尾时，循环操作将终止。</p>

<p>在 这段代码中，变量$element是一个数组。当调用each()时，它将返回一个带有4个数值和4个指向数组位置的索引的数组。位置key和0包含了当 前元素的关键字，而位置value和1包含了当前元素的值。虽然这与选哪一种方法没什么不同，但我们选择了使用命名位置，而不是数字索引位置。
此外，还有一种更为高级和常见的方式来完成相同的操作。函数list()可以用来将一个数组分解为一系列的值。可以按照如下方式将函数each()返回的两个值分开：list( $product, $price) = each( $price);</p>

<p>以上代码使用each()从$prices数组中取出当前元素，并且将它作为数组返回，然后再指向下一个元素。它还使用list()将从each()返回的数组中所包含0、1两个元素变为两个名为$product和$price的新蛮量。
我们可以循环遍历整个$prices数组，使用如下所示的简短脚本显示它的内容：
<code>
while(list($prodct, $pirce) = each($prices))
echo "$product - $price&lt;br /&gt;";
</code>
这段代码的输出结果与前面脚本的输出结果相同，但它更容易阅读，因为list()允许为新变量命名。</p>

<p>需要注意的一点是，当使用each()函数时，数组将记录当前元素。如果希望在相同的脚本中两次使用该数组，就必须使用函数reset()将当前元素重新设置到数组开始处。要再次遍历prices数组，可以使用如下所示的代码：
<code>
reset($prices);
while(list($product, $price) = each($prices))
echo "$product - $price&lt;br /&gt;";
</code></p>

<h5>3.4 数组操作符</h5>

<p>+联合，==等价，===恒等，!=不等价，&lt;>不等价，!==不恒等。
联合操作符尝试将$b中的元素添加到$a的末尾。如果$b中的元素与$a中的一些元素具有相同的索引，它们将不会被添加。即$a中的元素将不会被覆盖。</p>

<h5>3.5 多维数组</h5>

<p>数组不一定就是一个关键字和值的简单列表——数组中的每个位置还可以保存另一个数组。使用这种方法，可以创建一个二维数组。可以把二维数组当成一个矩阵，或者是一个具有宽度和高度或者行和列的网络。</p>

<h5>3.6 数组排序</h5>

<p>3.6.1 使用sort()函数
sort()函数是区分字母大小写的。所有的大家字母都在小写字母的前面。所以‘A’小于‘Z’，而'Z'小于‘a’。</p>

<p>该函数的第二个参数是可选的。这个可选参数可以传递SORT_REGULAR（默认值）、SORT_NUMERIC或SORT_STRING。指定排序类型 的功能是非常有用的，例如，当要比较可能包含有数字2和12的字符串时。从数学角度看，2要小于12，但是作为字符串，‘12’却要小于‘2’。</p>

<p>3.6.2 使用asort()函数和ksort()函数对相关数组排序
函数asort()根据数组的每个元素值进行排序。ksort()函数是按关键字排序而不是按值排序。</p>

<p>3.6.3 反向排序
函数rsort()将一个一维数字索引数组按降序排序。函数arsort()将一个一维相关数组按每个元素值的降序排序。函数krsort()针根据数组元素的关键字将一维数组按照降序排序。</p>

<p>为了访问一个一维数组中的数据，需要使用数组的名称和元素的索引，除了一个元素具有两个索引——行和列外，二维数组和一维数组是类似的。
可以使用双重for循环来实现同样的效果：
<code>
for ( $row=0; $row&lt;3; $row++ )
{
for ( $column=0; $column&lt;3; $column++ )
{
echo '|'.$products[$row][$column];
|
echo '|&lt;br /&gt;';
}
</code>
如果对一个大数组使用这种代码，那么将简洁得多。
你可能更喜欢创建列名称来代替数字。可以使用如下代码：
<code>
$products = array ( array ( 'Code'=&gt;'TIR', 'Descrīption'=&gt;'Tires', 'Price'=&gt;100 ), array ( 'Code'=&gt;'OIL', 'Descrīption'=&gt;'Oil', 'Price'=&gt;10 ), array ( 'Code'=&gt;'SPK', 'Descrīption'=&gt;'Spark Plugs', 'Price'=&gt;4 ) };
</code>
如果希望检索单个值，那么使用这个数组会容易得多。请记住，将所描述的内容保存到用它的名 称命名的列中，与将其保存到所谓的第一列中相比，前者更容易记忆。使用描述性索引，不需要记住某个元素是存放在[x][y]位置的。使用一对有意义的行和 列的名称作为索引可以使用你很容易找到所需的数据。</p>

<p>然后，我们却不能使用一个简单的for循环按顺序遍历每一列。可以使用for循环遍历外部的数 字索引数组$products。$products数组的每一行都是一个具有描述性索引的数组。在while循环中使用each()和list()函数， 可以遍历整个内部数组。因此，需要一个内嵌有while循环的for循环。
<code>
for ( $row = 0; $row &lt; 3; $row++ }
{
while ( list ( $key, $value ) = each ( $products[$row] ) )
{
echo "|$value";
}
echo '|&lt;br /&gt;';
}
</code>
三维数组具有高、宽、深的概念。如果能轻松地将一个二维数组想像成一个有行和列的表格，那么就可以将三维数组想像成一堆像这样的表格。每个元素可以通过层、行和列进行引用。</p>

<p>根据创建多维数组的方法，可以创建四维、五维或六维数组。在PHP中，并没有设置数组维数的限制，但人们很难设想一个多于三维的数组。大多数的实际问题在逻辑上只需要使用三维或者更少维的数组结构就可以了。</p>

<h5>3.7 多维数组的排序</h5>

<p>对 多于一维的数组进行排序，或者不按字母和数字的顺序进行排，要复杂得多。PHP知道如何比较两个数字或字符串，但在多维数组中，每个元素都是一个数组。 PHP不知道如何比较两个数组，所以需要建立一个比较它们的方法。在大多数情况下，单词和数字的顺序是显而易见的——但对于复杂的对象，问题就会多一些。</p>

<p>3.7.1 用户定义排序
usort()中的“u”代表“user”，因为这个函数要求传入用户定义的比较函数。asort和ksort对应的版本uasort()和uksort()也要求传入用户定义的比较函数。</p>

<p>类似于asort()，当对非数字索引数组的值进行排序时，uasort()才会被使用。如果值是简单的数字或文本则可以使用asort。如果要比较的值像数组一样复杂，可以定义一个比较函数，然后使用uasort()。</p>

<p>类似于ksort()，当对非数字索引数组的关键字进行排序时才使用uksort()。如果值是简单的数字或文本就使用ksort。如果要比较的对象像数组一样复杂，可以定义一个比较函数，然后使用uksort()。</p>

<p>3.7.2 反向用户排序
函数sort()、asort()和ksort()都分别对应一个带字母“r”的反向排序函数。用户定义的排序没有反向变体，但可以对一个多维数组进行反向排序。</p>

<h5>3.8 对数组进行重新排序</h5>

<p>3.8.1 使用shuffle()函数
在PHP的早期版本中，shuffle()要求调用srand()函数时首先提供一个随机数生成器。如今，这个步骤已经不再需要了。</p>

<p>如果这个函数对你非常重要，可以在程序中应用该函数之前在服务器上测试它。</p>

<p>由于并不需要真正重新排序整个数组，使用array_rand()函数可以实现相同的功能。</p>

<p>3.8.2 使用array_reverse()函数
array_reverse()函数使用一个数组作参数，返回一个内容与参数数组相同但顺序相反的数组。</p>

<p>因为单独使用range()函数将创建一个升序序列，所以必须使用sort()函数或array_reverse()函数将数组中的数字变为降序。或者，也可以使用for循环通过一次一个元素的方式创建这个数组。如：
<code>
$numbers = array();
for ($i=10; $i&gt;0; $i--)
array_push( $numbers, $i );
</code>
一个for循环可以像这样按降序方式运行。可以将计数器</p>

<p>一个for循环可以像这样按降序方式运行。可以将计数器的初始值设为一个大数，在每次循环末尾使用运算符“&ndash;”将计数器减1。</p>

<p>在这里，我们创建了一个空数组，然后使用array_push()函数将每个新元素添加到数组的末尾。请注意，和array_push()相反的函数是array_pop()，这个函数用来删除并返回数组末尾的一个元素。</p>

<p>或者，也可以使用array_reverse()函数将由range()函数所创建的数组进行反向排序。</p>

<p>请注意，array_reverse()函数将返回一个原数组修改后的副本。如果不再需要原来的数组，比如在这个例子中，可以用新的副本覆盖原来的版本。
如果数据只是一系列的整数，可以通过将-1作为range()函数的第三个可选调参数，以相反的顺序创建该数组。</p>

<h5>3.9 从文件载入数组</h5>

<p>使用file()函数将整个文件载入一个数组中。文件中的每行则成为数组中的一个元素。使用了count()函数来统计数组中的元素个数。
<code>
explode("\t", $orders[$i])
</code>
explode()函数可以将传入的字符串分割成一个个小块。每个制表符成为两个元素之间的断点。这个函数的可选参数limit可以用来限制被返回的最大块数。</p>

<p>可以使用许多方法从字符串中提取数字。在这里，我们使用了intval()函数。它可以将一个字符串转化成一个整数。这个转换是相当智能化的，它可以忽略某些部分，例如标签就不能转换成数字。</p>

<h5>3.10 执行其他的数组操作</h5>

<p>3.10.1 在数组中浏览：each()、current()、reset()、end()、next()、pos()和prev()</p>

<p>前面已经提到，每个数组都有一个内部指针指向数组中的当前元素。当使用函数each()时，就间接地使用了这个指针，但是也可以直接使用和操作这个指针。</p>

<p>如果创建一个新数组，那么当前指针就将被初始化，并指向数组的第一个元素。</p>

<p>调用next()或each()将使指针前移一个元素。调用each($array_name)会在指针前移一个位置之前返回当前元素。next()函数则有些不同——调用next($array_name)是将指针前移，然后再返回新的当前元素。</p>

<p>调用end($array_name)可以将指针移到数组末尾。</p>

<p>要反向遍历一个数组，可以使用end()和prev()函数。prev()函数和next()函数相反。它是将当前指针往回移一个位置然后再返回新的当前元素。</p>

<p>3.10.2 对数组的每一个元素应用任何函数：array_walk()
array_walk()函数需要三个参数。第一个是arr，也就是需要处理的数组。第二个是func，也就是用户自定义并将作用于数组中每个元素的函数。第三个参数userdata是可选的，如果使用它，它可以作为一个参数传递给我们自己的函数。</p>

<p>看一个销微复杂点的例子：
<code>
function my_multiply(&amp;$value, $key, $factor)
{
$value *= $factor;
}
array_walk(&amp;$array, 'my_multiply', 3);
</code>
在这里，我们定义了一个名为my_multiply()的函数，它可以用所提供的乘法因子去乘以数组中的每个元素。</p>

<p>此外，还有一个需要注意的问题是传递毵数$value的方式。在my_multiply()的函数定义中，变量前面的地址符（&amp;）意味着$value是按引用方式传递的。按引用方式传递允许函数修改数组的内容。</p>

<p>3.10.3 统计数组元素个数：count()、sizeof()
和array_count_values()</p>

<p>count()函数和sizeof()函数具有同样的用途，都可以返回数组元素的个数。可以得到一个常规标量变量中的元素个数，如果传递给这个函数的数组是一个空数组，或者是一个没有经过设定的变量，返回的数组个数就是0。
如 果调用array_count_values($array)，这个函数将会统计每个特定的值在数组$array中出现过的次数（这就是数组的基数集）。 这个函数将返回一个包含频率表的相关数组。这个数组包含数组$array中的所有值，并以这些值作为相关数组的关键字。每个关键字所对应的数值就是关键字 在数组$array中出现的次数。</p>

<p>3.10.4 将数组转换成标量变量：extract()
对于一个非数字索引数组，而该数组又有许多关键字-值对，可以使用函数extract()将它们转换成一系列的标量变量。</p>

<p>函数extract()的作用是通过一个数组创建一系列的标量变量，这些变量的名称必须是数组中关键字的名称，而变量值则是数组中的值。</p>

<p>extract()函数具有两个可选参数：extract_type和prefix。变量extract_type将告诉extract()函数如何处理冲突。有时可能已经存在一个和数组关键字同名的变量，该函数的默认操作是覆盖已有的变量。
两个最常用的选项是EXTR_OVERWRITE（默认值）和EXTR_PREFIX_ALL。当知道会发生特定的冲突并且希望跳过该关键字或要给它加上前缀时，可能会用到其他选项。</p>

<p>extract()可以提取出一个元素，该元素的关键字必须是一个有效的变量名称，这就意味着以数字开始或包含空格的关键字将被跳过。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下thinkphp的Nginx配置文件]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp</id>
    <content type="html"><![CDATA[<h5>linux下thinkphp的Nginx配置文件(亲测有效)</h5>

<p>一个配置文件，完美支持普通,兼容,pathinfo,rewrite4种url模式，常见的静态文件404时也不会再去跑一遍fastcgi浪费资源。
```
server {
    listen       80;
    server_name  thinkphp.lo;
    root /var/www;
    index  index.html index.htm index.php;</p>

<pre><code>error_page  404              /404.html;
location = /404.html {
    return 404 'Sorry, File not Found!';
}
error_page  500 502 503 504  /50x.html;
location = /50x.html {
    root   /usr/share/nginx/html; # windows用户替换这个目录
}

location / {
    try_files $uri @rewrite;
}

location @rewrite {
    set $static 0;
    if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
        set $static 1;
    }

    if ($static = 0) {
        rewrite ^/(.*)$ /index.php?s=/$1;
    }

}

location ~ /Uploads/.*\.php$ {
    deny all;
}

location ~ \.php/ {
   if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { }
   fastcgi_pass 127.0.0.1:9000;
   include fastcgi_params;
   fastcgi_param SCRIPT_NAME     $1;
   fastcgi_param PATH_INFO       $2;
   fastcgi_param SCRIPT_FILENAME $document_root$1;
}

location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

location ~ /\.ht {
    deny  all;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境
<code>
[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
</code>
2：关掉防火墙
<code>
[root@10-4-14-168 html]# chkconfig iptables off
</code>
3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）
```</p>

<h1>wget <a href="http://www.atomicorp.com/installers/atomic">http://www.atomicorp.com/installers/atomic</a></h1>

<h1>sh ./atomic</h1>

<h1>yum check-update</h1>

<pre><code>4：安装开发包和库文件　(安装下面四个)
</code></pre>

<h1>yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng</h1>

<p>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel</p>

<p>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2</p>

<p>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
<code>
5：卸载已安装的apache、mysql、php
</code></p>

<h1>yum remove httpd</h1>

<h1>yum remove mysql</h1>

<h1>yum remove php</h1>

<pre><code>6：安装nginx
</code></pre>

<h1>yum install nginx</h1>

<h1>service nginx start</h1>

<h1>chkconfig &ndash;levels 235 nginx on</h1>

<p>//设2、3、5级别开机启动
<code>
7：安装mysql
</code></p>

<h1>yum install mysql mysql-server mysql-devel</h1>

<h1>service mysqld start</h1>

<h1>chkconfig &ndash;levels 235 mysqld on</h1>

<p>登陆MySQL删除空用户，修改root密码
mysql>select user,host,password from mysql.user;</p>

<p>mysql>drop user &lsquo;&rsquo;@localhost;</p>

<p>mysql>update mysql.user set password = PASSWORD(&lsquo;*********&rsquo;) where user=&lsquo;root&rsquo;;</p>

<p>mysql>flush privileges;
<code>
8：安装php
</code></p>

<h1>yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap</h1>

<p>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
//安装php和所需组件使PHP支持MySQL、FastCGI模式</p>

<h1>yum install  php-tidy php-common php-devel php-fpm php-mysql</h1>

<h1>service php-fpm start</h1>

<h1>chkconfig &ndash;levels 235 php-fpm on</h1>

<pre><code>9：配置nginx支持php
</code></pre>

<h1>mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</h1>

<p>//将配置文件改为备份文件</p>

<h1>cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</h1>

<p>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件</p>

<p>//修改nginx配置文件，添加fastcgi支持</p>

<h1>vi /etc/nginx/nginx.conf</h1>

<p>index index.php index.html index.htm;
//加入index.php</p>

<p>location ~ .php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
//将以上代码注释去掉，并修改成nginx默认路径
<code>
10：配置php
</code>
//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
[root@CentOS ~]# vi /etc/php.ini
<code>
11：重启nginx php-fpm
</code></p>

<h1>service nginx restart</h1>

<h1>service php-fpm restart</h1>

<pre><code class="　　">12：建立info.php文件
</code></pre>

<h1>vi /usr/share/nginx/html/info.php</h1>

<p>&lt;?php
   phpinfo();
?>
<code>
13：测试nginx是否解析php
</code>
本地浏览器输入：192.168.12.103/info.php
显示php界面  环境搭建成功
```
注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
</feed>
