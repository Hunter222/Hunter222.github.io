<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-08-31T16:07:37+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境
<code>
[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
</code>
2：关掉防火墙
<code>
[root@10-4-14-168 html]# chkconfig iptables off
</code>
3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）
```</p>

<h1>wget <a href="http://www.atomicorp.com/installers/atomic">http://www.atomicorp.com/installers/atomic</a></h1>

<h1>sh ./atomic</h1>

<h1>yum check-update</h1>

<pre><code>4：安装开发包和库文件　(安装下面四个)
</code></pre>

<h1>yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng</h1>

<p>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel</p>

<p>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2</p>

<p>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
<code>
5：卸载已安装的apache、mysql、php
</code></p>

<h1>yum remove httpd</h1>

<h1>yum remove mysql</h1>

<h1>yum remove php</h1>

<pre><code>6：安装nginx
</code></pre>

<h1>yum install nginx</h1>

<h1>service nginx start</h1>

<h1>chkconfig &ndash;levels 235 nginx on</h1>

<p>//设2、3、5级别开机启动
<code>
7：安装mysql
</code></p>

<h1>yum install mysql mysql-server mysql-devel</h1>

<h1>service mysqld start</h1>

<h1>chkconfig &ndash;levels 235 mysqld on</h1>

<p>登陆MySQL删除空用户，修改root密码
mysql>select user,host,password from mysql.user;</p>

<p>mysql>drop user &lsquo;&rsquo;@localhost;</p>

<p>mysql>update mysql.user set password = PASSWORD(&lsquo;*********&rsquo;) where user=&lsquo;root&rsquo;;</p>

<p>mysql>flush privileges;
<code>
8：安装php
</code></p>

<h1>yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap</h1>

<p>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
//安装php和所需组件使PHP支持MySQL、FastCGI模式</p>

<h1>yum install  php-tidy php-common php-devel php-fpm php-mysql</h1>

<h1>service php-fpm start</h1>

<h1>chkconfig &ndash;levels 235 php-fpm on</h1>

<pre><code>9：配置nginx支持php
</code></pre>

<h1>mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</h1>

<p>//将配置文件改为备份文件</p>

<h1>cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</h1>

<p>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件</p>

<p>//修改nginx配置文件，添加fastcgi支持</p>

<h1>vi /etc/nginx/nginx.conf</h1>

<p>index index.php index.html index.htm;
//加入index.php</p>

<p>location ~ .php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
//将以上代码注释去掉，并修改成nginx默认路径
<code>
10：配置php
</code>
//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
[root@CentOS ~]# vi /etc/php.ini
<code>
11：重启nginx php-fpm
</code></p>

<h1>service nginx restart</h1>

<h1>service php-fpm restart</h1>

<pre><code class="　　">12：建立info.php文件
</code></pre>

<h1>vi /usr/share/nginx/html/info.php</h1>

<p>&lt;?php
   phpinfo();
?>
<code>
13：测试nginx是否解析php
</code>
本地浏览器输入：192.168.12.103/info.php
显示php界面  环境搭建成功
```
注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax对xml接收]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-xml/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-xml</id>
    <content type="html"><![CDATA[<h5>ajax负责请求xml和接收xml信息，dom负责处理xml信息</h5>

<p>效果：
<img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fj7vwgj20h307ign8.jpg" alt="haha" /></p>

<p>代码如下：</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function f1(){
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){    
                    var xmldom = xhr.responseXML;//这里有点不同
                    var std = xmldom.getElementsByTagName('student');                 
                    var s = "";
                    for(var i=0; i&lt;std.length; i++){
                        var nm = std[i].getElementsByTagName('name')[0].innerHTML;
                        var age = std[i].getElementsByTagName('age')[0].firstChild.wholeText;
                        var addr = std[i].getElementsByTagName('addr')[0].innerHTML;                       
                        s += "名称："+nm+"--年龄："+age+"--地址："+addr+"&lt;br /&gt;";
                    }
                    document.body.innerHTML += s;
                }
            }
            xhr.open('get','./stu.xml');
            xhr.send(null);
        }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;ajax+javascript实现对xml处理&lt;/h2&gt;
        &lt;input type="button" value="处理" onclick="f1()" /&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>xml代码（stu.xml）：
<code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;students&gt;
    &lt;student&gt;
        &lt;name&gt;张三&lt;/name&gt;
        &lt;age&gt;22&lt;/age&gt;
        &lt;addr&gt;河北&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;苏您退&lt;/name&gt;
        &lt;age&gt;21&lt;/age&gt;
        &lt;addr&gt;河南&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;李阳&lt;/name&gt;
        &lt;age&gt;44&lt;/age&gt;
        &lt;addr&gt;山东&lt;/addr&gt;
    &lt;/student&gt;
&lt;/students&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax的无刷新分页显示]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-page/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-page</id>
    <content type="html"><![CDATA[<h5>1.具体实现</h5>

<p>记录总条数</p>

<p>每页显示条数</p>

<p>总页数：向上取整(总条数/每页显示条数)</p>

<p>limit  偏移量((当前页码-1)*每页条数),长度;</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=1">http://%E7%BD%91%E5%9D%80/data.php?page=1</a>  (limit 0,7)</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=2">http://%E7%BD%91%E5%9D%80/data.php?page=2</a>  (limit 7,7)</p>

<p><a href="http://%E7%BD%91%E5%9D%80/data.php?page=3">http://%E7%BD%91%E5%9D%80/data.php?page=3</a>  (limit 14,7)</p>

<p>ajax对象.open(‘get’,地址<a href="http://%E7%BD%91%E5%9D%80/data.php?page=2">http://%E7%BD%91%E5%9D%80/data.php?page=2</a>);</p>

<p>利用ajax无刷新方式获得第2页信息</p>

<h5>效果图：</h5>

<p><img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fijiy3j20t40c7gpy.jpg" alt="photo" /></p>

<h5>2.代码</h5>

<p>分页代码：
<code>
&lt;?php
//传统分页效果实现
//连接数据库，获得数据，做分页显示
header("content-type:text/html;charset=utf-8");
$link = mysqli_connect('localhost','root','123456','shop');
//mysqli_select_db('shop', $link);
mysqli_query($link, 'set names utf8');
echo &lt;&lt;&lt;eof
    &lt;style type="text/css"&gt;
        table {width:700px; border:1px solid black; margin:auto; border-collapse:collapse;}
        td {border:1px solid black; }
    &lt;/style&gt;
    &lt;table&gt;
        &lt;tr style='font-weight:bold'&gt;&lt;td&gt;序号&lt;/td&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;价格&lt;/td&gt;&lt;td&gt;数量&lt;/td&gt;&lt;td&gt;重量&lt;/td&gt;&lt;/tr&gt;
eof;
//① 引入分页类
include "./page.class.php";
//② 获得总条数、每页显示条数
$sql = "select * from sw_goods";
$qry = mysqli_query($link,$sql);
$total = mysqli_num_rows($qry); //总条数
$per = 7;//每页条数
//③ 实例化分页类对象
$page = new Page($total, $per);
//④ 设置sql语句获得每页信息
//$page-&gt;limit:分页类会根据当前页码参数自动把 "limit 偏移量,长度" 信息给拼装好
$sql3 = "select * from sw_goods order by goods_id ".$page-&gt;limit;
$qry3 = mysqli_query($link,$sql3);
//⑤ 获得页码列表信息
$page_list = $page -&gt; fpage(array(3,4,5,6,7,8));
$page_num = isset($_GET['page'])?$_GET['page']:1;
$num = ($page_num-1)*$per+1;
while($rst3 = mysqli_fetch_assoc($qry3)){
    printf("&lt;tr&gt;");
    printf("&lt;td&gt;%d&lt;/td&gt;",$num);
    printf("&lt;td&gt;%s&lt;/td&gt;",$rst3['goods_name']);
    printf("&lt;td&gt;%s&lt;/td&gt;",$rst3['goods_price']);
    printf("&lt;td&gt;%d&lt;/td&gt;",$rst3['goods_number']);
    printf("&lt;td&gt;%d&lt;/td&gt;",$rst3['goods_weight']);
    printf("&lt;/tr&gt;");
    $num++;
}
printf("&lt;tr&gt;&lt;td colspan='5'&gt;%s&lt;/td&gt;&lt;/tr&gt;",$page_list);
echo "&lt;/table&gt;";
</code>
ajax代码：
<code>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        //函数封装，实现ajax获取分页信息
        function showpage(url){
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){
                    document.getElementById('result').innerHTML = xhr.responseText;
                }
            }
            xhr.open('get',url);
            xhr.send(null);
        }
        window.onload = function(){
            showpage('./data.php');
        }
        &lt;/script&gt;
        &lt;style type="text/css"&gt;
        h2,div {width:700px; margin:auto;}
        h2 {text-align:center;}
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;ajax无刷新分页&lt;/h2&gt;
        &lt;div id="result"&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code>
用于分页包装好的代码：
<code>
&lt;?php
    class Page {
        private $total; //数据表中总记录数
        private $listRows; //每页显示行数
        private $limit;
        private $uri;
        private $pageNum; //页数
        private $config=array('header'=&gt;"个记录", "prev"=&gt;"上一页", "next"=&gt;"下一页", "first"=&gt;"首 页", "last"=&gt;"尾 页");
        private $listNum=8;
        /*
         * $total
         * $listRows
         */
        public function __construct($total, $listRows=10, $pa=""){
            $this-&gt;total=$total;
            $this-&gt;listRows=$listRows;
            $this-&gt;uri=$this-&gt;getUri($pa);
            $this-&gt;page=!empty($_GET["page"]) ? $_GET["page"] : 1;
            $this-&gt;pageNum=ceil($this-&gt;total/$this-&gt;listRows);
            $this-&gt;limit=$this-&gt;setLimit();
        }
        private function setLimit(){
            return "Limit ".($this-&gt;page-1)*$this-&gt;listRows.", {$this-&gt;listRows}";
        }
        private function getUri($pa){
            $url=$_SERVER["REQUEST_URI"].(strpos($_SERVER["REQUEST_URI"], '?')?'':"?").$pa;
            $parse=parse_url($url);
            if(isset($parse["query"])){
                parse_str($parse['query'],$params);
                unset($params["page"]);
                $url=$parse['path'].'?'.http_build_query($params);              
            }
            return $url;
        }
        function __get($args){
            if($args=="limit")
                return $this-&gt;limit;
            else
                return null;
        }
        private function start(){
            if($this-&gt;total==0)
                return 0;
            else
                return ($this-&gt;page-1)*$this-&gt;listRows+1;
        }
        private function end(){
            return min($this-&gt;page*$this-&gt;listRows,$this-&gt;total);
        }
        private function first(){
            $html = "";
            if($this-&gt;page==1)
                $html.='';
            else
                $html.="&amp;nbsp;&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page=1\")'&gt;{$this-&gt;config["first"]}&lt;/a&gt;&amp;nbsp;&amp;nbsp;";
            return $html;
        }
        private function prev(){
            $html = "";
            if($this-&gt;page==1)
                $html.='';
            else
                $html.="&amp;nbsp;&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page=".($this-&gt;page-1)."\")'&gt;{$this-&gt;config["prev"]}&lt;/a&gt;&amp;nbsp;&amp;nbsp;";
            return $html;
        }
        private function pageList(){
            $linkPage="";       
            $inum=floor($this-&gt;listNum/2);  
            for($i=$inum; $i&gt;=1; $i--){
                $page=$this-&gt;page-$i;
                if($page&lt;1)
                    continue;
                //$linkPage.="&amp;nbsp;&lt;a href='{$this-&gt;uri}&amp;page={$page}'&gt;{$page}&lt;/a&gt;&amp;nbsp;";
                $linkPage.="&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page={$page}\")'&gt;{$page}&lt;/a&gt;&amp;nbsp;";
            }   
            $linkPage.="&amp;nbsp;{$this-&gt;page}&amp;nbsp;";
            for($i=1; $i&lt;=$inum; $i++){
                $page=$this-&gt;page+$i;
                if($page&lt;=$this-&gt;pageNum){
                    //$linkPage.="&amp;nbsp;&lt;a href='{$this-&gt;uri}&amp;page={$page}'&gt;{$page}&lt;/a&gt;&amp;nbsp;";
                    //把a超链接变为是showpage函数(ajax执行)调用
                    $linkPage.="&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page={$page}\")'&gt;{$page}&lt;/a&gt;&amp;nbsp;";
                }else{
                    break;
                }
            }
            return $linkPage;
        }
        private function next(){
            $html = "";
            if($this-&gt;page==$this-&gt;pageNum)
                $html.='';
            else
                $html.="&amp;nbsp;&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page=".($this-&gt;page+1)."\")'&gt;{$this-&gt;config["next"]}&lt;/a&gt;&amp;nbsp;&amp;nbsp;";
            return $html;
        }
        private function last(){
            $html = "";
            if($this-&gt;page==$this-&gt;pageNum)
                $html.='';
            else
                $html.="&amp;nbsp;&amp;nbsp;&lt;a href='javascript:showpage(\"{$this-&gt;uri}&amp;page=".($this-&gt;pageNum)."\")'&gt;{$this-&gt;config["last"]}&lt;/a&gt;&amp;nbsp;&amp;nbsp;";
            return $html;
        }
        private function goPage(){
            return '&amp;nbsp;&amp;nbsp;&lt;input type="text" onkeydown="javascript:if(event.keyCode==13){var page=(this.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.value;showpage(\''.$this-&gt;uri.'&amp;page=\'+page+\'\')}" value="'.$this-&gt;page.'" style="width:25px"&gt;&lt;input type="button" value="GO" onclick="javascript:var page=(this.previousSibling.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.previousSibling.value;showpage(\''.$this-&gt;uri.'&amp;page=\'+page+\'\')"&gt;&amp;nbsp;&amp;nbsp;';
            //return '&amp;nbsp;&amp;nbsp;&lt;input type="text" onkeydown="javascript:if(event.keyCode==13){var page=(this.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.value;location=\''.$this-&gt;uri.'&amp;page=\'+page+\'\'}" value="'.$this-&gt;page.'" style="width:25px"&gt;&lt;input type="button" value="GO" onclick="javascript:var page=(this.previousSibling.value&gt;'.$this-&gt;pageNum.')?'.$this-&gt;pageNum.':this.previousSibling.value;location=\''.$this-&gt;uri.'&amp;page=\'+page+\'\'"&gt;&amp;nbsp;&amp;nbsp;';
        }
        function fpage($display=array(0,1,2,3,4,5,6,7,8)){
            $html[0]="&amp;nbsp;&amp;nbsp;共有&lt;b&gt;{$this-&gt;total}&lt;/b&gt;{$this-&gt;config["header"]}&amp;nbsp;&amp;nbsp;";
            $html[1]="&amp;nbsp;&amp;nbsp;每页显示&lt;b&gt;".($this-&gt;end()-$this-&gt;start()+1)."&lt;/b&gt;条，本页&lt;b&gt;{$this-&gt;start()}-{$this-&gt;end()}&lt;/b&gt;条&amp;nbsp;&amp;nbsp;";
            $html[2]="&amp;nbsp;&amp;nbsp;&lt;b&gt;{$this-&gt;page}/{$this-&gt;pageNum}&lt;/b&gt;页&amp;nbsp;&amp;nbsp;";        
            $html[3]=$this-&gt;first();
            $html[4]=$this-&gt;prev();
            $html[5]=$this-&gt;pageList();
            $html[6]=$this-&gt;next();
            $html[7]=$this-&gt;last();
            $html[8]=$this-&gt;goPage();
            $fpage='';
            foreach($display as $index){
                $fpage.=$html[$index];
            }
            return $fpage;
        }
    }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax的get和post请求方式示例]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-get-post/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-get-post</id>
    <content type="html"><![CDATA[<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function checkname(){
            //ajax负责抓取用户名信息，传递给服务器进行校验
            //获得用户名信息
            var nm = document.getElementById('username').value;
            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){
                    alert(xhr.responseText);
                }
            }
            xhr.open('get','./04.php?name='+nm);
            xhr.send(null);
        }
        &lt;/script&gt;
        &lt;style type="text/css"&gt;
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;get方式请求&lt;/h2&gt;
        &lt;form method="post" action=""&gt;
            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>js代码(post方式)：</p>

<pre><code>function checkname() 
                    {
                        //ajax负责抓取用户名信息，传递给服务器进行校验
                        //获得用户名信息
                        var nm = document.getElementById('username').value;
                        nm = encodeURIComponent(nm);
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                alert(xhr.responseText);
                            }
                        }
                        xhr.open('post', './06.php');
                        //post模仿form表单把数据传递给服务器端
                        //form表单把数据组织为“xml格式”传递给服务器端
                        //把传递的数据组织为请求字符串
                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
                        //(要在open()方法执行之后设置)
                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
                        var info = "name=" + nm;
                        xhr.send(info);
                     }
</code></pre>

<p>06.php
<code>
&lt;?php
header('Content-Type:text/html;charset=utf8');
$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
if($_POST['name']==$sq['Username']){
    echo '正确';
}  else {
    echo '不正确';
}
</code>&mdash;
layout: post
title: &ldquo;ajax的无刷新分页显示&rdquo;
date: 2016-07-27 17:19:26 +0800
comments: true</p>

<h2>categories: [js,php,ajax]</h2>

<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function checkname(){
            //ajax负责抓取用户名信息，传递给服务器进行校验
            //获得用户名信息
            var nm = document.getElementById('username').value;
            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){
                    alert(xhr.responseText);
                }
            }
            xhr.open('get','./04.php?name='+nm);
            xhr.send(null);
        }
        &lt;/script&gt;
        &lt;style type="text/css"&gt;
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;get方式请求&lt;/h2&gt;
        &lt;form method="post" action=""&gt;
            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>js代码(post方式)：</p>

<pre><code>function checkname() 
                    {
                        //ajax负责抓取用户名信息，传递给服务器进行校验
                        //获得用户名信息
                        var nm = document.getElementById('username').value;
                        nm = encodeURIComponent(nm);
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                alert(xhr.responseText);
                            }
                        }
                        xhr.open('post', './06.php');
                        //post模仿form表单把数据传递给服务器端
                        //form表单把数据组织为“xml格式”传递给服务器端
                        //把传递的数据组织为请求字符串
                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
                        //(要在open()方法执行之后设置)
                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
                        var info = "name=" + nm;
                        xhr.send(info);
                     }
</code></pre>

<p>06.php
<code>
&lt;?php
header('Content-Type:text/html;charset=utf8');
$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
if($_POST['name']==$sq['Username']){
    echo '正确';
}  else {
    echo '不正确';
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[49点php编程重点知识]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/php/"/>
    <updated>2016-07-27T10:46:19+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/php</id>
    <content type="html"><![CDATA[<h5>php是门复杂而繁琐的语言，想要学好它，那必须得下点功夫，春哥技术博客总结一些提高PHP编程效率的要点，供大家学习参考。</h5>

<h5>前奏：用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”（译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号）</h5>

<p>1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。</p>

<p>2、$row[’id’] 的速度是$row[id]的7倍。</p>

<p>3、echo 比 print 快，并且使用echo的多重参数（译注：指用逗号而不是句点）代替字符串连接，比如echo $str1,$str2。</p>

<p>4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。</p>

<p>5、注销那些不用的变量尤其是大数组，以便释放内存。</p>

<p>6、尽量避免使用<strong>get，</strong>set，__autoload。</p>

<p>7、require_once()代价昂贵。</p>

<p>8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。</p>

<p>9、如果你想知道脚本开始执行（译注：即服务器端收到客户端请求）的时刻，使用$_SERVER[‘REQUEST_TIME’]要好于time()。</p>

<p>10、函数代替正则表达式完成相同功能。</p>

<p>11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。</p>

<p>12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替</p>

<p>换的参数。</p>

<p>13、使用选择分支语句（译注：即switch case）好于使用多个if，else if语句。</p>

<p>14、用@屏蔽错误消息的做法非常低效，极其低效。</p>

<p>15、打开apache的mod_deflate模块，可以提高网页的浏览速度。</p>

<p>16、数据库连接当使用完毕时应关掉，不要用长连接。</p>

<p>17、错误消息代价昂贵。</p>

<p>18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。</p>

<p>19、递增一个全局变量要比递增一个局部变量慢2倍。</p>

<p>20、递增一个对象属性（如：$this->prop++）要比递增一个局部变量慢3倍。</p>

<p>21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。</p>

<p>22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度（其程度相当于递增一个局部变量）。PHP大概会检查看是否存在全局变量。</p>

<p>23、方法调用看来与类中定义的方法的数量无关，因为我（在测试方法之前和之后都）添加了10个方法，但性能上没有变化。</p>

<p>24、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p>

<p>25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。</p>

<p>26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。</p>

<p>27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。</p>

<p>28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做</p>

<p>重新编译。</p>

<p>29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构（C的内置数据结构，用于存储PHP变</p>

<p>量）中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化（译注：指函数名小写化，PHP不区分函数名大小写）、哈希查找，会跟随</p>

<p>被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。</p>

<p>（举例如下）</p>

<p>if (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }</p>

<p>（与下面的技巧做比较）</p>

<p>if (!isset($foo{5})) { echo “Foo is too short”$$ }</p>

<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多</p>

<p>开销。</p>

<p>30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需</p>

<p>要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样</p>

<p>。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商（ISPs）和服务器。</p>

<p>31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。</p>

<p>32、并非要用类实现所有的数据结构，数组也很有用。</p>

<p>33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码？</p>

<p>34、当你需要时，你总能把代码分解成方法。</p>

<p>35、尽量采用大量的PHP内置函数。</p>

<p>36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。</p>

<p>37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。</p>

<p>38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。</p>

<p>39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多！但是要注意file_get_contents在打开一个URL文件时候的</p>

<p>PHP版本问题；</p>

<p>40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的；</p>

<p>41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过)；</p>

<p>42、尽可能的使用PHP内部函数（但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊！）；</p>

<p>43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧？)；</p>

<p>44、多维数组尽量不要循环嵌套赋值；</p>

<p>45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式；</p>

<p>46、foreach效率更高，尽量用foreach代替while和for循环；</p>

<p>47、用单引号替代双引号引用字符串；</p>

<p>48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”；</p>

<p>49、对global变量，应该用完就unset()掉；</p>
]]></content>
  </entry>
  
</feed>
