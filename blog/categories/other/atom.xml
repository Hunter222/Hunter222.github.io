<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-09-01T22:20:14+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[chenjingxiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[验证码工具类的使用]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma/"/>
    <updated>2016-09-01T18:19:27+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</id>
    <content type="html"><![CDATA[<p>1.工具类：</p>

<pre><code>&lt;?php
class Captcha
{
    private $charset = 'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789';
 // 随机因子，
    private $code;
 // 验证码字符串
    private $codelen = 4;
 // 验证码长度
    private $width = 150;
 // 宽度
    private $height = 40;
 // 高度
    private $img;
 // 图形资源句柄
    private $font;
 // 指定的字体
    private $fontsize = 20;
 // 指定字体大小
    private $fontcolor;
 // 指定字体颜色                        
    // 构造方法初始化
    public function __construct($codelen = 4, $width = 150, $height = 40, $fontsize = 20, $font = "elephant.ttf")
    {
        $this-&gt;codelen = $codelen;
        $this-&gt;width = $width;
        $this-&gt;height = $height;
        $this-&gt;fontsize = $fontsize;
        $this-&gt;font = $font;
    }
    // 生成随机码
    private function createCode()
    {
        $_len = strlen($this-&gt;charset) - 1;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;code .= $this-&gt;charset[mt_rand(0, $_len)];
        }
    }
    // 生成背景
    private function createBg()
    {
        $this-&gt;img = imagecreatetruecolor($this-&gt;width, $this-&gt;height);
        $color = imagecolorallocate($this-&gt;img, mt_rand(157, 255), mt_rand(157, 255), mt_rand(157, 255));
        imagefilledrectangle($this-&gt;img, 0, $this-&gt;height, $this-&gt;width, 0, $color);
    }  
    // 生成文字
    private function createFont()
    {
        $_x = $this-&gt;width / $this-&gt;codelen;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;fontcolor = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imagettftext($this-&gt;img, $this-&gt;fontsize, mt_rand(- 30, 30), $_x * $i + mt_rand(1, 5), $this-&gt;height / 1.4, $this-&gt;fontcolor, $this-&gt;font, $this-&gt;code[$i]);
        }
    }
    // 生成线条、雪花
    private function createLine()
    {
        for ($i = 0; $i &lt; 6; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imageline($this-&gt;img, mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), $color);
        }
        for ($i = 0; $i &lt; 100; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));
            imagestring($this-&gt;img, mt_rand(1, 5), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), '*', $color);
        }
    }
    // 输出
    private function outPut()
    {
        header('Content-type:image/png');
        imagepng($this-&gt;img);
        imagedestroy($this-&gt;img);
    }
    // 对外生成
    public function generateCode()
    {
        $this-&gt;createBg();
        $this-&gt;createCode();
        $this-&gt;createLine();
        $this-&gt;createFont();
        $this-&gt;outPut();
    }   
    // 获取验证码
    public function getCode()
    {
        return strtolower($this-&gt;code);
    }
}
//调用实例
//$c = new Captcha();
//$c-&gt;generateCode();
//$_SESSION['captcha'] = $c-&gt;getCode();
</code></pre>

<p>2.在php代码中调用：</p>

<pre><code>//验证码
    public function yanzhengmaAction() {
        //调用Captcha类
        $this-&gt;library("Captcha");
        $c = new Captcha(4,142,30);
        $c-&gt;generateCode();
        $_SESSION['yanzhengma'] = $c-&gt;getCode();
    }
</code></pre>

<p>3.在HTML网页中代码：</p>

<pre><code>&lt;td colspan="2" align="right"&gt;&lt;img src="index.php?p=admin&amp;c=login&amp;a=yanzhengma" width="142" height="30" alt="验证码图片" border="1" onclick= this.src="index.php?p=admin&amp;c=login&amp;a=yanzhengma&amp;"+Math.random() style="cursor: pointer;" title="看不清？点击更换另一个验证码。" /&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php常用的防黑客攻击的几种情况]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-sql-xss/"/>
    <updated>2016-09-01T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-sql-xss</id>
    <content type="html"><![CDATA[<h6>1.防止暴力破解</h6>

<p>Get方式恶意攻击，（dos），通常硬件的方式来防止，防火墙。
Post方式暴力破解，从程序的角度来防止，最通用的方法就是增加验证码(验证码使用文章：<a href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma">http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</a>)。</p>

<p>注意：验证码常见错误：</p>

<ol>
<li><p>字体文件的位置不对</p></li>
<li><p>由于在生成验证码的时候，使用了header()函数，它有一个特点，它之前不能有任何的输出，包括空格。解决办法，从index.php开始查找，凡是被包含进来的文件都需要查找</p></li>
<li><p>还需要注意一个的，就是你的文件编码要确保是 utf-8的，而不是带BOM头的utf-8。</p></li>
</ol>


<h6>2.防sql注入</h6>

<p>黑客通过在表单中填入特殊的字符或者是url中增加特殊的字符，然后想数据库发起请求，拼凑出sql语句，达到攻击的目的。</p>

<p>有两种形式：</p>

<p>Post表单提交；防止方式：1.MD5加密密码，2.使用addslashes函数给特殊字符单引号添加反斜杠</p>

<p>Get，url传参；防止方式：url传回的<em>GET[&lsquo;&rsquo;]加上1，如：$pages = $</em>GET[&lsquo;id&rsquo;]+1</p>

<p>凡是是用户提交的信息，都是不能相信的，都需要进行处理，其中之一就是转义。
也就意味着在所有的 收集表单信息的地方，都要调用 addslashes函数。当要转义数组时需要批量处理，代码如下：</p>

<pre><code>//批量转义
function  deepslashes($data){
    //判断$data形式
    if (empty($data)){
        return $data;
    }
    //遍历数组
    return is_array($data) ? array_map('deepslashes', $data) : addslashes($data);
}
</code></pre>

<h6>3.xss攻击</h6>

<p>Xss: cross site script 跨站脚本攻击</p>

<p>Css 被占用，表示样式表</p>

<p>恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。</p>

<p>防止方法：使用Htmlspecialchars函数 和  htmlentites函数把特殊字符转义，批量处理的示例代码如下：</p>

<pre><code>//批量实体转义
   function deepspecialchars($data){
       if (empty($data)){
           return $data;
       }
       return is_array($data) ? array_map('deepspecialchars', $data) : htmlspecialchars($data);
   }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下thinkphp的Nginx配置文件]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp</id>
    <content type="html"><![CDATA[<h5>linux下thinkphp的Nginx配置文件(亲测有效)</h5>

<p>一个配置文件，完美支持普通,兼容,pathinfo,rewrite4种url模式，常见的静态文件404时也不会再去跑一遍fastcgi浪费资源。
```
server {
    listen       80;
    server_name  thinkphp.lo;
    root /var/www;
    index  index.html index.htm index.php;</p>

<pre><code>error_page  404              /404.html;
location = /404.html {
    return 404 'Sorry, File not Found!';
}
error_page  500 502 503 504  /50x.html;
location = /50x.html {
    root   /usr/share/nginx/html; # windows用户替换这个目录
}

location / {
    try_files $uri @rewrite;
}

location @rewrite {
    set $static 0;
    if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
        set $static 1;
    }

    if ($static = 0) {
        rewrite ^/(.*)$ /index.php?s=/$1;
    }

}

location ~ /Uploads/.*\.php$ {
    deny all;
}

location ~ \.php/ {
   if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { }
   fastcgi_pass 127.0.0.1:9000;
   include fastcgi_params;
   fastcgi_param SCRIPT_NAME     $1;
   fastcgi_param PATH_INFO       $2;
   fastcgi_param SCRIPT_FILENAME $document_root$1;
}

location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

location ~ /\.ht {
    deny  all;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境
<code>
[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
</code>
2：关掉防火墙
<code>
[root@10-4-14-168 html]# chkconfig iptables off
</code>
3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）
```</p>

<h1>wget <a href="http://www.atomicorp.com/installers/atomic">http://www.atomicorp.com/installers/atomic</a></h1>

<h1>sh ./atomic</h1>

<h1>yum check-update</h1>

<pre><code>4：安装开发包和库文件　(安装下面四个)
</code></pre>

<h1>yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng</h1>

<p>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel</p>

<p>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2</p>

<p>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
<code>
5：卸载已安装的apache、mysql、php
</code></p>

<h1>yum remove httpd</h1>

<h1>yum remove mysql</h1>

<h1>yum remove php</h1>

<pre><code>6：安装nginx
</code></pre>

<h1>yum install nginx</h1>

<h1>service nginx start</h1>

<h1>chkconfig &ndash;levels 235 nginx on</h1>

<p>//设2、3、5级别开机启动
<code>
7：安装mysql
</code></p>

<h1>yum install mysql mysql-server mysql-devel</h1>

<h1>service mysqld start</h1>

<h1>chkconfig &ndash;levels 235 mysqld on</h1>

<p>登陆MySQL删除空用户，修改root密码
mysql>select user,host,password from mysql.user;</p>

<p>mysql>drop user &lsquo;&rsquo;@localhost;</p>

<p>mysql>update mysql.user set password = PASSWORD(&lsquo;*********&rsquo;) where user=&lsquo;root&rsquo;;</p>

<p>mysql>flush privileges;
<code>
8：安装php
</code></p>

<h1>yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap</h1>

<p>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
//安装php和所需组件使PHP支持MySQL、FastCGI模式</p>

<h1>yum install  php-tidy php-common php-devel php-fpm php-mysql</h1>

<h1>service php-fpm start</h1>

<h1>chkconfig &ndash;levels 235 php-fpm on</h1>

<pre><code>9：配置nginx支持php
</code></pre>

<h1>mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</h1>

<p>//将配置文件改为备份文件</p>

<h1>cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</h1>

<p>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件</p>

<p>//修改nginx配置文件，添加fastcgi支持</p>

<h1>vi /etc/nginx/nginx.conf</h1>

<p>index index.php index.html index.htm;
//加入index.php</p>

<p>location ~ .php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
//将以上代码注释去掉，并修改成nginx默认路径
<code>
10：配置php
</code>
//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
[root@CentOS ~]# vi /etc/php.ini
<code>
11：重启nginx php-fpm
</code></p>

<h1>service nginx restart</h1>

<h1>service php-fpm restart</h1>

<pre><code class="　　">12：建立info.php文件
</code></pre>

<h1>vi /usr/share/nginx/html/info.php</h1>

<p>&lt;?php
   phpinfo();
?>
<code>
13：测试nginx是否解析php
</code>
本地浏览器输入：192.168.12.103/info.php
显示php界面  环境搭建成功
```
注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax对xml接收]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-xml/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-xml</id>
    <content type="html"><![CDATA[<h5>ajax负责请求xml和接收xml信息，dom负责处理xml信息</h5>

<p>效果：
<img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fj7vwgj20h307ign8.jpg" alt="haha" /></p>

<p>代码如下：</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function f1(){
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){    
                    var xmldom = xhr.responseXML;//这里有点不同
                    var std = xmldom.getElementsByTagName('student');                 
                    var s = "";
                    for(var i=0; i&lt;std.length; i++){
                        var nm = std[i].getElementsByTagName('name')[0].innerHTML;
                        var age = std[i].getElementsByTagName('age')[0].firstChild.wholeText;
                        var addr = std[i].getElementsByTagName('addr')[0].innerHTML;                       
                        s += "名称："+nm+"--年龄："+age+"--地址："+addr+"&lt;br /&gt;";
                    }
                    document.body.innerHTML += s;
                }
            }
            xhr.open('get','./stu.xml');
            xhr.send(null);
        }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;ajax+javascript实现对xml处理&lt;/h2&gt;
        &lt;input type="button" value="处理" onclick="f1()" /&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>xml代码（stu.xml）：
<code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;students&gt;
    &lt;student&gt;
        &lt;name&gt;张三&lt;/name&gt;
        &lt;age&gt;22&lt;/age&gt;
        &lt;addr&gt;河北&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;苏您退&lt;/name&gt;
        &lt;age&gt;21&lt;/age&gt;
        &lt;addr&gt;河南&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;李阳&lt;/name&gt;
        &lt;age&gt;44&lt;/age&gt;
        &lt;addr&gt;山东&lt;/addr&gt;
    &lt;/student&gt;
&lt;/students&gt;
</code></p>
]]></content>
  </entry>
  
</feed>
