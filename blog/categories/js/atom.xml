<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-07-27T17:43:25+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ajax的get和post请求方式示例]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax</id>
    <content type="html"><![CDATA[<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。</p>

<pre><code>post方式是把form表单的数据给请求出来以xml形式传递给服务器
</code></pre>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<pre><code class="javascritp js代码 ">  function checkname() {
                        //ajax负责抓取用户名信息，传递给服务器进行校验

                        //获得用户名信息
                        var nm = document.getElementById('username').value;
                        nm = encodeURIComponent(nm);
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                alert(xhr.responseText);
                            }
                        }
                        xhr.open('post', './06.php');
                        //post模仿form表单把数据传递给服务器端
                        //form表单把数据组织为“xml格式”传递给服务器端
                        //把传递的数据组织为请求字符串

                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
                        //(要在open()方法执行之后设置)
                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');

                        var info = "name=" + nm;
                        xhr.send(info);
                    }
</code></pre>
]]></content>
  </entry>
  
</feed>
