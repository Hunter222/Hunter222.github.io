<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Html | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-09-04T19:10:11+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[chenjingxiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[验证码工具类的使用]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma/"/>
    <updated>2016-09-01T18:19:27+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</id>
    <content type="html"><![CDATA[<p>1.工具类：</p>

<pre><code>&lt;?php
class Captcha
{
    private $charset = 'abcdefghkmnprstuvwxyzABCDEFGHKMNPRSTUVWXYZ23456789';
 // 随机因子，
    private $code;
 // 验证码字符串
    private $codelen = 4;
 // 验证码长度
    private $width = 150;
 // 宽度
    private $height = 40;
 // 高度
    private $img;
 // 图形资源句柄
    private $font;
 // 指定的字体
    private $fontsize = 20;
 // 指定字体大小
    private $fontcolor;
 // 指定字体颜色                        
    // 构造方法初始化
    public function __construct($codelen = 4, $width = 150, $height = 40, $fontsize = 20, $font = "elephant.ttf")
    {
        $this-&gt;codelen = $codelen;
        $this-&gt;width = $width;
        $this-&gt;height = $height;
        $this-&gt;fontsize = $fontsize;
        $this-&gt;font = $font;
    }
    // 生成随机码
    private function createCode()
    {
        $_len = strlen($this-&gt;charset) - 1;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;code .= $this-&gt;charset[mt_rand(0, $_len)];
        }
    }
    // 生成背景
    private function createBg()
    {
        $this-&gt;img = imagecreatetruecolor($this-&gt;width, $this-&gt;height);
        $color = imagecolorallocate($this-&gt;img, mt_rand(157, 255), mt_rand(157, 255), mt_rand(157, 255));
        imagefilledrectangle($this-&gt;img, 0, $this-&gt;height, $this-&gt;width, 0, $color);
    }  
    // 生成文字
    private function createFont()
    {
        $_x = $this-&gt;width / $this-&gt;codelen;
        for ($i = 0; $i &lt; $this-&gt;codelen; $i ++) {
            $this-&gt;fontcolor = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imagettftext($this-&gt;img, $this-&gt;fontsize, mt_rand(- 30, 30), $_x * $i + mt_rand(1, 5), $this-&gt;height / 1.4, $this-&gt;fontcolor, $this-&gt;font, $this-&gt;code[$i]);
        }
    }
    // 生成线条、雪花
    private function createLine()
    {
        for ($i = 0; $i &lt; 6; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(0, 156), mt_rand(0, 156), mt_rand(0, 156));
            imageline($this-&gt;img, mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), $color);
        }
        for ($i = 0; $i &lt; 100; $i ++) {
            $color = imagecolorallocate($this-&gt;img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));
            imagestring($this-&gt;img, mt_rand(1, 5), mt_rand(0, $this-&gt;width), mt_rand(0, $this-&gt;height), '*', $color);
        }
    }
    // 输出
    private function outPut()
    {
        header('Content-type:image/png');
        imagepng($this-&gt;img);
        imagedestroy($this-&gt;img);
    }
    // 对外生成
    public function generateCode()
    {
        $this-&gt;createBg();
        $this-&gt;createCode();
        $this-&gt;createLine();
        $this-&gt;createFont();
        $this-&gt;outPut();
    }   
    // 获取验证码
    public function getCode()
    {
        return strtolower($this-&gt;code);
    }
}
//调用实例
//$c = new Captcha();
//$c-&gt;generateCode();
//$_SESSION['captcha'] = $c-&gt;getCode();
</code></pre>

<p>2.在php代码中调用：</p>

<pre><code>//验证码
    public function yanzhengmaAction() {
        //调用Captcha类
        $this-&gt;library("Captcha");
        $c = new Captcha(4,142,30);
        $c-&gt;generateCode();
        $_SESSION['yanzhengma'] = $c-&gt;getCode();
    }
</code></pre>

<p>3.在HTML网页中代码：</p>

<pre><code>&lt;td colspan="2" align="right"&gt;&lt;img src="index.php?p=admin&amp;c=login&amp;a=yanzhengma" width="142" height="30" alt="验证码图片" border="1" onclick= this.src="index.php?p=admin&amp;c=login&amp;a=yanzhengma&amp;"+Math.random() style="cursor: pointer;" title="看不清？点击更换另一个验证码。" /&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php常用的防黑客攻击的几种情况]]></title>
    <link href="http://hunter222.github.io/blog/2016/09/01/php-sql-xss/"/>
    <updated>2016-09-01T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/09/01/php-sql-xss</id>
    <content type="html"><![CDATA[<h6>1.防止暴力破解</h6>

<p>Get方式恶意攻击，（dos），通常硬件的方式来防止，防火墙。
Post方式暴力破解，从程序的角度来防止，最通用的方法就是增加验证码(验证码使用文章：<a href="http://hunter222.github.io/blog/2016/09/01/php-yanzhengma">http://hunter222.github.io/blog/2016/09/01/php-yanzhengma</a>)。</p>

<p>注意：验证码常见错误：</p>

<ol>
<li><p>字体文件的位置不对</p></li>
<li><p>由于在生成验证码的时候，使用了header()函数，它有一个特点，它之前不能有任何的输出，包括空格。解决办法，从index.php开始查找，凡是被包含进来的文件都需要查找</p></li>
<li><p>还需要注意一个的，就是你的文件编码要确保是 utf-8的，而不是带BOM头的utf-8。</p></li>
</ol>


<h6>2.防sql注入</h6>

<p>黑客通过在表单中填入特殊的字符或者是url中增加特殊的字符，然后想数据库发起请求，拼凑出sql语句，达到攻击的目的。</p>

<p>有两种形式：</p>

<p>Post表单提交；防止方式：1.MD5加密密码，2.使用addslashes函数给特殊字符单引号添加反斜杠</p>

<p>Get，url传参；防止方式：url传回的<em>GET[&lsquo;&rsquo;]加上1，如：$pages = $</em>GET[&lsquo;id&rsquo;]+1</p>

<p>凡是是用户提交的信息，都是不能相信的，都需要进行处理，其中之一就是转义。
也就意味着在所有的 收集表单信息的地方，都要调用 addslashes函数。当要转义数组时需要批量处理，代码如下：</p>

<pre><code>//批量转义
function  deepslashes($data){
    //判断$data形式
    if (empty($data)){
        return $data;
    }
    //遍历数组
    return is_array($data) ? array_map('deepslashes', $data) : addslashes($data);
}
</code></pre>

<h6>3.xss攻击</h6>

<p>Xss: cross site script 跨站脚本攻击</p>

<p>Css 被占用，表示样式表</p>

<p>恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。</p>

<p>防止方法：使用Htmlspecialchars函数 和  htmlentites函数把特殊字符转义，批量处理的示例代码如下：</p>

<pre><code>//批量实体转义
   function deepspecialchars($data){
       if (empty($data)){
           return $data;
       }
       return is_array($data) ? array_map('deepspecialchars', $data) : htmlspecialchars($data);
   }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax对xml接收]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-xml/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-xml</id>
    <content type="html"><![CDATA[<h5>ajax负责请求xml和接收xml信息，dom负责处理xml信息</h5>

<p>效果：
<img src="http://ww2.sinaimg.cn/mw690/710059dfgw1f7c5fj7vwgj20h307ign8.jpg" alt="haha" /></p>

<p>代码如下：</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function f1(){
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){    
                    var xmldom = xhr.responseXML;//这里有点不同
                    var std = xmldom.getElementsByTagName('student');                 
                    var s = "";
                    for(var i=0; i&lt;std.length; i++){
                        var nm = std[i].getElementsByTagName('name')[0].innerHTML;
                        var age = std[i].getElementsByTagName('age')[0].firstChild.wholeText;
                        var addr = std[i].getElementsByTagName('addr')[0].innerHTML;                       
                        s += "名称："+nm+"--年龄："+age+"--地址："+addr+"&lt;br /&gt;";
                    }
                    document.body.innerHTML += s;
                }
            }
            xhr.open('get','./stu.xml');
            xhr.send(null);
        }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;ajax+javascript实现对xml处理&lt;/h2&gt;
        &lt;input type="button" value="处理" onclick="f1()" /&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>xml代码（stu.xml）：
<code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;students&gt;
    &lt;student&gt;
        &lt;name&gt;张三&lt;/name&gt;
        &lt;age&gt;22&lt;/age&gt;
        &lt;addr&gt;河北&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;苏您退&lt;/name&gt;
        &lt;age&gt;21&lt;/age&gt;
        &lt;addr&gt;河南&lt;/addr&gt;
    &lt;/student&gt;
    &lt;student&gt;
        &lt;name&gt;李阳&lt;/name&gt;
        &lt;age&gt;44&lt;/age&gt;
        &lt;addr&gt;山东&lt;/addr&gt;
    &lt;/student&gt;
&lt;/students&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax的get和post请求方式示例]]></title>
    <link href="http://hunter222.github.io/blog/2016/07/27/ajax-get-post/"/>
    <updated>2016-07-27T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/07/27/ajax-get-post</id>
    <content type="html"><![CDATA[<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function checkname(){
            //ajax负责抓取用户名信息，传递给服务器进行校验
            //获得用户名信息
            var nm = document.getElementById('username').value;
            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){
                    alert(xhr.responseText);
                }
            }
            xhr.open('get','./04.php?name='+nm);
            xhr.send(null);
        }
        &lt;/script&gt;
        &lt;style type="text/css"&gt;
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;get方式请求&lt;/h2&gt;
        &lt;form method="post" action=""&gt;
            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>js代码(post方式)：</p>

<pre><code>function checkname() 
                    {
                        //ajax负责抓取用户名信息，传递给服务器进行校验
                        //获得用户名信息
                        var nm = document.getElementById('username').value;
                        nm = encodeURIComponent(nm);
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                alert(xhr.responseText);
                            }
                        }
                        xhr.open('post', './06.php');
                        //post模仿form表单把数据传递给服务器端
                        //form表单把数据组织为“xml格式”传递给服务器端
                        //把传递的数据组织为请求字符串
                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
                        //(要在open()方法执行之后设置)
                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
                        var info = "name=" + nm;
                        xhr.send(info);
                     }
</code></pre>

<p>06.php
<code>
&lt;?php
header('Content-Type:text/html;charset=utf8');
$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
if($_POST['name']==$sq['Username']){
    echo '正确';
}  else {
    echo '不正确';
}
</code>&mdash;
layout: post
title: &ldquo;ajax的无刷新分页显示&rdquo;
date: 2016-07-27 17:19:26 +0800
comments: true</p>

<h2>categories: [js,php,ajax]</h2>

<h5>1.两者的不同:</h5>

<p>① 给服务器传递数据量，get最多是2k
                       post原则没有限制，php.ini对其限制为8M</p>

<p>② 安全方面，post传递数据较安全</p>

<p>③ 传递数据的形式不一样
    get方式在url地址后边以请求字符串形式传递参数
    <a href="http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing">http://%E7%BD%91%E5%9D%80/index.php?name=tom&amp;age=23&amp;addr=beijing</a>
    蓝色部分就是请求字符串，就是一些“名-值”对，中间使用&amp;符号连接。
    post方式是把form表单的数据给请求出来以xml形式传递给服务器</p>

<h5>2.处理特殊符号函数：</h5>

<p>在浏览器的地址栏里边传递一些特殊符号信息，会被误解，例如 &amp;  =  空格  中文。</p>

<p>在php里边可以函数函数 urlencode()/urldecode()对特殊符号进行编码、反编码处理
(url_encode()可以把中文转变为浏览器可以识别的信息。转变之后的信息具体为%号后接两个十六进制数)</p>

<p>在javascript里边可以通过encodeURIComponent ()对特殊符号等信息进行编码。
经过以上红色函数编码的内容在服务器端可以正常接收，不需要反编码。</p>

<h5>3.ajax总结：</h5>

<p>1.ajax对象创建</p>

<p> var xhr = new XMLHttpRequest();</p>

<p> var xhr = new ActiveXObject(‘Msxml2.XMLHTTP.6.0’);</p>

<p>2.ajax对象属性</p>

<p>readyState</p>

<p>responseText</p>

<p>onreadystatechange</p>

<p>3.ajax对象方法</p>

<p>open()</p>

<p>send()</p>

<p>setRequestHeader()</p>

<h5>4.实例代码:</h5>

<p>代码（get方式）:</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;新建网页&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;meta name="description" content="" /&gt;
        &lt;meta name="keywords" content="" /&gt;
        &lt;script type="text/javascript"&gt;
        function checkname(){
            //ajax负责抓取用户名信息，传递给服务器进行校验
            //获得用户名信息
            var nm = document.getElementById('username').value;
            nm = encodeURIComponent(nm);//对浏览器容易混淆的信息进行编码处理
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4){
                    alert(xhr.responseText);
                }
            }
            xhr.open('get','./04.php?name='+nm);
            xhr.send(null);
        }
        &lt;/script&gt;
        &lt;style type="text/css"&gt;
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h2&gt;get方式请求&lt;/h2&gt;
        &lt;form method="post" action=""&gt;
            &lt;p&gt;用户名：&lt;input type="text" name="username" id="username" onblur="checkname()"&gt;&lt;/p&gt;
            &lt;p&gt;密码：&lt;input type="text" name="userpwd"&gt;&lt;/p&gt;
            &lt;p&gt;&lt;input type="submit" value="注册"&gt;&lt;/p&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>js代码(post方式)：</p>

<pre><code>function checkname() 
                    {
                        //ajax负责抓取用户名信息，传递给服务器进行校验
                        //获得用户名信息
                        var nm = document.getElementById('username').value;
                        nm = encodeURIComponent(nm);
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                alert(xhr.responseText);
                            }
                        }
                        xhr.open('post', './06.php');
                        //post模仿form表单把数据传递给服务器端
                        //form表单把数据组织为“xml格式”传递给服务器端
                        //把传递的数据组织为请求字符串
                        //以下方法设置header头信息，作用把传递的数据组织为xml格式
                        //(要在open()方法执行之后设置)
                        xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
                        var info = "name=" + nm;
                        xhr.send(info);
                     }
</code></pre>

<p>06.php
<code>
&lt;?php
header('Content-Type:text/html;charset=utf8');
$conn = mysqli_connect("localhost","root","1234567","db_liuyanben");
$sql=mysqli_query($conn,"select Username from tb_user where Username='".$_POST["name"]."'");
$sq = mysqli_fetch_array($sql, MYSQLI_BOTH);
if($_POST['name']==$sq['Username']){
    echo '正确';
}  else {
    echo '不正确';
}
</code></p>
]]></content>
  </entry>
  
</feed>
