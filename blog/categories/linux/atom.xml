<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-09-01T16:23:35+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[chenjingxiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux的基础语法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/linux-base/"/>
    <updated>2016-08-31T18:19:31+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/linux-base</id>
    <content type="html"><![CDATA[<h5>Linux的目录结构：</h5>

<p>/bin bin是Binary的缩写。这个目录存放着最经常使用的命令。</p>

<p>/boot这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>

<p>/dev dev是Device(设备)的缩写。该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p>

<p>/etc这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>

<p>/home用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>

<p>/lib这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>

<p>/lost+found这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>

<p>/media Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。</p>

<p>/mnt系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>

<p>/opt 这是给主机额外安装软件所摆放的目录。比如您安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>

<p>/proc这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping您的机器：
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all。/root该目录为系统管理员，也称作超级权限者的用户主目录。</p>

<p>/sbin s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>

<p>/selinux 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>

<p>/srv 该目录存放一些服务启动之后需要提取的数据。</p>

<p>/sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs ，sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。</p>

<p>/tmp这个目录是用来存放一些临时文件的。</p>

<p>/usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p>

<p>/usr/bin 系统用户使用的应用程序。</p>

<p>/usr/sbin 超级用户使用的比较高级的管理程序和系统守护程序。</p>

<p>/usr/src 内核源代码默认的放置目录。</p>

<p>/var这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>

<p>在Linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。/etc： 上边也提到了，这个是系统中的配置文件，如果您更改了该目录下的某个文件可能会导致系统不能启动。/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ 目录下的。值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用账户），而/sbin, /usr/sbin 则是给root使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p>

<h5>常用的linux命令大全：</h5>

<h6>#系统信息:</h6>

<p>arch 显示机器的处理器架构(1)</p>

<p>uname -m 显示机器的处理器架构(2)</p>

<p>uname -r 显示正在使用的内核版本</p>

<p>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</p>

<p>hdparm -i /dev/hda 罗列一个磁盘的架构特性</p>

<p>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作</p>

<p>cat /proc/cpuinfo 显示CPU info的信息</p>

<p>cat /proc/interrupts 显示中断</p>

<p>cat /proc/meminfo 校验内存使用</p>

<p>cat /proc/swaps 显示哪些swap被使用</p>

<p>cat /proc/version 显示内核的版本</p>

<p>cat /proc/net/dev 显示网络适配器及统计</p>

<p>cat /proc/mounts 显示已加载的文件系统</p>

<p>lspci -tv 罗列 PCI 设备</p>

<p>lsusb -tv 显示 USB 设备</p>

<p>date 显示系统日期</p>

<p>cal 2007 显示2007年的日历表</p>

<p>date 041217002007.00 设置日期和时间 - 月日时分年.秒</p>

<p>clock -w 将时间修改保存到 BIOS</p>

<p>关机 (系统的关机、重启以及登出 ):</p>

<p>shutdown -h now 关闭系统(1)</p>

<p>init 0 关闭系统(2)</p>

<p>telinit 0 关闭系统(3)</p>

<p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p>

<p>shutdown -c 取消按预定时间关闭系统</p>

<p>shutdown -r now 重启(1)</p>

<p>reboot 重启(2)</p>

<p>logout 注销</p>

<h6>文件和目录:</h6>

<p>cd /home 进入 &lsquo;/ home&rsquo; 目录'</p>

<p>cd .. 返回上一级目录</p>

<p>cd ../.. 返回上两级目录</p>

<p>cd 进入个人的主目录</p>

<p>cd ~user1 进入个人的主目录</p>

<p>cd - 返回上次所在的目录</p>

<p>pwd 显示工作路径</p>

<p>ls 查看目录中的文件</p>

<p>ls -F 查看目录中的文件</p>

<p>ls -l 显示文件和目录的详细资料</p>

<p>ls -a 显示隐藏文件</p>

<p>ls <em>[0-9]</em> 显示包含数字的文件名和目录名</p>

<p>tree 显示文件和目录由根目录开始的树形结构(1)</p>

<p>lstree 显示文件和目录由根目录开始的树形结构(2)</p>

<p>mkdir dir1 创建一个叫做 &lsquo;dir1&rsquo; 的目录'</p>

<p>mkdir dir1 dir2 同时创建两个目录</p>

<p>mkdir -p /tmp/dir1/dir2 创建一个目录树</p>

<p>rm -f file1 删除一个叫做 &lsquo;file1&rsquo; 的文件'</p>

<p>rmdir dir1 删除一个叫做 &lsquo;dir1&rsquo; 的目录'</p>

<p>rm -rf dir1 删除一个叫做 &lsquo;dir1&rsquo; 的目录并同时删除其内容</p>

<p>rm -rf dir1 dir2 同时删除两个目录及它们的内容</p>

<p>mv dir1 new_dir 重命名/移动 一个目录</p>

<p>cp file1 file2 复制一个文件</p>

<p>cp dir/* . 复制一个目录下的所有文件到当前工作目录</p>

<p>cp -a /tmp/dir1 . 复制一个目录到当前工作目录</p>

<p>cp -a dir1 dir2 复制一个目录</p>

<p>ln -s file1 lnk1 创建一个指向文件或目录的软链接</p>

<p>ln file1 lnk1 创建一个指向文件或目录的物理链接</p>

<p>touch -t 0712250000 file1 修改一个文件或目录的时间戳 -
(YYMMDDhhmm)</p>

<p>file file1 outputs the mime type of the file as text</p>

<p>iconv -l 列出已知的编码</p>

<p>iconv -f fromEncoding -t toEncoding inputFile > outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.
find . -maxdepth 1 -name *.jpg -print -exec convert &ldquo;{}&rdquo; -resize 80x60 &ldquo;thumbs/{}&rdquo; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</p>

<h6>文件搜索:</h6>

<p>find / -name file1 从 &lsquo;/&rsquo; 开始进入根文件系统搜索文件和目录</p>

<p>find / -user user1 搜索属于用户 &lsquo;user1&rsquo; 的文件和目录</p>

<p>find /home/user1 -name *.bin 在目录 &lsquo;/ home/user1&rsquo; 中搜索带有'.bin' 结尾的文件</p>

<p>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</p>

<p>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p>

<p>find / -name *.rpm -exec chmod 755 &lsquo;{}&rsquo; \; 搜索以 &lsquo;.rpm&rsquo; 结尾的文件并定义其权限</p>

<p>find / -xdev -name *.rpm 搜索以 &lsquo;.rpm&rsquo; 结尾的文件，忽略光驱、捷盘等可移动设备</p>

<p>locate *.ps 寻找以 &lsquo;.ps&rsquo; 结尾的文件 - 先运行 &lsquo;updatedb&rsquo; 命令</p>

<p>whereis halt 显示一个二进制文件、源码或man的位置</p>

<p>which halt 显示一个二进制文件或可执行文件的完整路径
挂载一个文件系统:</p>

<p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 &lsquo;/
mnt/hda2&rsquo; 已经存在</p>

<p>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 &lsquo;/ mnt/</p>

<p>hda2' 退出</p>

<p>fuser -km /mnt/hda2 当设备繁忙时强制卸载</p>

<p>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</p>

<p>mount /dev/fd0 /mnt/floppy 挂载一个软盘</p>

<p>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom</p>

<p>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom</p>

<p>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom
mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件</p>

<p>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统</p>

<p>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备</p>

<p>mount -t smbfs -o username=user,password=pass //WinClient/</p>

<p>share /mnt/share 挂载一个windows网络共享</p>

<h6>磁盘空间:</h6>

<p>df -h 显示已经挂载的分区列表</p>

<p>ls -lSr |more 以尺寸大小排列文件和目录</p>

<p>du -sh dir1 估算目录 &lsquo;dir1&rsquo; 已经使用的磁盘空间'</p>

<p>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</p>

<p>rpm -q -a &ndash;qf &lsquo;%10{SIZE}t%{NAME}n&rsquo; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</p>

<p>dpkg-query -W -f=&lsquo;${Installed-Size;10}t${Package}n&rsquo; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p>

<h6>用户和群组:</h6>

<p>groupadd group_name 创建一个新用户组</p>

<p>groupdel group_name 删除一个用户组</p>

<p>groupmod -n new_group_name old_group_name 重命名一个用户组</p>

<p>useradd -c &ldquo;Name Surname &rdquo; -g admin -d /home/user1 -s /</p>

<p>bin/bash user1 创建一个属于 &ldquo;admin&rdquo; 用户组的用户</p>

<p>useradd user1 创建一个新用户</p>

<p>userdel -r user1 删除一个用户 ( &lsquo;-r&rsquo; 排除主目录)</p>

<p>usermod -c &ldquo;User FTP&rdquo; -g system -d /ftp/user1 -s /bin/</p>

<p>nologin user1 修改用户属性</p>

<p>passwd 修改口令</p>

<p>passwd user1 修改一个用户的口令 (只允许root执行)</p>

<p>chage -E 2005-12-31 user1 设置用户口令的失效期限</p>

<p>pwck 检查 &lsquo;/etc/passwd&rsquo; 的文件格式和语法修正以及存在的用户</p>

<p>grpck 检查 &lsquo;/etc/passwd&rsquo; 的文件格式和语法修正以及存在的群组</p>

<p>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p>

<p>文件的权限 - 使用 &ldquo;+&rdquo; 设置权限，使用 &ldquo;-&rdquo; 用于取消</p>

<p>ls -lh 显示权限</p>

<p>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</p>

<p>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</p>

<p>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</p>

<p>chown user1 file1 改变一个文件的所有人属性</p>

<p>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</p>

<p>chgrp group1 file1 改变文件的群组</p>

<p>chown user1:group1 file1 改变一个文件的所有人和群组属性</p>

<p>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</p>

<p>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</p>

<p>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位</p>

<p>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</p>

<p>chmod g-s /home/public 禁用一个目录的 SGID 位</p>

<p>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</p>

<p>chmod o-t /home/public 禁用一个目录的 STIKY 位</p>

<p>文件的特殊属性 - 使用 &ldquo;+&rdquo; 设置权限，使用 &ldquo;-&rdquo; 用于取消</p>

<p>chattr +a file1 只允许以追加方式读写文件</p>

<p>chattr +c file1 允许这个文件能被内核自动压缩/解压</p>

<p>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</p>

<p>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</p>

<p>chattr +s file1 允许一个文件被安全地删除</p>

<p>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</p>

<p>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</p>

<p>lsattr 显示特殊的属性</p>

<h6>打包和压缩文件:</h6>

<p>bunzip2 file1.bz2 解压一个叫做 &lsquo;file1.bz2'的文件</p>

<p>bzip2 file1 压缩一个叫做 &lsquo;file1&rsquo; 的文件</p>

<p>gunzip file1.gz 解压一个叫做 &lsquo;file1.gz'的文件</p>

<p>gzip file1 压缩一个叫做 &lsquo;file1'的文件</p>

<p>gzip -9 file1 最大程度压缩</p>

<p>rar a file1.rar test_file 创建一个叫做 &lsquo;file1.rar&rsquo; 的包</p>

<p>rar a file1.rar file1 file2 dir1 同时压缩 &lsquo;file1&rsquo;, &lsquo;file2&rsquo;
以及目录 &lsquo;dir1&rsquo;</p>

<p>rar x file1.rar 解压rar包</p>

<p>unrar x file1.rar 解压rar包</p>

<p>tar -cvf archive.tar file1 创建一个非压缩的 tarball</p>

<p>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &lsquo;file1&rsquo;, &lsquo;file2&rsquo; 以及 &lsquo;dir1'的档案文件</p>

<p>tar -tf archive.tar 显示一个包中的内容</p>

<p>tar -xvf archive.tar 释放一个包</p>

<p>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</p>

<p>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</p>

<p>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包</p>

<p>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</p>

<p>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包</p>

<p>zip file1.zip file1 创建一个zip格式的压缩包</p>

<p>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</p>

<p>unzip file1.zip 解压一个zip格式压缩包</p>

<p>RPM 包 - （Fedora, Redhat及类似系统）</p>

<p>rpm -ivh package.rpm 安装一个rpm包</p>

<p>rpm -ivh &ndash;nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告</p>

<p>rpm -U package.rpm 更新一个rpm包但不改变其配置文件</p>

<p>rpm -F package.rpm 更新一个确定已经安装的rpm包</p>

<p>rpm -e package_name.rpm 删除一个rpm包</p>

<p>rpm -qa 显示系统中所有已经安装的rpm包</p>

<p>rpm -qa | grep httpd 显示所有名称中包含 &ldquo;httpd&rdquo; 字样的rpm包</p>

<p>rpm -qi package_name 获取一个已安装包的特殊信息</p>

<p>rpm -qg &ldquo;System Environment/Daemons&rdquo; 显示一个组件的rpm包</p>

<p>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表</p>

<p>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表</p>

<p>rpm -q package_name &ndash;whatrequires 显示与一个rpm包存在依赖关
系的列表</p>

<p>rpm -q package_name &ndash;whatprovides 显示一个rpm包所占的体积</p>

<p>rpm -q package_name &ndash;scripts 显示在安装/删除期间所执行的脚本l</p>

<p>rpm -q package_name &ndash;changelog 显示一个rpm包的修改历史</p>

<p>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供</p>

<p>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表</p>

<p>rpm &ndash;import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书</p>

<p>rpm &ndash;checksig package.rpm 确认一个rpm包的完整性</p>

<p>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性</p>

<p>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</p>

<p>rpm -Va 检查系统中所有已安装的rpm包- 小心使用</p>

<p>rpm -Vp package.rpm 确认一个rpm包还未安装</p>

<p>rpm2cpio package.rpm | cpio &ndash;extract &ndash;make-directories</p>

<p><em>bin</em> 从一个rpm包运行可执行文件</p>

<p>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm
源码安装一个构建好的包</p>

<p>rpmbuild &ndash;rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p>

<h6>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h6>

<p>yum install package_name 下载并安装一个rpm包</p>

<p>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</p>

<p>yum update package_name.rpm 更新当前系统中所有安装的rpm包</p>

<p>yum update package_name 更新一个rpm包</p>

<p>yum remove package_name 删除一个rpm包</p>

<p>yum list 列出当前系统中安装的所有包</p>

<p>yum search package_name 在rpm仓库中搜寻软件包</p>

<p>yum clean packages 清理rpm缓存删除下载的包</p>

<p>yum clean headers 删除所有头文件</p>

<p>yum clean all 删除所有缓存的包和头文件</p>

<p>DEB 包 (Debian, Ubuntu 以及类似系统)</p>

<p>dpkg -i package.deb 安装/更新一个 deb 包</p>

<p>dpkg -r package_name 从系统删除一个 deb 包</p>

<p>dpkg -l 显示系统中所有已经安装的 deb 包</p>

<p>dpkg -l | grep httpd 显示所有名称中包含 &ldquo;httpd&rdquo; 字样的deb包</p>

<p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p>

<p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p>

<p>dpkg &ndash;contents package.deb 显示尚未安装的一个包所提供的文件列表</p>

<p>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p>

<p>APT 软件工具 (Debian, Ubuntu 以及类似系统)</p>

<p>apt-get install package_name 安装/更新一个 deb 包</p>

<p>apt-cdrom install package_name 从光盘安装/更新一个 deb 包</p>

<p>apt-get update 升级列表中的软件包</p>

<p>apt-get upgrade 升级所有已安装的软件</p>

<p>apt-get remove package_name 从系统删除一个deb包</p>

<p>apt-get check 确认依赖的软件仓库正确</p>

<p>apt-get clean 从下载的软件包中清理缓存</p>

<p>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p>

<h6>查看文件内容:</h6>

<p>cat file1 从第一个字节开始正向查看文件的内容</p>

<p>tac file1 从最后一行开始反向查看一个文件的内容</p>

<p>more file1 查看一个长文件的内容</p>

<p>less file1 类似于 &lsquo;more&rsquo; 命令，但是它允许在文件中和正向操作一样的反向操作</p>

<p>head -2 file1 查看一个文件的前两行</p>

<p>tail -2 file1 查看一个文件的最后两行</p>

<p>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p>

<h6>文本处理:</h6>

<p>cat file1 file2 &hellip; | command &lt;></p>

<p>file1_in.txt_or_file1_out.txt general syntax for text</p>

<p>manipulation using PIPE, STDIN and STDOUT</p>

<p>cat file1 | command( sed, grep, awk, grep, etc&hellip;) ></p>

<p>result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中</p>

<p>cat file1 | command( sed, grep, awk, grep, etc&hellip;) >></p>

<p>result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</p>

<p>grep Aug /var/log/messages 在文件 &lsquo;/var/log/messages'中查找关键词"Aug"</p>

<p>grep ^Aug /var/log/messages 在文件 &lsquo;/var/log/messages'中查找以"Aug"开始的词汇</p>

<p>grep [0-9] /var/log/messages 选择 &lsquo;/var/log/messages&rsquo; 文件中所有包含数字的行</p>

<p>grep Aug -R /var/log/* 在目录 &lsquo;/var/log&rsquo; 及随后的目录中搜索字符串"Aug"</p>

<p>sed &rsquo;s/stringa1/stringa2/g' example.txt 将example.txt文件中的 &ldquo;string1&rdquo; 替换成 &ldquo;string2&rdquo;</p>

<p>sed &lsquo;/^$/d&rsquo; example.txt 从example.txt文件中删除所有空白行</p>

<p>sed &lsquo;/ *#/d; /^$/d&rsquo; example.txt 从example.txt文件中删除所有注释和空白行</p>

<p>echo &lsquo;esempio&rsquo; | tr &lsquo;[:lower:]&rsquo; &lsquo;[:upper:]&rsquo; 合并上下单元格内容</p>

<p>sed -e &lsquo;1d&rsquo; result.txt 从文件example.txt 中排除第一行</p>

<p>sed -n &lsquo;/stringa1/p&rsquo; 查看只包含词汇 &ldquo;string1"的行</p>

<p>sed -e &rsquo;s/ *$//&lsquo; example.txt 删除每一行最后的空白字符</p>

<p>sed -e &rsquo;s/stringa1//g' example.txt 从文档中只删除词汇 &ldquo;string1&rdquo; 并保留剩余全部</p>

<p>sed -n &lsquo;1,5p;5q&rsquo; example.txt 查看从第一行到第5行内容</p>

<p>sed -n &lsquo;5p;5q&rsquo; example.txt 查看第5行</p>

<p>sed -e &rsquo;s/00*/0/g' example.txt 用单个零替换多个零</p>

<p>cat -n file1 标示文件的行数</p>

<p>cat example.txt | awk &lsquo;NR%2==1&rsquo; 删除example.txt文件中的所有偶数行</p>

<p>echo a b c | awk &lsquo;{print $1}&rsquo; 查看一行第一栏</p>

<p>echo a b c | awk &lsquo;{print $1,$3}&rsquo; 查看一行的第一和第三栏</p>

<p>paste file1 file2 合并两个文件或两栏的内容</p>

<p>paste -d &lsquo;+&rsquo; file1 file2 合并两个文件或两栏的内容，中间用"+&ldquo;区分</p>

<p>sort file1 file2 排序两个文件的内容</p>

<p>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</p>

<p>sort file1 file2 | uniq -u 删除交集，留下其他的行</p>

<p>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</p>

<p>comm -1 file1 file2 比较两个文件的内容只删除 &lsquo;file1&rsquo; 所包含的内容</p>

<p>comm -2 file1 file2 比较两个文件的内容只删除 &lsquo;file2&rsquo; 所包含的内容</p>

<p>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p>

<h6>字符设置和文件格式转换:</h6>

<p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</p>

<p>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</p>

<p>recode ..HTML &lt; page.txt > page.html 将一个文本文件转换成html</p>

<p>recode -l | more 显示所有允许的转换格式</p>

<h6>文件系统分析:</h6>

<p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块</p>

<p>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性</p>

<p>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p>

<p>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p>

<p>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p>

<p>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p>

<p>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性</p>

<p>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p>

<p>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p>

<h6>初始化一个文件系统:</h6>

<p>mkfs /dev/hda1 在hda1分区创建一个文件系统</p>

<p>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统</p>

<p>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统</p>

<p>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统</p>

<p>fdformat -n /dev/fd0 格式化一个软盘</p>

<p>mkswap /dev/hda3 创建一个swap文件系统</p>

<h6>SWAP文件系统:</h6>

<p>mkswap /dev/hda3 创建一个swap文件系统</p>

<p>swapon /dev/hda3 启用一个新的swap文件系统</p>

<p>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p>

<h6>备份:</h6>

<p>dump -0aj -f /tmp/home0.bak /home 制作一个 &lsquo;/home&rsquo; 目录的完
整备份</p>

<p>dump -1aj -f /tmp/home0.bak /home 制作一个 &lsquo;/home&rsquo; 目录的交互式备份</p>

<p>restore -if /tmp/home0.bak 还原一个交互式备份</p>

<p>rsync -rogpav &ndash;delete /home /tmp 同步两边的目录</p>

<p>rsync -rogpav -e ssh &ndash;delete /home ip_address:/tmp 通过SSH通道rsync</p>

<p>rsync -az -e ssh &ndash;delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录</p>

<p>rsync -az -e ssh &ndash;delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录</p>

<p>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &lsquo;dd
of=hda.gz&rsquo; 通过ssh在远程主机上执行一次备份本地磁盘的操作</p>

<p>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件</p>

<p>tar -Puf backup.tar /home/user 执行一次对 &lsquo;/home/user&rsquo; 目录的交互式备份操作</p>

<p>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &lsquo;cd /home/share/ &amp;&amp; tar x -p&rsquo; 通过ssh在远程目录中复制一个目录内容</p>

<p>( tar c /home ) | ssh -C user@ip_addr &lsquo;cd /home/backup-
home &amp;&amp; tar x -p&rsquo; 通过ssh在远程目录中复制一个本地目录</p>

<p>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</p>

<p>find /home/user1 -name &lsquo;*.txt&rsquo; | xargs cp -av &ndash;target-directory=/home/backup/ &ndash;parents 从一个目录查找并复制所有以 &lsquo;.txt&rsquo; 结尾的文件到另一个目录</p>

<p>find /var/log -name &lsquo;*.log&rsquo; | tar cv &ndash;files-from=- |
bzip2 > log.tar.bz2 查找所有以 &lsquo;.log&rsquo; 结尾的文件并做成一个bzip包</p>

<p>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</p>

<p>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p>

<h6>光盘:</h6>

<p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容</p>

<p>mkisofs /dev/cdrom > cd.iso 在磁盘上创建一个光盘的iso镜像文件</p>

<p>mkisofs /dev/cdrom | gzip > cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</p>

<p>mkisofs -J -allow-leading-dots -R -V &ldquo;Label CD&rdquo; -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件
cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件
gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</p>

<p>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</p>

<p>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</p>

<p>cd-paranoia &ndash; &ldquo;-3&rdquo; 从一个CD光盘转录音轨到 wav 文件中（参数-3）</p>

<p>cdrecord &ndash;scanbus 扫描总线以识别scsi通道</p>

<p>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>

<h6>网络 - (以太网和WIFI无线):</h6>

<p>ifconfig eth0 显示一个以太网卡的配置</p>

<p>ifup eth0 启用一个 &lsquo;eth0&rsquo; 网络设备</p>

<p>ifdown eth0 禁用一个 &lsquo;eth0&rsquo; 网络设备</p>

<p>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址</p>

<p>ifconfig eth0 promisc 设置 &lsquo;eth0&rsquo; 成混杂模式以嗅探数据包
(sniffing)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下thinkphp的Nginx配置文件]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp</id>
    <content type="html"><![CDATA[<h5>linux下thinkphp的Nginx配置文件(亲测有效)</h5>

<p>一个配置文件，完美支持普通,兼容,pathinfo,rewrite4种url模式，常见的静态文件404时也不会再去跑一遍fastcgi浪费资源。
```
server {
    listen       80;
    server_name  thinkphp.lo;
    root /var/www;
    index  index.html index.htm index.php;</p>

<pre><code>error_page  404              /404.html;
location = /404.html {
    return 404 'Sorry, File not Found!';
}
error_page  500 502 503 504  /50x.html;
location = /50x.html {
    root   /usr/share/nginx/html; # windows用户替换这个目录
}

location / {
    try_files $uri @rewrite;
}

location @rewrite {
    set $static 0;
    if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
        set $static 1;
    }

    if ($static = 0) {
        rewrite ^/(.*)$ /index.php?s=/$1;
    }

}

location ~ /Uploads/.*\.php$ {
    deny all;
}

location ~ \.php/ {
   if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { }
   fastcgi_pass 127.0.0.1:9000;
   include fastcgi_params;
   fastcgi_param SCRIPT_NAME     $1;
   fastcgi_param PATH_INFO       $2;
   fastcgi_param SCRIPT_FILENAME $document_root$1;
}

location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

location ~ /\.ht {
    deny  all;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境
<code>
[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
</code>
2：关掉防火墙
<code>
[root@10-4-14-168 html]# chkconfig iptables off
</code>
3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）
```</p>

<h1>wget <a href="http://www.atomicorp.com/installers/atomic">http://www.atomicorp.com/installers/atomic</a></h1>

<h1>sh ./atomic</h1>

<h1>yum check-update</h1>

<pre><code>4：安装开发包和库文件　(安装下面四个)
</code></pre>

<h1>yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng</h1>

<p>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel</p>

<p>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2</p>

<p>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
<code>
5：卸载已安装的apache、mysql、php
</code></p>

<h1>yum remove httpd</h1>

<h1>yum remove mysql</h1>

<h1>yum remove php</h1>

<pre><code>6：安装nginx
</code></pre>

<h1>yum install nginx</h1>

<h1>service nginx start</h1>

<h1>chkconfig &ndash;levels 235 nginx on</h1>

<p>//设2、3、5级别开机启动
<code>
7：安装mysql
</code></p>

<h1>yum install mysql mysql-server mysql-devel</h1>

<h1>service mysqld start</h1>

<h1>chkconfig &ndash;levels 235 mysqld on</h1>

<p>登陆MySQL删除空用户，修改root密码
mysql>select user,host,password from mysql.user;</p>

<p>mysql>drop user &lsquo;&rsquo;@localhost;</p>

<p>mysql>update mysql.user set password = PASSWORD(&lsquo;*********&rsquo;) where user=&lsquo;root&rsquo;;</p>

<p>mysql>flush privileges;
<code>
8：安装php
</code></p>

<h1>yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap</h1>

<p>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
//安装php和所需组件使PHP支持MySQL、FastCGI模式</p>

<h1>yum install  php-tidy php-common php-devel php-fpm php-mysql</h1>

<h1>service php-fpm start</h1>

<h1>chkconfig &ndash;levels 235 php-fpm on</h1>

<pre><code>9：配置nginx支持php
</code></pre>

<h1>mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</h1>

<p>//将配置文件改为备份文件</p>

<h1>cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</h1>

<p>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件</p>

<p>//修改nginx配置文件，添加fastcgi支持</p>

<h1>vi /etc/nginx/nginx.conf</h1>

<p>index index.php index.html index.htm;
//加入index.php</p>

<p>location ~ .php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
//将以上代码注释去掉，并修改成nginx默认路径
<code>
10：配置php
</code>
//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
[root@CentOS ~]# vi /etc/php.ini
<code>
11：重启nginx php-fpm
</code></p>

<h1>service nginx restart</h1>

<h1>service php-fpm restart</h1>

<pre><code class="　　">12：建立info.php文件
</code></pre>

<h1>vi /usr/share/nginx/html/info.php</h1>

<p>&lt;?php
   phpinfo();
?>
<code>
13：测试nginx是否解析php
</code>
本地浏览器输入：192.168.12.103/info.php
显示php界面  环境搭建成功
```
注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
</feed>
