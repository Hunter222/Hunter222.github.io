<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 小黄鸡]]></title>
  <link href="http://hunter222.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://hunter222.github.io/"/>
  <updated>2016-08-31T20:46:24+08:00</updated>
  <id>http://hunter222.github.io/</id>
  <author>
    <name><![CDATA[小黄鸡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux下thinkphp的Nginx配置文件]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp/"/>
    <updated>2016-08-31T18:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/Nginx-thinkphp</id>
    <content type="html"><![CDATA[<h5>linux下thinkphp的Nginx配置文件(亲测有效)</h5>

<p>一个配置文件，完美支持普通,兼容,pathinfo,rewrite4种url模式，常见的静态文件404时也不会再去跑一遍fastcgi浪费资源。
```
server {
    listen       80;
    server_name  thinkphp.lo;
    root /var/www;
    index  index.html index.htm index.php;</p>

<pre><code>error_page  404              /404.html;
location = /404.html {
    return 404 'Sorry, File not Found!';
}
error_page  500 502 503 504  /50x.html;
location = /50x.html {
    root   /usr/share/nginx/html; # windows用户替换这个目录
}

location / {
    try_files $uri @rewrite;
}

location @rewrite {
    set $static 0;
    if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
        set $static 1;
    }

    if ($static = 0) {
        rewrite ^/(.*)$ /index.php?s=/$1;
    }

}

location ~ /Uploads/.*\.php$ {
    deny all;
}

location ~ \.php/ {
   if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { }
   fastcgi_pass 127.0.0.1:9000;
   include fastcgi_params;
   fastcgi_param SCRIPT_NAME     $1;
   fastcgi_param PATH_INFO       $2;
   fastcgi_param SCRIPT_FILENAME $document_root$1;
}

location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

location ~ /\.ht {
    deny  all;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos6.5下搭建LNMP的方法]]></title>
    <link href="http://hunter222.github.io/blog/2016/08/31/centos-LNMP/"/>
    <updated>2016-08-31T17:19:26+08:00</updated>
    <id>http://hunter222.github.io/blog/2016/08/31/centos-LNMP</id>
    <content type="html"><![CDATA[<h5>在Centos6.5下搭建LNMP的方法</h5>

<p>1：查看环境
<code>
[root@10-4-14-168 html]# cat /etc/redhat-release
CentOS release 6.5 (Final)
</code>
2：关掉防火墙
<code>
[root@10-4-14-168 html]# chkconfig iptables off
</code>
3：配置CentOS 6.0 第三方yum源（CentOS默认的标准源里没有nginx软件包）
```</p>

<h1>wget <a href="http://www.atomicorp.com/installers/atomic">http://www.atomicorp.com/installers/atomic</a></h1>

<h1>sh ./atomic</h1>

<h1>yum check-update</h1>

<pre><code>4：安装开发包和库文件　(安装下面四个)
</code></pre>

<h1>yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng</h1>

<p>libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel</p>

<p>gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2</p>

<p>libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
<code>
5：卸载已安装的apache、mysql、php
</code></p>

<h1>yum remove httpd</h1>

<h1>yum remove mysql</h1>

<h1>yum remove php</h1>

<pre><code>6：安装nginx
</code></pre>

<h1>yum install nginx</h1>

<h1>service nginx start</h1>

<h1>chkconfig &ndash;levels 235 nginx on</h1>

<p>//设2、3、5级别开机启动
<code>
7：安装mysql
</code></p>

<h1>yum install mysql mysql-server mysql-devel</h1>

<h1>service mysqld start</h1>

<h1>chkconfig &ndash;levels 235 mysqld on</h1>

<p>登陆MySQL删除空用户，修改root密码
mysql>select user,host,password from mysql.user;</p>

<p>mysql>drop user &lsquo;&rsquo;@localhost;</p>

<p>mysql>update mysql.user set password = PASSWORD(&lsquo;*********&rsquo;) where user=&lsquo;root&rsquo;;</p>

<p>mysql>flush privileges;
<code>
8：安装php
</code></p>

<h1>yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap</h1>

<p>php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap
//安装php和所需组件使PHP支持MySQL、FastCGI模式</p>

<h1>yum install  php-tidy php-common php-devel php-fpm php-mysql</h1>

<h1>service php-fpm start</h1>

<h1>chkconfig &ndash;levels 235 php-fpm on</h1>

<pre><code>9：配置nginx支持php
</code></pre>

<h1>mv /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</h1>

<p>//将配置文件改为备份文件</p>

<h1>cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</h1>

<p>//由于原配置文件要自己去写因此可以使用默认的配置文件作为配置文件</p>

<p>//修改nginx配置文件，添加fastcgi支持</p>

<h1>vi /etc/nginx/nginx.conf</h1>

<p>index index.php index.html index.htm;
//加入index.php</p>

<p>location ~ .php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
//将以上代码注释去掉，并修改成nginx默认路径
<code>
10：配置php
</code>
//编辑文件php.ini，在文件末尾添加cgi.fix_pathinfo = 1
[root@CentOS ~]# vi /etc/php.ini
<code>
11：重启nginx php-fpm
</code></p>

<h1>service nginx restart</h1>

<h1>service php-fpm restart</h1>

<pre><code class="　　">12：建立info.php文件
</code></pre>

<h1>vi /usr/share/nginx/html/info.php</h1>

<p>&lt;?php
   phpinfo();
?>
<code>
13：测试nginx是否解析php
</code>
本地浏览器输入：192.168.12.103/info.php
显示php界面  环境搭建成功
```
注：原文参考：<a href="http://www.cnblogs.com/xiaoit/p/3991037.html">http://www.cnblogs.com/xiaoit/p/3991037.html</a></p>
]]></content>
  </entry>
  
</feed>
